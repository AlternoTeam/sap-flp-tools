// For Library Version: 1.115.0

declare module "sap/suite/ui/commons/collaboration/BaseHelperService" {
  /**
   * @SINCE 1.108
   *
   * Base class for the CollaborationHelpers
   */
  interface BaseHelperService {
    /**
     * Provides a list of all collaboration options
     *
     * @returns Array of available options
     */
    getOptions(
      /**
       * Optional argument in case the consumer wants to influence the options, otherwise pass as undefined
       */
      oParams: {
        /**
         * Allow the 'Share as Chat' option to be available in case Microsoft Teams is the collaboration provider
         */
        isShareAsLinkEnabled: boolean;
        /**
         * Allow the 'Share as Tab' option to be available in case Microsoft Teams is the collaboration provider
         */
        isShareAsTabEnabled: boolean;
        /**
         * Allow the 'Share as Card' option to be available in case Microsoft Teams is the collaboration provider
         */
        isShareAsCardEnabled: boolean;
      }
    ): any[];
    /**
     * Method to be called to trigger the 'Share' operation
     */
    share(
      /**
       * JSON object of collaboration option that is clicked
       */
      oOption: Object,
      /**
       * Parameter object which contains the information to be shared
       */
      oParams: {
        /**
         * URL of the application which needs to be shared
         */
        url: string;
        /**
         * Title of the application which needs to be used during the integration
         */
        appTitle: string;
        /**
         * Title of the object page which needs to be used during the integration
         */
        subTitle: string;
        /**
         * Experimental flag. Set the flag to 'true' to minimize the URL if the 'Share as Chat' option is used
         */
        minifyUrlForChat: boolean;
      }
    ): void;
  }
  const BaseHelperService: BaseHelperService;
  export default BaseHelperService;
}

declare module "sap/suite/ui/commons/collaboration/CollaborationHelper" {
  /**
   * @SINCE 1.108
   *
   * CollaborationHelper for collaboration-related functionalities
   */
  interface CollaborationHelper {
    /**
     * Determines whether the app is running in the Microsoft Teams application. If the URL parameter "sap-collaboration-teams"
     * is set to true and if the appState is set to lean, the method ensures that the application runs in the
     * Microsoft Teams environment
     *
     * @returns Return the resolved promise with the data if the conditions are met with 'true', else 'false'
     */
    isTeamsModeActive(): Promise<any>;
    /**
     * Method that checks whether the application is running in the Microsoft Teams environment. If yes, the
     * method disables the Avatar icon on the shell. This is done synchronously. The Method returns a promise.
     * The promise is resolved immediately if the URL is not compact. In case of a compact hash, the method
     * retrieves the original or complete hash and replaces it in the window. The method then resolves the promise.
     *
     * @returns Return the resolved promise when the redirection of the URL is done.
     */
    processAndExpandHash(): Promise<any>;
  }
  const CollaborationHelper: CollaborationHelper;
  export default CollaborationHelper;
}

declare module "sap/suite/ui/commons/library" {
  /**
   * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.BulletMicroChartModeType should be used.
   *
   * Enumeration of possible BulletChart display modes.
   */
  export enum BulletChartMode {
    /**
     * Displays the Actual value.
     */
    Actual = "Actual",
    /**
     * Displays delta between the Actual and Threshold values.
     */
    Delta = "Delta",
  }
  /**
   * Comparison operators supported by the calculation builder.
   */
  export enum CalculationBuilderComparisonOperatorType {
    /**
     * Not equal to.
     */
    "!=" = "undefined",
    /**
     * Less than.
     */
    "<" = "undefined",
    /**
     * Less than or equal to.
     */
    "<=" = "undefined",
    /**
     * Equal to.
     */
    "=" = "undefined",
    /**
     * Greater than.
     */
    ">" = "undefined",
    /**
     * Greater than or equal to.
     */
    ">=" = "undefined",
  }
  /**
   * Functions supported by the calculation builder.
   *  To add a custom function, use {@link sap.suite.ui.commons.CalculationBuilderFunction}.
   */
  export enum CalculationBuilderFunctionType {
    /**
     * ABS.
     */
    ABS = "ABS",
    /**
     * Case.
     */
    Case = "CASE",
    /**
     * NDIV0.
     */
    NDIV0 = "NDIV0",
    /**
     * NODIM.
     */
    NODIM = "NODIM",
    /**
     * Round.
     */
    Round = "ROUND",
    /**
     * Round Down.
     */
    RoundDown = "RoundDown",
    /**
     * Round Up.
     */
    RoundUp = "RoundUp",
    /**
     * SQRT.
     */
    SQRT = "SQRT",
    /**
     * SUMCT.
     */
    SUMCT = "SUMCT",
    /**
     * SUMGT.
     */
    SUMGT = "SUMGT",
    /**
     * SUMRT.
     */
    SUMRT = "SUMRT",
  }
  /**
   * The types of items (operands) that can be used in a calculation builder expression.
   */
  export enum CalculationBuilderItemType {
    /**
     * @deprecated (since 1.77.0) - replaced by {@link sap.suite.ui.commons.CalculationBuilderItemType.Literal}.
     *
     * Constant.
     */
    Constant = "Constant",
    /**
     * Custom Function.
     *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction}.
     */
    CustomFunction = "CustomFunction",
    /**
     * Custom arithmetic operator defined by the application.
     * Custom operators are not validated by the {@link sap.suite.ui.commons.CalculationBuilder} control.
     */
    CustomOperator = "CustomOperator",
    /**
     * Function.
     *  Default functions are defined by {@link sap.suite.ui.commons.CalculationBuilderFunctionType}.
     */
    Function = "Function",
    /**
     * @SINCE 1.77.0
     *
     * Literal.
     */
    Literal = "Literal",
    /**
     * Operator.
     */
    Operator = "Operator",
    /**
     * Variable.
     */
    Variable = "Variable",
  }
  /**
   * Layout of the calculation builder.
   */
  export enum CalculationBuilderLayoutType {
    /**
     * Both the visual and text editors are displayed.
     */
    Default = "Default",
    /**
     * Only the text editor is displayed.
     */
    TextualOnly = "TextualOnly",
    /**
     * Only the visual editor is displayed.
     */
    VisualOnly = "VisualOnly",
    /**
     * Both the visual and text editors are displayed, but the text editor is read-only.
     */
    VisualTextualReadOnly = "VisualTextualReadOnly",
  }
  /**
   * Logical operators supported by the calculation builder.
   */
  export enum CalculationBuilderLogicalOperatorType {
    /**
     * Logical conjunction.
     */
    AND = "AND",
    /**
     * Negation.
     */
    NOT = "NOT",
    /**
     * Logical disjunction.
     */
    OR = "OR",
    /**
     * Exclusive disjunction.
     */
    XOR = "XOR",
  }
  /**
   * Arithmetic operators supported by the calculation builder.
   */
  export enum CalculationBuilderOperatorType {
    /**
     * Left bracket.
     */
    "(" = "undefined",
    /**
     * Right bracket.
     */
    ")" = "undefined",
    /**
     * Multiplication.
     */
    "*" = "undefined",
    /**
     * Addition.
     */
    "+" = "undefined",
    /**
     * Comma.
     */
    "," = "undefined",
    /**
     * Subtraction.
     */
    "-" = "undefined",
    /**
     * Division.
     */
    "/" = "undefined",
  }
  /**
   * Types of expression validation that define when the expression entered into the {@link sap.suite.ui.commons.CalculationBuilder }
   * is validated.
   */
  export enum CalculationBuilderValidationMode {}
  /**
   * @deprecated (since 1.34) - Deprecated. Moved to sapui5.runtime.
   *
   * Enumeration of possible theme specific background colors.
   */
  export enum CommonBackground {
    /**
     * Dark background color.
     */
    Dark = "Dark",
    /**
     * The darkest background color.
     */
    Darkest = "Darkest",
    /**
     * Extra dark background color.
     */
    ExtraDark = "ExtraDark",
    /**
     * Extra light background color.
     */
    ExtraLight = "ExtraLight",
    /**
     * Light background color.
     */
    Light = "Light",
    /**
     * The lightest background color.
     */
    Lightest = "Lightest",
    /**
     * Medium background color.
     */
    Medium = "Medium",
    /**
     * Medium light background color.
     */
    MediumLight = "MediumLight",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.ComparisonMicroChartViewType should be
   * used.
   *
   * The view of the ComparisonChart.
   */
  export enum ComparisonChartView {
    /**
     * Titles and values are displayed above the bars.
     */
    Normal = "Normal",
    /**
     * Titles and values are displayed in the same line with the bars.
     */
    Wide = "Wide",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. Moved to sapui5.runtime.
   *
   * The marker for the deviation trend.
   */
  export enum DeviationIndicator {
    /**
     * The actual value is less than the target value.
     */
    Down = "Down",
    /**
     * No value.
     */
    None = "None",
    /**
     * The actual value is more than the target value.
     */
    Up = "Up",
  }
  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * Enumeration of possible FacetOverview height settings.
   */
  export enum FacetOverviewHeight {
    /**
     * Content based height
     */
    Auto = "Auto",
    /**
     * Large height
     */
    L = "L",
    /**
     * Medium height
     */
    M = "M",
    /**
     * No value. The height of the control is defined by depricated height property.
     */
    None = "None",
    /**
     * Small height
     */
    S = "S",
    /**
     * Extra Large height
     */
    XL = "XL",
    /**
     * Extra small height
     */
    XS = "XS",
    /**
     * Extra extra large height
     */
    XXL = "XXL",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. Moved to openUI5.
   *
   * Enumeration of possible frame types.
   */
  export enum FrameType {
    /**
     * The Auto frame type that adjusts the size of the control to the content.
     */
    Auto = "Auto",
    /**
     * The 1x1 frame type.
     */
    OneByOne = "OneByOne",
    /**
     * The 2x1 frame type.
     */
    TwoByOne = "TwoByOne",
    /**
     * The 2/3 frame type.
     */
    TwoThirds = "TwoThirds",
  }
  /**
   * @deprecated (since 1.48) - This control is deprecated since 1.48. Please use the equivalent sap.ui.core.Orientation.
   *
   * The list of possible HeaderContainer views.
   */
  export enum HeaderContainerView {
    /**
     * The horizontal orientation of the control.
     */
    Horizontal = "Horizontal",
    /**
     * The vertical orientation of the control.
     */
    Vertical = "Vertical",
  }
  /**
   * Action buttons for the {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer}.
   */
  export enum ImageEditorContainerButton {
    /**
     * Crop button.
     */
    Crop = "Crop",
    /**
     * Filter button.
     */
    Filter = "Filter",
    /**
     * Transform button.
     */
    Transform = "Transform",
  }
  /**
   * Mode types for {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer}.
   */
  export enum ImageEditorContainerMode {
    /**
     * Mode with rectangular and circular/oval crop options.
     */
    Crop = "Crop",
    /**
     * Mode with filter options, including grayscale, sepia, brightness, contrast, saturation, and some other.
     */
    Filter = "Filter",
    /**
     * Mode with resize, rotate, and flip options.
     */
    Transform = "Transform",
  }
  /**
   * Mode types for {@link sap.suite.ui.commons.imageeditor.ImageEditor}.
   */
  export enum ImageEditorMode {
    /**
     * Image editor mode with custom shape crop area.
     */
    CropCustomShape = "CropCustomShape",
    /**
     * Image editor mode with ellipse crop area.
     */
    CropEllipse = "CropEllipse",
    /**
     * Image editor mode with rectangle crop area.
     */
    CropRectangle = "CropRectangle",
    /**
     * Image editor mode that shows just the source image.
     * This mode is used by default.
     */
    Default = "Default",
    /**
     * Image editor mode with resize handlers.
     */
    Resize = "Resize",
  }
  /**
   * Image file format.
   */
  export enum ImageFormat {
    /**
     * JPEG file format.
     */
    Jpeg = "Jpeg",
    /**
     * PNG file format.
     */
    Png = "Png",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. sap.m.InfoTileSize should be used.
   *
   * Enumeration of possible PointTile size settings.
   */
  export enum InfoTileSize {
    /**
     * The size of the tile depends on the device it is running on. It is large on desktop, medium on tablet
     * and small on phone.
     */
    Auto = "Auto",
    /**
     * Large size.
     */
    L = "L",
    /**
     * Medium size.
     */
    M = "M",
    /**
     * Small size.
     */
    S = "S",
    /**
     * Extra small size.
     */
    XS = "XS",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. sap.m.InfoTileTextColor should be used.
   *
   * Enumeration of possible InfoTile text color settings.
   */
  export enum InfoTileTextColor {
    /**
     * Critical InfoTile text color.
     */
    Critical = "Critical",
    /**
     * Negative InfoTile text color.
     */
    Negative = "Negative",
    /**
     * Positive InfoTile text color.
     */
    Positive = "Positive",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. sap.m.InfoTileValueColor should be used.
   *
   * Enumeration of possible InfoTile value color settings.
   */
  export enum InfoTileValueColor {
    /**
     * Critical InfoTile value color.
     */
    Critical = "Critical",
    /**
     * Error InfoTile value color.
     */
    Error = "Error",
    /**
     * Good InfoTile value color.
     */
    Good = "Good",
    /**
     * Neutral InfoTile value color.
     */
    Neutral = "Neutral",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. sap.m.LoadState should be used.
   *
   * Enumeration of possible load states for LoadableView.
   */
  export enum LoadState {
    /**
     * LoadableView disabled to load the control.
     */
    Disabled = "Disabled",
    /**
     * LoadableView failed to load the control.
     */
    Failed = "Failed",
    /**
     * LoadableView has loaded the control.
     */
    Loaded = "Loaded",
    /**
     * LoadableView is loading the control.
     */
    Loading = "Loading",
  }
  /**
   * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.AreaMicroChartViewType should be used.
   *
   * The list of possible MicroAreaChart views.
   */
  export enum MicroAreaChartView {
    /**
     * The view with labels on the top and bottom.
     */
    Normal = "Normal",
    /**
     * The view with labels on the left and right.
     */
    Wide = "Wide",
  }
  /**
   * Options that define how the micro process flow should be rendered inside its parent container.
   * These options can be useful when the width of the parent container does not allow for all nodes in the
   * micro process flow to be displayed on the same line.
   */
  export enum MicroProcessFlowRenderType {
    /**
     * The micro process flow nodes are not wrapped inside the parent container.
     * The nodes that do not fit into the width of the parent container are not displayed.
     */
    NoWrap = "NoWrap",
    /**
     * Two scrolling icons are added to the parent container, which allows navigation by scrolling through the
     * micro process flow.
     * Please note that the numbers displayed next to the scrolling icons are not recalculated dynamically when
     * you resize the browser window. If you want them to be recalculated, consider using the `ScrollingWithResizer`
     * render type instead.
     */
    Scrolling = "Scrolling",
    /**
     * Two scrolling icons are added to the parent container, with the number indicators updated automatically
     * when you resize the browser window.
     * This option allows scrolling through the micro process flow, just as the `Scrolling` option does, but
     * may slightly affect the performance. If using this render type affects your application's performance,
     * consider using the `Scrolling` render type instead.
     */
    ScrollingWithResizer = "ScrollingWithResizer",
    /**
     * The micro process flow nodes are wrapped inside the parent container.
     */
    Wrap = "Wrap",
  }
  /**
   * Describes the state of a connection label.
   */
  export enum ProcessFlowConnectionLabelState {
    /**
     * Critical connection label.
     */
    Critical = "Critical",
    /**
     * Negative connection label.
     */
    Negative = "Negative",
    /**
     * Neutral connection label.
     */
    Neutral = "Neutral",
    /**
     * Positive connection label.
     */
    Positive = "Positive",
  }
  /**
   * Describes the state of a connection.
   */
  export enum ProcessFlowConnectionState {
    /**
     * Dimmed connection.
     */
    Dimmed = "Dimmed",
    /**
     * Highlighted connection.
     */
    Highlighted = "Highlighted",
    /**
     * Regular connection.
     */
    Regular = "Regular",
    /**
     * Selected connection.
     */
    Selected = "Selected",
  }
  /**
   * Describes the type of a connection.
   */
  export enum ProcessFlowConnectionType {
    /**
     * Normal connection.
     */
    Normal = "Normal",
    /**
     * Planned connection.
     */
    Planned = "Planned",
  }
  /**
   * The ProcessFlow calculates the ProcessFlowDisplayState based on the 'focused' and 'highlighted' properties
   * of each node.
   */
  export enum ProcessFlowDisplayState {
    /**
     * The control is in the dimmed state
     */
    Dimmed = "Dimmed",
    /**
     * The control is in the combination of dimmed and focused display state
     */
    DimmedFocused = "DimmedFocused",
    /**
     * The control is in highlighted display state
     */
    Highlighted = "Highlighted",
    /**
     * The control is in the combination of highlighted and focused display state
     */
    HighlightedFocused = "HighlightedFocused",
    /**
     * The control is in the regular display state
     */
    Regular = "Regular",
    /**
     * The control is in the combination of regular and focused display state
     */
    RegularFocused = "RegularFocused",
    /**
     * The control is in the selected display state
     */
    Selected = "Selected",
    /**
     * The control is in the combination of selected and focused display state
     */
    SelectedFocused = "SelectedFocused",
    /**
     * The control is in the combination of selected and highlighted display state
     */
    SelectedHighlighted = "SelectedHighlighted",
    /**
     * The control is in the combination of selected, highlighted and focused display state
     */
    SelectedHighlightedFocused = "SelectedHighlightedFocused",
  }
  /**
   * This type is used in the 'state' property of the ProcessFlowLaneHeader. For example, app developers can
   * set the status of the lane header if lanes are displayed without documents. If the complete process flow
   * is displayed (that is, if the lane header is displayed with documents underneath), the given state values
   * of the lane header are ignored and will be calculated in the ProcessFlow according to the current state
   * of the documents.
   */
  export enum ProcessFlowLaneState {
    /**
     * The 'state' property is associated with the given value. Possible states are: positive, negative, neutral,
     * and planned.
     */
    state = "state",
    /**
     * In the 'state' array, the total amount of values needs to be 100%.
     */
    value = "value",
  }
  /**
   * Describes the state connected to the content it is representing in the Process Flow Node. The state is
   * also displayed in the Process Flow Lane Header as a color segment of the donut.
   */
  export enum ProcessFlowNodeState {
    /**
     * @SINCE 1.42.0
     *
     * Critical status for a created document: with this document, a critical issue occurred, for example, the
     * business process can be interrupted.
     */
    Critical = "Critical",
    /**
     * Negative status for a created document: with this document, an issue occurred.
     */
    Negative = "Negative",
    /**
     * Neutral status for a created document: the document is in progress.
     */
    Neutral = "Neutral",
    /**
     * Planned status for a document: the document is planned to be started.
     */
    Planned = "Planned",
    /**
     * Planned, but negative status for a document: the planned document has an issue but has not yet been started.
     */
    PlannedNegative = "PlannedNegative",
    /**
     * Positive status for a created document: the document is done, finished, solved.
     */
    Positive = "Positive",
  }
  /**
   * Describes the type of a node. The type value could be single or aggregated. With this type, the application
   * can define if several nodes should be displayed as one aggregated node in a path per column to represent
   * a grouping of semantically equal nodes.
   */
  export enum ProcessFlowNodeType {
    /**
     * Aggregated node - several nodes are illustrated as a stack of nodes in the same path and in one column.
     */
    Aggregated = "Aggregated",
    /**
     * Single node - one node is illustrated in a column.
     */
    Single = "Single",
  }
  /**
   * The zoom level defines level of details for the node and how much space the process flow requires.
   */
  export enum ProcessFlowZoomLevel {
    /**
     * Zoom level for least details - only icon is displayed.
     */
    Four = "Four",
    /**
     * The full details with normal font size.
     */
    One = "One",
    /**
     * The details are the icon, title text and no additional texts.
     */
    Three = "Three",
    /**
     * The full detail view of the node but with smaller font size.
     */
    Two = "Two",
  }
  /**
   * @deprecated (since 1.48) - This Enumeration is deprecated as it is not used anywhere.
   *
   * SelectionState
   */
  export enum SelectionState {
    /**
     * Not Selected
     */
    NotSelected = "NotSelected",
    /**
     * Selected
     */
    Selected = "Selected",
    /**
     * Semantic
     */
    Semantic = "Semantic",
  }
  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * Defines the way how UnifiedThingGroup control is rendered.
   */
  export enum ThingGroupDesign {
    /**
     * In this design there is indentation between header and content of the group.
     */
    TopIndent = "TopIndent",
    /**
     * In this design there is no indentation between header and content of the group.
     */
    ZeroIndent = "ZeroIndent",
  }
  /**
   * The alignment of timeline posts relative to the timeline axis.
   */
  export enum TimelineAlignment {
    /**
     * Entries are displayed below the timeline axis.
     *  In a vertical timeline, entries are displayed to the right of the timeline axis. Synonym for Right.
     */
    Bottom = "Bottom",
    /**
     * Entries are displayed to the left of the timeline axis.
     *  In a horizontal timeline, entries are displayed above the timeline axis. Synonym for Top.
     */
    Left = "Left",
    /**
     * Entries are displayed to the right of the timeline axis.
     *  In a horizontal timeline, entries are displayed below the timeline axis. Synonym for Bottom.
     */
    Right = "Right",
    /**
     * Entries are displayed above the timeline axis.
     *  In a vertical timeline, entries are displayed to the left of the timeline axis. Synonym for Left.
     */
    Top = "Top",
  }
  /**
   * Defines the orientation of the timeline axis.
   */
  export enum TimelineAxisOrientation {
    /**
     * Horizontal timeline.
     */
    Horizontal = "Horizontal",
    /**
     * Vertical timeline.
     */
    Vertical = "Vertical",
  }
  /**
   * Filter type for the timeline.
   */
  export enum TimelineFilterType {
    /**
     * Items filter based on data, defined by the {@link sap.suite.ui.commons.TimelineItem#getFilterValue filterValue }
     * property or by a custom value.
     */
    Data = "Data",
    /**
     * Search results filter.
     */
    Search = "Search",
    /**
     * Time range filter, defined by the start date (`from`) and end date (`to`) of the time range.
     */
    Time = "Time",
  }
  /**
   * Type of grouping for timeline entries.
   */
  export enum TimelineGroupType {
    /**
     * Data is grouped by day.
     */
    Day = "Day",
    /**
     * Data is grouped by month.
     */
    Month = "Month",
    /**
     * No grouping is used.
     */
    None = "None",
    /**
     * Data is grouped by quarter.
     */
    Quarter = "Quarter",
    /**
     * Data is grouped by week.
     */
    Week = "Week",
    /**
     * Data is grouped by year.
     */
    Year = "Year",
  }
  /**
   * @deprecated (since 1.54.0) - Not Fiori.
   *
   * Type of the fadeout effect applied to the upper and lower margins of the visible timeline area.
   */
  export enum TimelineScrollingFadeout {
    /**
     * Timeline fades into the lower and upper margins of the visible area, but no scroll buttons are displayed.
     */
    Area = "Area",
    /**
     * Timeline fades into the lower and upper margins of the visible area, and scroll buttons are displayed.
     */
    AreaWithButtons = "AreaWithButtons",
    /**
     * Timeline does not fade out.
     */
    None = "None",
  }
  /**
   * @deprecated (since 1.32) - Deprecated. Numeric content or any other standard Fiori control should be
   * used instead.
   *
   * Marker for the key value status.
   */
  export enum ValueStatus {
    /**
     * Bad value.
     */
    Bad = "Bad",
    /**
     * Critical value.
     */
    Critical = "Critical",
    /**
     * Good value.
     */
    Good = "Good",
    /**
     * Positive value.
     */
    Neutral = "Neutral",
  }

  export namespace networkgraph {
    /**
     * Position of a custom action button.
     */
    enum ActionButtonPosition {
      /**
       * The action button is aligned to the left.
       */
      Left = "Left",
      /**
       * The action button is aligned to the right.
       */
      Right = "Right",
    }
    /**
     * Background color for the network graph.
     */
    enum BackgroundColor {
      /**
       * The default color of the parent container is used.
       */
      Default = "Default",
      /**
       * White.
       */
      White = "White",
    }
    /**
     * Semantic type of the node status.
     */
    enum ElementStatus {
      /**
       * A node type that communicates an error.
       */
      Error = "Error",
      /**
       * A node type that communicates information.
       */
      Information = "Information",
      /**
       * A standard node
       */
      Standard = "Standard",
      /**
       * A node type that communicates success.
       */
      Success = "Success",
      /**
       * A node type that communicates a warning.
       */
      Warning = "Warning",
    }
    /**
     * States of the Header checkbox.
     */
    enum HeaderCheckboxState {
      /**
       * Checkbox is visible and selected.
       */
      Checked = "Checked",
      /**
       * Checkbox is not visible.
       */
      Hidden = "Hidden",
      /**
       * Checkbox is visible and not selected.
       */
      Unchecked = "Unchecked",
    }
    /**
     * Types of layout algorithms that define the visual features and layout of the network graph.
     */
    enum LayoutRenderType {
      /**
       * Algorithm that arranges the nodes freely in a force-directed manner, based on the attractive and repulsive
       * forces within the graph.
       *  This layout algorithm ignores node groups, so all nodes appear as standalone nodes not grouped in any
       * way.
       */
      Forces = "Forces",
      /**
       * Algorithm that arranges nodes into layers and ensures support for free-form groups.
       */
      LayeredWithGroups = "LayeredWithGroups",
      /**
       * Algorithm that arranges nodes into swim lanes, which are single-layer groups.
       */
      SwimLanes = "SwimLanes",
      /**
       * Algorithm that supports nested groups, similar to `SwimLanes`, but arranges them into two columns only:
       * one on the left and one on the right.
       */
      TwoColumns = "TwoColumns",
    }
    /**
     * Direction of the arrow on the connector line.
     */
    enum LineArrowOrientation {
      /**
       * The arrows on the line point both ways.
       */
      Both = "Both",
      /**
       * The arrow points from child to parent.
       */
      ChildOf = "ChildOf",
      /**
       * The arrow is hidden.
       */
      None = "None",
      /**
       * The arrow points from parent to child.
       */
      ParentOf = "ParentOf",
    }
    /**
     * Position of the arrow on a connector line.
     */
    enum LineArrowPosition {
      /**
       * The arrow is placed at the end of the last line segment.
       */
      End = "End",
      /**
       * The arrow is placed in the middle of the last line segment. If the line has only one segment, the arrow
       * appears in the middle of the line.
       */
      Middle = "Middle",
      /**
       * The arrow is placed at the beginning of the first line segment.
       */
      Start = "Start",
    }
    /**
     * Type of connector line used in the network graph.
     */
    enum LineType {
      /**
       * Dashed connector line.
       */
      Dashed = "Dashed",
      /**
       * Dotted connector line.
       */
      Dotted = "Dotted",
      /**
       * Solid connector line.
       */
      Solid = "Solid",
    }
    /**
     * Type of node placement for Layered Algorithm. See {@link https://rtsys.informatik.uni-kiel.de/confluence/display/KIELER/KLay+Layered+Layout+Options#KLayLayeredLayoutOptions-nodePlacement}
     */
    enum NodePlacement {
      /**
       * Minimizes the number of edge bends at the expense of the graph size.
       */
      BrandesKoepf = "BrandesKoepf",
      /**
       * Calculates the most optimal layout balance.
       */
      LinearSegments = "LinearSegments",
      /**
       * Minimizes the area taken by the graph at the expense of everything else.
       */
      Simple = "Simple",
    }
    /**
     * Shape of a node in a network graph.
     */
    enum NodeShape {
      /**
       * Rectangular shape with an optional list of attributes.
       */
      Box = "Box",
      /**
       * Round shape with a text label below.
       */
      Circle = "Circle",
      /**
       * Shape for custom rendering.
       */
      Custom = "Custom",
    }
    /**
     * Orientation of layered layout.
     */
    enum Orientation {
      /**
       * The flow of the graph is bottom to top.
       */
      BottomTop = "BottomTop",
      /**
       * The flow of the graph is left to right.
       */
      LeftRight = "LeftRight",
      /**
       * The flow of the graph is right to left.
       */
      RightLeft = "RightLeft",
      /**
       * The flow of the graph is top to bottom.
       */
      TopBottom = "TopBottom",
    }
    /**
     * Determines how nodes are rendered. For optimal performance and usability, it is recommended that you
     * use HTML, which allows you to avoid dealing with SVG limitations.
     */
    enum RenderType {
      /**
       * Nodes are rendered as classic HTML.
       */
      Html = "Html",
      /**
       * Nodes are rendered as SVG.
       */
      Svg = "Svg",
    }
  }

  export namespace statusindicator {
    /**
     * The direction of animation.
     *
     *
     * The direction types `Up`, `Down`, `Left`, and `Right` are available when {@link sap.suite.ui.commons.statusindicator.FillingType }
     * is set to `Linear`.
     *  The direction types `Clockwise` and `Counterclockwise` are available when {@link sap.suite.ui.commons.statusindicator.FillingType }
     * is set to `Circular`.
     */
    enum FillingDirectionType {
      /**
       * Clockwise.
       */
      Clockwise = "Clockwise",
      /**
       * Counterclockwise.
       */
      CounterClockwise = "CounterClockwise",
      /**
       * From top to bottom.
       */
      Down = "Down",
      /**
       * From right to left.
       */
      Left = "Left",
      /**
       * From left to right.
       */
      Right = "Right",
      /**
       * From bottom upwards.
       */
      Up = "Up",
    }
    /**
     * The type of filling.
     */
    enum FillingType {
      /**
       * Clockwise or counterclockwise circular filling is applied.
       *
       *  For details, see {@link sap.suite.ui.commons.statusindicator.FillingDirectionType}.
       */
      Circular = "Circular",
      /**
       * The shape is filled with a linear gradient.
       */
      Linear = "Linear",
      /**
       * No filling is applied.
       */
      None = "None",
    }
    /**
     * The horizontal alignment of the status indicator within its parent container.
     */
    enum HorizontalAlignmentType {
      /**
       * Left.
       */
      Left = "Left",
      /**
       * Middle.
       */
      Middle = "Middle",
      /**
       * Right.
       */
      Right = "Right",
    }
    /**
     * Position of the label, relative to the status indicator.
     */
    enum LabelPositionType {
      /**
       * Bottom.
       */
      Bottom = "Bottom",
      /**
       * Left
       */
      Left = "Left",
      /**
       * Right.
       */
      Right = "Right",
      /**
       * Top.
       */
      Top = "Top",
    }
    /**
     * Predefined sizes of the status indicator.
     */
    enum SizeType {
      /**
       * Extra large status indicator.
       */
      ExtraLarge = "ExtraLarge",
      /**
       * Large status indicator.
       */
      Large = "Large",
      /**
       * Medium status indicator.
       */
      Medium = "Medium",
      /**
       * No size settings are applied.
       */
      None = "None",
      /**
       * Small status indicator.
       */
      Small = "Small",
    }
    /**
     * The vertical alignment of the status indicator within its parent container.
     */
    enum VerticalAlignmentType {
      /**
       * Bottom.
       */
      Bottom = "Bottom",
      /**
       * Middle.
       */
      Middle = "Middle",
      /**
       * Top.
       */
      Top = "Top",
    }
  }

  export namespace taccount {
    /**
     * The state of the {@link sap.suite.ui.commons.taccount.TAccountPanel} that defines how T accounts included
     * in the panel are displayed.
     */
    enum TAccountPanelState {
      /**
       * The T account panel displays T accounts as T shapes with debit and credit entries on either side of the
       * T.
       */
      Default = "Default",
      /**
       * The T account panel displays T accounts as an aggregated table, with each debit and credit entry listed
       * on a separate row.
       */
      Table = "Table",
    }
  }
}

declare module "sap/suite/ui/commons/AriaProperties" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import RenderManager from "sap/ui/core/RenderManager";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.65.0
   *
   * `AriaProperties` provides ARIA-compliant properties for screen reader software that can be added to any
   * control renderer.
   */
  class AriaProperties extends UI5Element {
    /**
     * Constructor for a new AriaProperties.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.AriaProperties with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AriaProperties>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.AriaProperties.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds the provided ARIA-compliant properties to a control.
     */
    static writeAriaProperties(
      /**
       * The RenderManager that can be used for writing to the render output buffer
       */
      oRm: RenderManager,
      /**
       * Default ARIA-compliant properties of the control
       */
      oDefaultProperties: object,
      /**
       * ARIA-compliant properties from data binding
       */
      oAriaProperties: AriaProperties
    ): void;
    /**
     * Gets current value of property {@link #getDescribedBy describedBy}.
     *
     * Identifies one or more elements that describe the object. See the related `labelledBy` property.
     *
     * @returns Value of property `describedBy`
     */
    getDescribedBy(): string;
    /**
     * Gets current value of property {@link #getHasPopup hasPopup}.
     *
     * Indicates that the element has a popup context menu or a submenu.
     *
     * @returns Value of property `hasPopup`
     */
    getHasPopup(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Defines a string value that labels the current element. See the related `labelledBy` property.
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets current value of property {@link #getLabelledBy labelledBy}.
     *
     * Identifies one or more elements that label the current element. See the related `label` and `describedBy`
     * properties.
     *
     * @returns Value of property `labelledBy`
     */
    getLabelledBy(): string;
    /**
     * Gets current value of property {@link #getRole role}.
     *
     * Identifies the element role.
     *
     * @returns Value of property `role`
     */
    getRole(): string;
    /**
     * Sets a new value for property {@link #getDescribedBy describedBy}.
     *
     * Identifies one or more elements that describe the object. See the related `labelledBy` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescribedBy(
      /**
       * New value for property `describedBy`
       */
      sDescribedBy?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHasPopup hasPopup}.
     *
     * Indicates that the element has a popup context menu or a submenu.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHasPopup(
      /**
       * New value for property `hasPopup`
       */
      sHasPopup?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Defines a string value that labels the current element. See the related `labelledBy` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabelledBy labelledBy}.
     *
     * Identifies one or more elements that label the current element. See the related `label` and `describedBy`
     * properties.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabelledBy(
      /**
       * New value for property `labelledBy`
       */
      sLabelledBy?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRole role}.
     *
     * Identifies the element role.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRole(
      /**
       * New value for property `role`
       */
      sRole?: string
    ): this;
  }
  export default AriaProperties;

  export interface $AriaPropertiesSettings extends $ElementSettings {
    /**
     * Defines a string value that labels the current element. See the related `labelledBy` property.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Identifies one or more elements that label the current element. See the related `label` and `describedBy`
     * properties.
     */
    labelledBy?: string | PropertyBindingInfo;

    /**
     * Identifies one or more elements that describe the object. See the related `labelledBy` property.
     */
    describedBy?: string | PropertyBindingInfo;

    /**
     * Identifies the element role.
     */
    role?: string | PropertyBindingInfo;

    /**
     * Indicates that the element has a popup context menu or a submenu.
     */
    hasPopup?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/BulletChart" {
  import {
    default as BulletMicroChart,
    $BulletMicroChartSettings,
  } from "sap/suite/ui/microchart/BulletMicroChart";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.BulletMicroChart.
   *
   * Chart that displays an actual value as a horizontal bar in semantic color on the top of the background
   * bar, the numeric value, the scaling factor, along with the thresholds, and a target value as vertical
   * bars.
   */
  class BulletChart extends BulletMicroChart {
    /**
     * Constructor for a new BulletChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.BulletMicroChart#constructor sap.suite.ui.microchart.BulletMicroChart }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $BulletChartSettings
    );
    /**
     * Constructor for a new BulletChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.BulletMicroChart#constructor sap.suite.ui.microchart.BulletMicroChart }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $BulletChartSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.BulletChart with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.BulletMicroChart.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BulletChart>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.BulletChart.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default BulletChart;

  export interface $BulletChartSettings extends $BulletMicroChartSettings {}
}

declare module "sap/suite/ui/commons/BulletChartData" {
  import {
    default as BulletMicroChartData,
    $BulletMicroChartDataSettings,
  } from "sap/suite/ui/microchart/BulletMicroChartData";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.BulletMicroChartData.
   *
   * Thresholds data holder.
   */
  class BulletChartData extends BulletMicroChartData {
    /**
     * Constructor for a new BulletChartData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.BulletMicroChartData#constructor sap.suite.ui.microchart.BulletMicroChartData }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $BulletChartDataSettings
    );
    /**
     * Constructor for a new BulletChartData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.BulletMicroChartData#constructor sap.suite.ui.microchart.BulletMicroChartData }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $BulletChartDataSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.BulletChartData with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.BulletMicroChartData.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BulletChartData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.BulletChartData.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default BulletChartData;

  export interface $BulletChartDataSettings
    extends $BulletMicroChartDataSettings {}
}

declare module "sap/suite/ui/commons/BusinessCard" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
   *
   * This control allows you to display business card information including an image, first title (either
   * URL link or text), second title, and multiple text lines.
   */
  class BusinessCard extends Control {
    /**
     * Constructor for a new BusinessCard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $BusinessCardSettings
    );
    /**
     * Constructor for a new BusinessCard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $BusinessCardSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.BusinessCard with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BusinessCard>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.BusinessCard.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Destroys the firstTitle in the aggregation {@link #getFirstTitle firstTitle}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFirstTitle(): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of the BusinessCard body must be provided by the application developer.
     */
    getContent(): Control;
    /**
     * Gets content of aggregation {@link #getFirstTitle firstTitle}.
     *
     * Any control that can display a title. Content of this control appears at the first position in BusinessCard.
     * Recomended controls: sap.ui.commons.Label and sap.ui.commons.Link.
     */
    getFirstTitle(): Control;
    /**
     * Gets current value of property {@link #getIconPath iconPath}.
     *
     * A path to the BusinessCard icon.
     *
     * @returns Value of property `iconPath`
     */
    getIconPath(): URI;
    /**
     * Gets current value of property {@link #getImageTooltip imageTooltip}.
     *
     * A tooltip that is set for an image.
     *
     * @returns Value of property `imageTooltip`
     */
    getImageTooltip(): string;
    /**
     * Gets current value of property {@link #getSecondTitle secondTitle}.
     *
     * A short text line that describes this BusinessCard.
     *
     * @returns Value of property `secondTitle`
     */
    getSecondTitle(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Title of the BusinessCard that describes its type.
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets the aggregated {@link #getFirstTitle firstTitle}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFirstTitle(
      /**
       * The firstTitle to set
       */
      oFirstTitle: Control
    ): this;
    /**
     * Sets a new value for property {@link #getIconPath iconPath}.
     *
     * A path to the BusinessCard icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconPath(
      /**
       * New value for property `iconPath`
       */
      sIconPath?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getImageTooltip imageTooltip}.
     *
     * A tooltip that is set for an image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImageTooltip(
      /**
       * New value for property `imageTooltip`
       */
      sImageTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSecondTitle secondTitle}.
     *
     * A short text line that describes this BusinessCard.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSecondTitle(
      /**
       * New value for property `secondTitle`
       */
      sSecondTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Title of the BusinessCard that describes its type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  export default BusinessCard;

  export interface $BusinessCardSettings extends $ControlSettings {
    /**
     * Title of the BusinessCard that describes its type.
     */
    type?: string | PropertyBindingInfo;

    /**
     * A path to the BusinessCard icon.
     */
    iconPath?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * A short text line that describes this BusinessCard.
     */
    secondTitle?: string | PropertyBindingInfo;

    /**
     * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * A tooltip that is set for an image.
     */
    imageTooltip?: string | PropertyBindingInfo;

    /**
     * The content of the BusinessCard body must be provided by the application developer.
     */
    content?: Control;

    /**
     * Any control that can display a title. Content of this control appears at the first position in BusinessCard.
     * Recomended controls: sap.ui.commons.Label and sap.ui.commons.Link.
     */
    firstTitle?: Control;
  }
}

declare module "sap/suite/ui/commons/CalculationBuilder" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import CalculationBuilderFunction from "sap/suite/ui/commons/CalculationBuilderFunction";

  import CalculationBuilderGroup from "sap/suite/ui/commons/CalculationBuilderGroup";

  import CalculationBuilderItem from "sap/suite/ui/commons/CalculationBuilderItem";

  import Item from "sap/ui/core/Item";

  import CalculationBuilderVariable from "sap/suite/ui/commons/CalculationBuilderVariable";

  import {
    CalculationBuilderFunctionType,
    CalculationBuilderValidationMode,
  } from "sap/suite/ui/commons/library";

  import Event from "sap/ui/base/Event";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import CalculationBuilderValidationResult from "sap/suite/ui/commons/CalculationBuilderValidationResult";

  /**
   * @SINCE 1.56.0
   *
   * Calculation Builder allows you to perform arithmetic calculations on literals and variables using standard
   * arithmetic operators as well as most common logical operators and functions.
   *  You can customize the sets of variables and functions that are visible in the calculation builder and
   * introduce your own custom functions, as needed.
   *  Arithmetic expressions can be entered using a touch-friendly visual editor or a textual editor that
   * provides autocomplete suggestions for variables and checks the expression syntax as you type.
   */
  class CalculationBuilder extends Control {
    /**
     * Constructor for a new calculation builder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link https://ui5.sap.com/#/topic/1db504725155424a8dc9fabd4147dd28 Calculation Builder}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalculationBuilderSettings
    );
    /**
     * Constructor for a new calculation builder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link https://ui5.sap.com/#/topic/1db504725155424a8dc9fabd4147dd28 Calculation Builder}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalculationBuilderSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilder with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CalculationBuilder>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilder.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some Function to the aggregation {@link #getFunctions functions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFunction(
      /**
       * The Function to add; if empty, nothing is inserted
       */
      oFunction: CalculationBuilderFunction
    ): this;
    /**
     * Adds some Group to the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addGroup(
      /**
       * The Group to add; if empty, nothing is inserted
       */
      oGroup: CalculationBuilderGroup
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: CalculationBuilderItem
    ): this;
    /**
     * Adds some Operator to the aggregation {@link #getOperators operators}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addOperator(
      /**
       * The Operator to add; if empty, nothing is inserted
       */
      oOperator: Item
    ): this;
    /**
     * Adds some Variable to the aggregation {@link #getVariables variables}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addVariable(
      /**
       * The Variable to add; if empty, nothing is inserted
       */
      oVariable: CalculationBuilderVariable
    ): this;
    /**
     * Checks if the function is visible to the user.
     */
    allowFunction(
      /**
       * Name of the function
       */
      sFunction: CalculationBuilderFunctionType,
      /**
       * True if the function should be visible to the user
       */
      bAllow: boolean
    ): void;
    /**
     * Records a new error detected in the expression.
     */
    appendError(
      /**
       * Error object with contains following properties:
       */
      oError: {
        /**
         * Index of the item that contains errors
         */
        index?: object;
        /**
         * Title of the error
         */
        title?: number;
      }
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterValidation afterValidation} event of this
     * `sap.suite.ui.commons.CalculationBuilder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
     *
     * This event is fired after the expression is validated.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterValidation(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterValidation afterValidation} event of this
     * `sap.suite.ui.commons.CalculationBuilder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
     *
     * This event is fired after the expression is validated.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterValidation(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.CalculationBuilder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
     *
     * This event is fired when the order of items changes, or when some items are added or removed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.CalculationBuilder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
     *
     * This event is fired when the order of items changes, or when some items are added or removed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validateFunction validateFunction} event of
     * this `sap.suite.ui.commons.CalculationBuilder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
     *
     * This event is fired for each custom function included in the expression.
     *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction} and validated
     * using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidateFunction(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$CalculationBuilderValidateFunctionEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validateFunction validateFunction} event of
     * this `sap.suite.ui.commons.CalculationBuilder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
     *
     * This event is fired for each custom function included in the expression.
     *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction} and validated
     * using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidateFunction(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$CalculationBuilderValidateFunctionEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the functions in the aggregation {@link #getFunctions functions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFunctions(): this;
    /**
     * Destroys all the groups in the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGroups(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyItems(): this;
    /**
     * Destroys all the operators in the aggregation {@link #getOperators operators}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyOperators(): this;
    /**
     * Destroys all the variables in the aggregation {@link #getVariables variables}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyVariables(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterValidation afterValidation} event of
     * this `sap.suite.ui.commons.CalculationBuilder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterValidation(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.CalculationBuilder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:validateFunction validateFunction} event of
     * this `sap.suite.ui.commons.CalculationBuilder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachValidateFunction(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$CalculationBuilderValidateFunctionEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterValidation afterValidation} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterValidation(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:change change} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:validateFunction validateFunction} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireValidateFunction(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $CalculationBuilderValidateFunctionEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getAllowComparisonOperators allowComparisonOperators}.
     *
     * Defines whether comparison operators (<, >, <=, >=, =, !=) are allowed.
     *
     * Default value is `true`.
     *
     * @returns Value of property `allowComparisonOperators`
     */
    getAllowComparisonOperators(): boolean;
    /**
     * Gets current value of property {@link #getAllowLogicalOperators allowLogicalOperators}.
     *
     * Defines whether logical operators (AND, OR, XOR, NOT) are allowed.
     *
     * Default value is `true`.
     *
     * @returns Value of property `allowLogicalOperators`
     */
    getAllowLogicalOperators(): boolean;
    /**
     * @deprecated (since 1.77.0) - replaced by {@link sap.suite.ui.commons.CalculationBuilder#getAllowStringLiterals}.
     *
     * Gets the current value of property `allowStringConstants`.
     *
     * @returns Value of property `allowStringConstants`
     */
    getAllowStringConstants(): boolean;
    /**
     * @SINCE 1.77.0
     *
     * Gets current value of property {@link #getAllowStringLiterals allowStringLiterals}.
     *
     * Defines whether string literals are allowed.
     *  If set to `true`, the calculation builder doesn't validate strings as errors.
     *  Number literals are also allowed regardless of this setting.
     *
     * Default value is `false`.
     *
     * @returns Value of property `allowStringLiterals`
     */
    getAllowStringLiterals(): boolean;
    /**
     * Gets current value of property {@link #getAllowSuggestions allowSuggestions}.
     *
     * Defines whether autocomplete suggestions are shown when you type. Available only for desktop devices.
     *
     * Default value is `true`.
     *
     * @returns Value of property `allowSuggestions`
     */
    getAllowSuggestions(): boolean;
    /**
     * Gets current value of property {@link #getDisabledDefaultTokens disabledDefaultTokens}.
     *
     * Default operators or functions that are disabled. Delimiter for multiple items is ';'.
     *  Example of usage: +;-;sqrt
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `disabledDefaultTokens`
     */
    getDisabledDefaultTokens(): string;
    /**
     * Returns syntax errors.
     */
    getErrors(): void;
    /**
     * Gets current value of property {@link #getExpression expression}.
     *
     * Holds the arithmetic expression.
     *  Use either this property or aggregation `Items`. Not both.
     *
     * @returns Value of property `expression`
     */
    getExpression(): string;
    /**
     * Gets content of aggregation {@link #getFunctions functions}.
     *
     * Holds the custom functions that can be used in the calculation builder.
     */
    getFunctions(): CalculationBuilderFunction[];
    /**
     * Gets content of aggregation {@link #getGroups groups}.
     *
     * Defines groups of variables.
     *  Variables can be organized into multiple groups for better orientation among different types of variables.
     */
    getGroups(): CalculationBuilderGroup[];
    /**
     * Returns the input toolbar of the calculation builder.
     *
     * @returns Input toolbar
     */
    getInputToolbar(): Object;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Holds the items (operators and operands) to be displayed in the calculation builder.
     */
    getItems(): CalculationBuilderItem[];
    /**
     * Gets current value of property {@link #getLayoutType layoutType}.
     *
     * Defines the layout type used for the calculation builder.
     *  The layout may include a visual editor, a text editor, or both. In addition, you can set the text editor
     * to be read-only.
     *
     * Default value is `"Default"`.
     *
     * @returns Value of property `layoutType`
     */
    getLayoutType(): string;
    /**
     * Gets content of aggregation {@link #getOperators operators}.
     *
     * Holds additional operators defined by the application.
     * These operators are not validated.
     */
    getOperators(): Item[];
    /**
     * Gets current value of property {@link #getReadOnly readOnly}.
     *
     * Defines whether the control is read-only.
     *
     * Default value is `false`.
     *
     * @returns Value of property `readOnly`
     */
    getReadOnly(): boolean;
    /**
     * Gets current value of property {@link #getShowInputToolbar showInputToolbar}.
     *
     * Defines whether the input toolbar is visible.
     *  The input toolbar contains operators and functions that can be used in the expression.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showInputToolbar`
     */
    getShowInputToolbar(): boolean;
    /**
     * Gets current value of property {@link #getShowToolbar showToolbar}.
     *
     * Defines whether the toolbar is visible.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showToolbar`
     */
    getShowToolbar(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the calculation builder element.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Returns the toolbar of the calculation builder.
     *
     * @returns Toolbar
     */
    getToolbar(): Object;
    /**
     * Gets current value of property {@link #getValidationMode validationMode}.
     *
     * Defines when the expression is validated.
     *
     * 	 - If set to `LiveChange`, the input is validated as you type.
     * 	 - If set to `FocusOut`, the input is validated, once you press Enter or Tab.
     *
     * Default value is `LiveChange`.
     *
     * @returns Value of property `validationMode`
     */
    getValidationMode():
      | CalculationBuilderValidationMode
      | keyof typeof CalculationBuilderValidationMode;
    /**
     * Gets content of aggregation {@link #getVariables variables}.
     *
     * Holds the variables that can be used in the calculation builder.
     */
    getVariables(): CalculationBuilderVariable[];
    /**
     * Gets current value of property {@link #getWrapItemsInExpression wrapItemsInExpression}.
     *
     * Defines whether the expression should be wrapped inside the calculation builder field.
     *  If set to `false`, the expression is rearranged into a single scrollable row.
     *
     * Default value is `true`.
     *
     * @returns Value of property `wrapItemsInExpression`
     */
    getWrapItemsInExpression(): boolean;
    /**
     * Checks for the provided `sap.suite.ui.commons.CalculationBuilderFunction` in the aggregation {@link #getFunctions functions}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFunction(
      /**
       * The Function whose index is looked for
       */
      oFunction: CalculationBuilderFunction
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.CalculationBuilderGroup` in the aggregation {@link #getGroups groups}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfGroup(
      /**
       * The Group whose index is looked for
       */
      oGroup: CalculationBuilderGroup
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.CalculationBuilderItem` in the aggregation {@link #getItems items}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: CalculationBuilderItem
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getOperators operators}. and returns
     * its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfOperator(
      /**
       * The Operator whose index is looked for
       */
      oOperator: Item
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.CalculationBuilderVariable` in the aggregation {@link #getVariables variables}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfVariable(
      /**
       * The Variable whose index is looked for
       */
      oVariable: CalculationBuilderVariable
    ): int;
    /**
     * Inserts a Function into the aggregation {@link #getFunctions functions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFunction(
      /**
       * The Function to insert; if empty, nothing is inserted
       */
      oFunction: CalculationBuilderFunction,
      /**
       * The `0`-based index the Function should be inserted at; for a negative value of `iIndex`, the Function
       * is inserted at position 0; for a value greater than the current size of the aggregation, the Function
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a Group into the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertGroup(
      /**
       * The Group to insert; if empty, nothing is inserted
       */
      oGroup: CalculationBuilderGroup,
      /**
       * The `0`-based index the Group should be inserted at; for a negative value of `iIndex`, the Group is inserted
       * at position 0; for a value greater than the current size of the aggregation, the Group is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: CalculationBuilderItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a Operator into the aggregation {@link #getOperators operators}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertOperator(
      /**
       * The Operator to insert; if empty, nothing is inserted
       */
      oOperator: Item,
      /**
       * The `0`-based index the Operator should be inserted at; for a negative value of `iIndex`, the Operator
       * is inserted at position 0; for a value greater than the current size of the aggregation, the Operator
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a Variable into the aggregation {@link #getVariables variables}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertVariable(
      /**
       * The Variable to insert; if empty, nothing is inserted
       */
      oVariable: CalculationBuilderVariable,
      /**
       * The `0`-based index the Variable should be inserted at; for a negative value of `iIndex`, the Variable
       * is inserted at position 0; for a value greater than the current size of the aggregation, the Variable
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getFunctions functions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFunctions(): CalculationBuilderFunction[];
    /**
     * Removes all the controls from the aggregation {@link #getGroups groups}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllGroups(): CalculationBuilderGroup[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllItems(): CalculationBuilderItem[];
    /**
     * Removes all the controls from the aggregation {@link #getOperators operators}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllOperators(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getVariables variables}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllVariables(): CalculationBuilderVariable[];
    /**
     * Removes a Function from the aggregation {@link #getFunctions functions}.
     *
     * @returns The removed Function or `null`
     */
    removeFunction(
      /**
       * The Function to remove or its index or id
       */
      vFunction: int | string | CalculationBuilderFunction
    ): CalculationBuilderFunction | null;
    /**
     * Removes a Group from the aggregation {@link #getGroups groups}.
     *
     * @returns The removed Group or `null`
     */
    removeGroup(
      /**
       * The Group to remove or its index or id
       */
      vGroup: int | string | CalculationBuilderGroup
    ): CalculationBuilderGroup | null;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     *
     * @returns The removed item or `null`
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | CalculationBuilderItem
    ): CalculationBuilderItem | null;
    /**
     * Removes a Operator from the aggregation {@link #getOperators operators}.
     *
     * @returns The removed Operator or `null`
     */
    removeOperator(
      /**
       * The Operator to remove or its index or id
       */
      vOperator: int | string | Item
    ): Item | null;
    /**
     * Removes a Variable from the aggregation {@link #getVariables variables}.
     *
     * @returns The removed Variable or `null`
     */
    removeVariable(
      /**
       * The Variable to remove or its index or id
       */
      vVariable: int | string | CalculationBuilderVariable
    ): CalculationBuilderVariable | null;
    /**
     * Sets a new value for property {@link #getAllowComparisonOperators allowComparisonOperators}.
     *
     * Defines whether comparison operators (<, >, <=, >=, =, !=) are allowed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAllowComparisonOperators(
      /**
       * New value for property `allowComparisonOperators`
       */
      bAllowComparisonOperators?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getAllowLogicalOperators allowLogicalOperators}.
     *
     * Defines whether logical operators (AND, OR, XOR, NOT) are allowed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAllowLogicalOperators(
      /**
       * New value for property `allowLogicalOperators`
       */
      bAllowLogicalOperators?: boolean
    ): this;
    /**
     * @deprecated (since 1.77.0) - replaced by {@link sap.suite.ui.commons.CalculationBuilder#setAllowStringLiterals}.
     *
     * Sets a new value for property `allowStringConstants`.
     *
     * @returns Reference to `this` to allow method chaining
     */
    setAllowStringConstants(
      /**
       * New value for property `allowStringConstants`.
       */
      bAllowStringConstants: boolean
    ): CalculationBuilder;
    /**
     * @SINCE 1.77.0
     *
     * Sets a new value for property {@link #getAllowStringLiterals allowStringLiterals}.
     *
     * Defines whether string literals are allowed.
     *  If set to `true`, the calculation builder doesn't validate strings as errors.
     *  Number literals are also allowed regardless of this setting.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAllowStringLiterals(
      /**
       * New value for property `allowStringLiterals`
       */
      bAllowStringLiterals?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getAllowSuggestions allowSuggestions}.
     *
     * Defines whether autocomplete suggestions are shown when you type. Available only for desktop devices.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAllowSuggestions(
      /**
       * New value for property `allowSuggestions`
       */
      bAllowSuggestions?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDisabledDefaultTokens disabledDefaultTokens}.
     *
     * Default operators or functions that are disabled. Delimiter for multiple items is ';'.
     *  Example of usage: +;-;sqrt
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisabledDefaultTokens(
      /**
       * New value for property `disabledDefaultTokens`
       */
      sDisabledDefaultTokens?: string
    ): this;
    /**
     * Sets a new value for property {@link #getExpression expression}.
     *
     * Holds the arithmetic expression.
     *  Use either this property or aggregation `Items`. Not both.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExpression(
      /**
       * New value for property `expression`
       */
      sExpression?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLayoutType layoutType}.
     *
     * Defines the layout type used for the calculation builder.
     *  The layout may include a visual editor, a text editor, or both. In addition, you can set the text editor
     * to be read-only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Default"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLayoutType(
      /**
       * New value for property `layoutType`
       */
      sLayoutType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getReadOnly readOnly}.
     *
     * Defines whether the control is read-only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setReadOnly(
      /**
       * New value for property `readOnly`
       */
      bReadOnly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowInputToolbar showInputToolbar}.
     *
     * Defines whether the input toolbar is visible.
     *  The input toolbar contains operators and functions that can be used in the expression.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowInputToolbar(
      /**
       * New value for property `showInputToolbar`
       */
      bShowInputToolbar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowToolbar showToolbar}.
     *
     * Defines whether the toolbar is visible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowToolbar(
      /**
       * New value for property `showToolbar`
       */
      bShowToolbar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the calculation builder element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValidationMode validationMode}.
     *
     * Defines when the expression is validated.
     *
     * 	 - If set to `LiveChange`, the input is validated as you type.
     * 	 - If set to `FocusOut`, the input is validated, once you press Enter or Tab.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `LiveChange`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValidationMode(
      /**
       * New value for property `validationMode`
       */
      sValidationMode?:
        | CalculationBuilderValidationMode
        | keyof typeof CalculationBuilderValidationMode
    ): this;
    /**
     * Sets a new value for property {@link #getWrapItemsInExpression wrapItemsInExpression}.
     *
     * Defines whether the expression should be wrapped inside the calculation builder field.
     *  If set to `false`, the expression is rearranged into a single scrollable row.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWrapItemsInExpression(
      /**
       * New value for property `wrapItemsInExpression`
       */
      bWrapItemsInExpression?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    unbindItems(): this;
    /**
     * Updates the list of displayed errors
     *  You can call this method when you change errors outside default calculation builder events.
     */
    updateErrorsDisplay(): void;
    /**
     * Creates or updates the currently selected item.
     *  Call this function only when using the `customView` aggregation in the {@link sap.suite.ui.commons.CalculationBuilderGroup}.
     */
    updateOrCreateItem(
      /**
       * New key for current item (new or old)
       */
      sKey: string
    ): void;
    /**
     * Validates the current expression and displays errors.
     */
    validate(): void;
    /**
     * Checks if the expression syntax is valid.
     *
     * @returns aErrors Array of errors found.
     */
    validateParts(): any[];
  }
  export default CalculationBuilder;

  export interface $CalculationBuilderSettings extends $ControlSettings {
    /**
     * Holds the arithmetic expression.
     *  Use either this property or aggregation `Items`. Not both.
     */
    expression?: string | PropertyBindingInfo;

    /**
     * The title of the calculation builder element.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines whether the toolbar is visible.
     */
    showToolbar?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether the expression should be wrapped inside the calculation builder field.
     *  If set to `false`, the expression is rearranged into a single scrollable row.
     */
    wrapItemsInExpression?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the layout type used for the calculation builder.
     *  The layout may include a visual editor, a text editor, or both. In addition, you can set the text editor
     * to be read-only.
     */
    layoutType?: string | PropertyBindingInfo;

    /**
     * Defines whether the input toolbar is visible.
     *  The input toolbar contains operators and functions that can be used in the expression.
     */
    showInputToolbar?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether the control is read-only.
     */
    readOnly?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether comparison operators (<, >, <=, >=, =, !=) are allowed.
     */
    allowComparisonOperators?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether logical operators (AND, OR, XOR, NOT) are allowed.
     */
    allowLogicalOperators?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether autocomplete suggestions are shown when you type. Available only for desktop devices.
     */
    allowSuggestions?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.77.0) - replaced by the `allowStringLiterals` property.
     *
     * Defines whether string constants are allowed.
     *  If set to `true`, the calculation builder doesn't validate custom strings as errors.
     */
    allowStringConstants?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.77.0
     *
     * Defines whether string literals are allowed.
     *  If set to `true`, the calculation builder doesn't validate strings as errors.
     *  Number literals are also allowed regardless of this setting.
     */
    allowStringLiterals?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines when the expression is validated.
     *
     * 	 - If set to `LiveChange`, the input is validated as you type.
     * 	 - If set to `FocusOut`, the input is validated, once you press Enter or Tab.
     */
    validationMode?:
      | (
          | CalculationBuilderValidationMode
          | keyof typeof CalculationBuilderValidationMode
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Default operators or functions that are disabled. Delimiter for multiple items is ';'.
     *  Example of usage: +;-;sqrt
     */
    disabledDefaultTokens?: string | PropertyBindingInfo;

    /**
     * Holds the items (operators and operands) to be displayed in the calculation builder.
     */
    items?:
      | CalculationBuilderItem[]
      | CalculationBuilderItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Holds the variables that can be used in the calculation builder.
     */
    variables?:
      | CalculationBuilderVariable[]
      | CalculationBuilderVariable
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Holds the custom functions that can be used in the calculation builder.
     */
    functions?:
      | CalculationBuilderFunction[]
      | CalculationBuilderFunction
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Holds additional operators defined by the application.
     * These operators are not validated.
     */
    operators?: Item[] | Item | AggregationBindingInfo | `{${string}}`;

    /**
     * Defines groups of variables.
     *  Variables can be organized into multiple groups for better orientation among different types of variables.
     */
    groups?:
      | CalculationBuilderGroup[]
      | CalculationBuilderGroup
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * This event is fired for each custom function included in the expression.
     *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction} and validated
     * using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
     */
    validateFunction?: (
      oEvent: Event<$CalculationBuilderValidateFunctionEventParameters>
    ) => void;

    /**
     * This event is fired when the order of items changes, or when some items are added or removed.
     */
    change?: (oEvent: Event) => void;

    /**
     * This event is fired after the expression is validated.
     */
    afterValidation?: (oEvent: Event) => void;
  }

  export interface $CalculationBuilderAfterValidationEventParameters {}

  export interface $CalculationBuilderChangeEventParameters {}

  export interface $CalculationBuilderValidateFunctionEventParameters {
    definition?: object;

    customFunction?: object;

    result?: CalculationBuilderValidationResult;
  }
}

declare module "sap/suite/ui/commons/CalculationBuilderFunction" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import CalculationBuilderItem from "sap/suite/ui/commons/CalculationBuilderItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.56.0
   *
   * A custom function to be used in the calculation builder.
   *  The default functions available for the calculation builder are defined in {@link sap.suite.ui.commons.CalculationBuilderFunctionType}.
   */
  class CalculationBuilderFunction extends Control {
    /**
     * Constructor for a new custom function.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalculationBuilderFunctionSettings
    );
    /**
     * Constructor for a new custom function.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalculationBuilderFunctionSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderFunction with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CalculationBuilderFunction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderFunction.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: CalculationBuilderItem
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyItems(): this;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Description of the function.
     *  The description is displayed in the functions menu on the calculation builder's toolbar. If no description
     * is specified, it is generated automatically based on the `key` property and the parameters defined in
     * the `items` aggregation.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Holds the parameters that can be passed to the function.
     *  For example, if the function has two parameters, the `items` aggregation may consist of:
     * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the first argument entered
     *     by the user.
     * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with a "`,`" (comma) key for the comma that
     *     separates the arguments.
     * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the second argument entered
     *     by the user.
     */
    getItems(): CalculationBuilderItem[];
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * A key associated with the function. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Label for the function.
     *  The label is displayed in the visual editor of the calculation builder and in the functions menu on
     * the calculation builder's toolbar.
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets current value of property {@link #getUseDefaultValidation useDefaultValidation}.
     *
     * Defines whether default validation should be used.
     *  Set this property to `false` to provide your own validation algorithm using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
     *  If you do not provide your own validation algorithm for this custom function, set this property to `true`,
     * and the function will be validated by the calculation builder.
     *
     * Default value is `false`.
     *
     * @returns Value of property `useDefaultValidation`
     */
    getUseDefaultValidation(): boolean;
    /**
     * Checks for the provided `sap.suite.ui.commons.CalculationBuilderItem` in the aggregation {@link #getItems items}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: CalculationBuilderItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: CalculationBuilderItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllItems(): CalculationBuilderItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     *
     * @returns The removed item or `null`
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | CalculationBuilderItem
    ): CalculationBuilderItem | null;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Description of the function.
     *  The description is displayed in the functions menu on the calculation builder's toolbar. If no description
     * is specified, it is generated automatically based on the `key` property and the parameters defined in
     * the `items` aggregation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * A key associated with the function. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Label for the function.
     *  The label is displayed in the visual editor of the calculation builder and in the functions menu on
     * the calculation builder's toolbar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUseDefaultValidation useDefaultValidation}.
     *
     * Defines whether default validation should be used.
     *  Set this property to `false` to provide your own validation algorithm using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
     *  If you do not provide your own validation algorithm for this custom function, set this property to `true`,
     * and the function will be validated by the calculation builder.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUseDefaultValidation(
      /**
       * New value for property `useDefaultValidation`
       */
      bUseDefaultValidation?: boolean
    ): this;
  }
  export default CalculationBuilderFunction;

  export interface $CalculationBuilderFunctionSettings
    extends $ControlSettings {
    /**
     * A key associated with the function. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Label for the function.
     *  The label is displayed in the visual editor of the calculation builder and in the functions menu on
     * the calculation builder's toolbar.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Description of the function.
     *  The description is displayed in the functions menu on the calculation builder's toolbar. If no description
     * is specified, it is generated automatically based on the `key` property and the parameters defined in
     * the `items` aggregation.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines whether default validation should be used.
     *  Set this property to `false` to provide your own validation algorithm using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
     *  If you do not provide your own validation algorithm for this custom function, set this property to `true`,
     * and the function will be validated by the calculation builder.
     */
    useDefaultValidation?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Holds the parameters that can be passed to the function.
     *  For example, if the function has two parameters, the `items` aggregation may consist of:
     * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the first argument entered
     *     by the user.
     * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with a "`,`" (comma) key for the comma that
     *     separates the arguments.
     * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the second argument entered
     *     by the user.
     */
    items?:
      | CalculationBuilderItem[]
      | CalculationBuilderItem
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/CalculationBuilderGroup" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.60.0
   *
   * A variable group is used to organize the variables that the user can insert into the {@link sap.suite.ui.commons.CalculationBuilder }
   * expression.
   */
  class CalculationBuilderGroup extends Control {
    /**
     * Constructor for a new calculation builder variable group.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CalculationBuilderGroupSettings
    );
    /**
     * Constructor for a new calculation builder variable group.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CalculationBuilderGroupSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderGroup with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CalculationBuilderGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderGroup.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:setSelection setSelection} event of this `sap.suite.ui.commons.CalculationBuilderGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilderGroup` itself.
     *
     * This event is fired when the user selects the variable group.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSetSelection(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$CalculationBuilderGroupSetSelectionEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilderGroup`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:setSelection setSelection} event of this `sap.suite.ui.commons.CalculationBuilderGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilderGroup` itself.
     *
     * This event is fired when the user selects the variable group.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSetSelection(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$CalculationBuilderGroupSetSelectionEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilderGroup`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the customView in the aggregation {@link #getCustomView customView}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomView(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:setSelection setSelection} event of this `sap.suite.ui.commons.CalculationBuilderGroup`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSetSelection(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$CalculationBuilderGroupSetSelectionEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:setSelection setSelection} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSetSelection(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $CalculationBuilderGroupSetSelectionEventParameters
    ): this;
    /**
     * Gets content of aggregation {@link #getCustomView customView}.
     *
     * Holds the variables included in the variable group.
     */
    getCustomView(): Control;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Additional description for the variable group.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon for the variable group. This icon is displayed in the Variables menu.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * A key associated with the group. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Label for the group.
     *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
     * the calculation builder's toolbar.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets the aggregated {@link #getCustomView customView}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCustomView(
      /**
       * The customView to set
       */
      oCustomView: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Additional description for the variable group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon for the variable group. This icon is displayed in the Variables menu.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * A key associated with the group. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Label for the group.
     *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
     * the calculation builder's toolbar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default CalculationBuilderGroup;

  export interface $CalculationBuilderGroupSettings extends $ControlSettings {
    /**
     * A key associated with the group. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Label for the group.
     *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
     * the calculation builder's toolbar.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Additional description for the variable group.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Icon for the variable group. This icon is displayed in the Variables menu.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Holds the variables included in the variable group.
     */
    customView?: Control;

    /**
     * This event is fired when the user selects the variable group.
     */
    setSelection?: (
      oEvent: Event<$CalculationBuilderGroupSetSelectionEventParameters>
    ) => void;
  }

  export interface $CalculationBuilderGroupSetSelectionEventParameters {
    key?: string;
  }
}

declare module "sap/suite/ui/commons/CalculationBuilderItem" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import CalculationBuilderVariable from "sap/suite/ui/commons/CalculationBuilderVariable";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.56.0
   *
   * Each of the items used as building blocks to create an arithmetic expression in the calculation builder.
   */
  class CalculationBuilderItem extends Control {
    /**
     * Constructor for a new item used in the expression.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalculationBuilderItemSettings
    );
    /**
     * Constructor for a new item used in the expression.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CalculationBuilderItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderItem with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CalculationBuilderItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * A key associated with the item. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Returns the type of the item.
     *  Available item types are defined in {@link sap.suite.ui.commons.CalculationBuilderItemType}.
     *
     * @returns Type of the item
     */
    getType(): string;
    /**
     * Checks if there is a variable object related to this item.
     *
     * @returns Variable object paired with this item, if there is any.
     */
    getVariable(): CalculationBuilderVariable;
    /**
     * Checks if the item is expandable.
     *
     * @returns True if the item is expandable.
     */
    isExpandable(): boolean;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * A key associated with the item. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
  }
  export default CalculationBuilderItem;

  export interface $CalculationBuilderItemSettings extends $ControlSettings {
    /**
     * A key associated with the item. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     */
    key?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/CalculationBuilderValidationResult" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.56.0
   *
   * This can be used for creating your own validation algorithm for custom functions.
   *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction}.
   */
  class CalculationBuilderValidationResult extends ManagedObject {
    /**
     * Constructor for a new validation result.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderValidationResult with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CalculationBuilderValidationResult>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderValidationResult.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
  }
  export default CalculationBuilderValidationResult;

  export interface $CalculationBuilderValidationResultSettings
    extends $ManagedObjectSettings {}
}

declare module "sap/suite/ui/commons/CalculationBuilderVariable" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import CalculationBuilderItem from "sap/suite/ui/commons/CalculationBuilderItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.56.0
   *
   * A variable used in the expression entered into the calculation builder.
   */
  class CalculationBuilderVariable extends Control {
    /**
     * Constructor for a new variable.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CalculationBuilderVariableSettings
    );
    /**
     * Constructor for a new variable.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CalculationBuilderVariableSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderVariable with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CalculationBuilderVariable>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderVariable.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some Item to the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addItem(
      /**
       * The Item to add; if empty, nothing is inserted
       */
      oItem: CalculationBuilderItem
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyItems(): this;
    /**
     * Gets current value of property {@link #getGroup group}.
     *
     * The group where this variable belongs.
     *  To define variable groups, use {@link sap.suite.ui.commons.CalculationBuilderGroup}.
     *
     * @returns Value of property `group`
     */
    getGroup(): string;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Holds the items included in the variable.
     */
    getItems(): CalculationBuilderItem[];
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * A key associated with the variable. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Label for the variable.
     *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
     * the calculation builder's toolbar.
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Checks for the provided `sap.suite.ui.commons.CalculationBuilderItem` in the aggregation {@link #getItems items}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfItem(
      /**
       * The Item whose index is looked for
       */
      oItem: CalculationBuilderItem
    ): int;
    /**
     * Inserts a Item into the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertItem(
      /**
       * The Item to insert; if empty, nothing is inserted
       */
      oItem: CalculationBuilderItem,
      /**
       * The `0`-based index the Item should be inserted at; for a negative value of `iIndex`, the Item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the Item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllItems(): CalculationBuilderItem[];
    /**
     * Removes a Item from the aggregation {@link #getItems items}.
     *
     * @returns The removed Item or `null`
     */
    removeItem(
      /**
       * The Item to remove or its index or id
       */
      vItem: int | string | CalculationBuilderItem
    ): CalculationBuilderItem | null;
    /**
     * Sets a new value for property {@link #getGroup group}.
     *
     * The group where this variable belongs.
     *  To define variable groups, use {@link sap.suite.ui.commons.CalculationBuilderGroup}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroup(
      /**
       * New value for property `group`
       */
      sGroup: string
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * A key associated with the variable. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Label for the variable.
     *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
     * the calculation builder's toolbar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
  }
  export default CalculationBuilderVariable;

  export interface $CalculationBuilderVariableSettings
    extends $ControlSettings {
    /**
     * A key associated with the variable. This property is mandatory.
     *  The key is displayed in the text editor area of the calculation builder.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Label for the variable.
     *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
     * the calculation builder's toolbar.
     */
    label?: string | PropertyBindingInfo;

    /**
     * The group where this variable belongs.
     *  To define variable groups, use {@link sap.suite.ui.commons.CalculationBuilderGroup}.
     */
    group?: string | PropertyBindingInfo;

    /**
     * Holds the items included in the variable.
     */
    items?:
      | CalculationBuilderItem[]
      | CalculationBuilderItem
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/ChartContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ChartContainerContent from "sap/suite/ui/commons/ChartContainerContent";

  import Icon from "sap/ui/core/Icon";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import ScrollEnablement from "sap/ui/core/delegate/ScrollEnablement";

  import OverflowToolbar from "sap/m/OverflowToolbar";

  import { CSSSize } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Provides a toolbar with generic functions for tables and charts based on the VizFrame control like zoom,
   * display in fullscreen mode, toggle the legend, switch between chart types, and changes of the chart dimension.
   * The controls of the content aggregation are positioned below the toolbar. Additional functions can be
   * added to the toolbar with the customIcons aggregation.
   */
  class ChartContainer extends Control {
    /**
     * Constructor for a new ChartContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ChartContainerSettings
    );
    /**
     * Constructor for a new ChartContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ChartContainerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ChartContainer with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ChartContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ChartContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: ChartContainerContent
    ): this;
    /**
     * Adds some customIcon to the aggregation {@link #getCustomIcons customIcons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomIcon(
      /**
       * The customIcon to add; if empty, nothing is inserted
       */
      oCustomIcon: Icon
    ): this;
    /**
     * Adds some dimensionSelector to the aggregation {@link #getDimensionSelectors dimensionSelectors}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDimensionSelector(
      /**
       * The dimensionSelector to add; if empty, nothing is inserted
       */
      oDimensionSelector: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Event fired when a user changes the displayed content.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachContentChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ChartContainerContentChangeEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Event fired when a user changes the displayed content.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachContentChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ChartContainerContentChangeEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customZoomInPress customZoomInPress} event of
     * this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Custom event for zoom in.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomZoomInPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customZoomInPress customZoomInPress} event of
     * this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Custom event for zoom in.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomZoomInPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customZoomOutPress customZoomOutPress} event
     * of this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Custom event for zoom out.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomZoomOutPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customZoomOutPress customZoomOutPress} event
     * of this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Custom event for zoom out.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomZoomOutPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:personalizationPress personalizationPress} event
     * of this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Event fired when a user clicks on the personalization icon.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPersonalizationPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:personalizationPress personalizationPress} event
     * of this `sap.suite.ui.commons.ChartContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
     *
     * Event fired when a user clicks on the personalization icon.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPersonalizationPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Destroys all the customIcons in the aggregation {@link #getCustomIcons customIcons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomIcons(): this;
    /**
     * Destroys all the dimensionSelectors in the aggregation {@link #getDimensionSelectors dimensionSelectors}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDimensionSelectors(): this;
    /**
     * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyToolbar(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:contentChange contentChange} event of this
     * `sap.suite.ui.commons.ChartContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachContentChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$ChartContainerContentChangeEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:customZoomInPress customZoomInPress} event
     * of this `sap.suite.ui.commons.ChartContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCustomZoomInPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:customZoomOutPress customZoomOutPress} event
     * of this `sap.suite.ui.commons.ChartContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCustomZoomOutPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:personalizationPress personalizationPress }
     * event of this `sap.suite.ui.commons.ChartContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPersonalizationPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:contentChange contentChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireContentChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ChartContainerContentChangeEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:customZoomInPress customZoomInPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCustomZoomInPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:customZoomOutPress customZoomOutPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCustomZoomOutPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:personalizationPress personalizationPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePersonalizationPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAutoAdjustHeight autoAdjustHeight}.
     *
     * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent
     * container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine
     * height from its parent.
     *
     * Default value is `false`.
     *
     * @returns Value of property `autoAdjustHeight`
     */
    getAutoAdjustHeight(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * ChartToolBar Content aggregation. Only sap.viz.ui5.controls.VizFrame, sap.m.Table and sap.ui.table.Table
     * can be embedded. If not specified explicitly, the rendering order of the charts is determined by the
     * sequence of contents provided by the application via this aggregation. This means, per default the first
     * chart of the aggregation will be rendered within the container.
     */
    getContent(): ChartContainerContent[];
    /**
     * Gets content of aggregation {@link #getCustomIcons customIcons}.
     *
     * This aggregation contains the custom icons that should be displayed additionally on the toolbar. It is
     * not guaranteed that the same instance of the sap.ui.core.Icon control will be used within the toolbar,
     * but the toolbar will contain a sap.m.OverflowToolbarButton with an icon property equal to the src property
     * of the sap.ui.core.Icon provided in the aggregation. If a press event is triggered by the icon displayed
     * on the toolbar, then the press handler of the original sap.ui.core.Icon control is used. The instance
     * of the control, that has triggered the press event, can be accessed using the "controlReference" parameter
     * of the event object.
     */
    getCustomIcons(): Icon[];
    /**
     * Gets content of aggregation {@link #getDimensionSelectors dimensionSelectors}.
     *
     * Dimension Selects.
     */
    getDimensionSelectors(): Control[];
    /**
     * Gets current value of property {@link #getEnableScroll enableScroll}.
     *
     * If set to `true`, the Container control has its own scroll bar, with the scrolling taking place within
     * the Container control itself.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableScroll`
     */
    getEnableScroll(): boolean;
    /**
     * Gets current value of property {@link #getFullScreen fullScreen}.
     *
     * Display the chart and the toolbar in full screen or normal mode.
     *
     * Default value is `false`.
     *
     * @returns Value of property `fullScreen`
     */
    getFullScreen(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the current instance of the delegate to other controls.
     *
     * @returns The current instance of the delegate
     */
    getScrollDelegate(): ScrollEnablement;
    /**
     * Returns the currently selected content control.
     *
     * @returns The currently selected content
     */
    getSelectedContent(): Control;
    /**
     * @deprecated (since 1.32.0) - Obsolete property as sap.m.Toolbar is replaced by sap.m.OverflowToolbar.
     *
     * Gets current value of property {@link #getSelectorGroupLabel selectorGroupLabel}.
     *
     * Custom Label for Selectors Group.
     *
     * @returns Value of property `selectorGroupLabel`
     */
    getSelectorGroupLabel(): string;
    /**
     * Gets current value of property {@link #getShowFullScreen showFullScreen}.
     *
     * Set to true to display the full screen icon. Set to false to hide it.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showFullScreen`
     */
    getShowFullScreen(): boolean;
    /**
     * Gets current value of property {@link #getShowLegend showLegend}.
     *
     * Set to true to display the charts' legends. Set to false to hide them. See also showLegendButton.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showLegend`
     */
    getShowLegend(): boolean;
    /**
     * Gets current value of property {@link #getShowLegendButton showLegendButton}.
     *
     * Set to true or false to display or hide a button for controlling the visbility of the chart's legend.
     * Please be aware that setting this property to true indirectly is setting showLegend to false. If you
     * need to hide the button but to show the legend, you need to set showLegend at a later point in time (onBeforeRendering).
     * The execution order of the combined properties is not guaranteed by the control.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showLegendButton`
     */
    getShowLegendButton(): boolean;
    /**
     * Gets current value of property {@link #getShowPersonalization showPersonalization}.
     *
     * Set to true to display the personalization icon. Set to false to hide it.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showPersonalization`
     */
    getShowPersonalization(): boolean;
    /**
     * @SINCE 1.48.0
     *
     * Gets current value of property {@link #getShowSelectionDetails showSelectionDetails}.
     *
     * Set to true to display the 'Details' button that opens a popup dialog with details about the selected
     * data from the VizFrame based chart.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showSelectionDetails`
     */
    getShowSelectionDetails(): boolean;
    /**
     * Gets current value of property {@link #getShowZoom showZoom}.
     *
     * Set to true to display zoom icons. Set to false to hide them.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showZoom`
     */
    getShowZoom(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * String shown if there are no dimensions to display.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets content of aggregation {@link #getToolbar toolbar}.
     *
     * Overflow ToolBar. If an external toolbar is used, it will be integrated with the embedded toolbar via
     * a placeholder. This placeholder is mandatory, and it needs to be of type 'sap.suite.ui.commons.ChartContainerToolbarPlaceholder'.
     */
    getToolbar(): OverflowToolbar;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the Container.
     *
     * Default value is `"100%"`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.58.0
     *
     * Gets current value of property {@link #getWrapLabels wrapLabels}.
     *
     * Set to true to wrap text labels in the dialog that opens when the user clicks or taps the 'Details' button.
     *
     * Default value is `false`.
     *
     * @returns Value of property `wrapLabels`
     */
    getWrapLabels(): boolean;
    /**
     * Checks for the provided `sap.suite.ui.commons.ChartContainerContent` in the aggregation {@link #getContent content}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: ChartContainerContent
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Icon` in the aggregation {@link #getCustomIcons customIcons}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomIcon(
      /**
       * The customIcon whose index is looked for
       */
      oCustomIcon: Icon
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getDimensionSelectors dimensionSelectors}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDimensionSelector(
      /**
       * The dimensionSelector whose index is looked for
       */
      oDimensionSelector: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: ChartContainerContent,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a customIcon into the aggregation {@link #getCustomIcons customIcons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomIcon(
      /**
       * The customIcon to insert; if empty, nothing is inserted
       */
      oCustomIcon: Icon,
      /**
       * The `0`-based index the customIcon should be inserted at; for a negative value of `iIndex`, the customIcon
       * is inserted at position 0; for a value greater than the current size of the aggregation, the customIcon
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a dimensionSelector into the aggregation {@link #getDimensionSelectors dimensionSelectors}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDimensionSelector(
      /**
       * The dimensionSelector to insert; if empty, nothing is inserted
       */
      oDimensionSelector: Control,
      /**
       * The `0`-based index the dimensionSelector should be inserted at; for a negative value of `iIndex`, the
       * dimensionSelector is inserted at position 0; for a value greater than the current size of the aggregation,
       * the dimensionSelector is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllContent(): ChartContainerContent[];
    /**
     * Removes all the controls from the aggregation {@link #getCustomIcons customIcons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomIcons(): Icon[];
    /**
     * Removes all the controls from the aggregation {@link #getDimensionSelectors dimensionSelectors}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDimensionSelectors(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     *
     * @returns The removed content or `null`
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | ChartContainerContent
    ): ChartContainerContent | null;
    /**
     * Removes a customIcon from the aggregation {@link #getCustomIcons customIcons}.
     *
     * @returns The removed customIcon or `null`
     */
    removeCustomIcon(
      /**
       * The customIcon to remove or its index or id
       */
      vCustomIcon: int | string | Icon
    ): Icon | null;
    /**
     * Removes a dimensionSelector from the aggregation {@link #getDimensionSelectors dimensionSelectors}.
     *
     * @returns The removed dimensionSelector or `null`
     */
    removeDimensionSelector(
      /**
       * The dimensionSelector to remove or its index or id
       */
      vDimensionSelector: int | string | Control
    ): Control | null;
    /**
     * Sets a new value for property {@link #getAutoAdjustHeight autoAdjustHeight}.
     *
     * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent
     * container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine
     * height from its parent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAutoAdjustHeight(
      /**
       * New value for property `autoAdjustHeight`
       */
      bAutoAdjustHeight?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableScroll enableScroll}.
     *
     * If set to `true`, the Container control has its own scroll bar, with the scrolling taking place within
     * the Container control itself.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableScroll(
      /**
       * New value for property `enableScroll`
       */
      bEnableScroll?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFullScreen fullScreen}.
     *
     * Display the chart and the toolbar in full screen or normal mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFullScreen(
      /**
       * New value for property `fullScreen`
       */
      bFullScreen?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowFullScreen showFullScreen}.
     *
     * Set to true to display the full screen icon. Set to false to hide it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowFullScreen(
      /**
       * New value for property `showFullScreen`
       */
      bShowFullScreen?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowLegend showLegend}.
     *
     * Set to true to display the charts' legends. Set to false to hide them. See also showLegendButton.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowLegend(
      /**
       * New value for property `showLegend`
       */
      bShowLegend?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowLegendButton showLegendButton}.
     *
     * Set to true or false to display or hide a button for controlling the visbility of the chart's legend.
     * Please be aware that setting this property to true indirectly is setting showLegend to false. If you
     * need to hide the button but to show the legend, you need to set showLegend at a later point in time (onBeforeRendering).
     * The execution order of the combined properties is not guaranteed by the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowLegendButton(
      /**
       * New value for property `showLegendButton`
       */
      bShowLegendButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowPersonalization showPersonalization}.
     *
     * Set to true to display the personalization icon. Set to false to hide it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowPersonalization(
      /**
       * New value for property `showPersonalization`
       */
      bShowPersonalization?: boolean
    ): this;
    /**
     * @SINCE 1.48.0
     *
     * Sets a new value for property {@link #getShowSelectionDetails showSelectionDetails}.
     *
     * Set to true to display the 'Details' button that opens a popup dialog with details about the selected
     * data from the VizFrame based chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowSelectionDetails(
      /**
       * New value for property `showSelectionDetails`
       */
      bShowSelectionDetails?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowZoom showZoom}.
     *
     * Set to true to display zoom icons. Set to false to hide them.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowZoom(
      /**
       * New value for property `showZoom`
       */
      bShowZoom?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * String shown if there are no dimensions to display.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets the aggregated {@link #getToolbar toolbar}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToolbar(
      /**
       * The toolbar to set
       */
      oToolbar: OverflowToolbar
    ): this;
    /**
     * Sets the Chart Container width.
     *
     * @returns this ChartContainer reference for chaining.
     */
    setWidth(
      /**
       * Width in string format.
       */
      sValue: string
    ): ChartContainer;
    /**
     * @SINCE 1.58.0
     *
     * Sets a new value for property {@link #getWrapLabels wrapLabels}.
     *
     * Set to true to wrap text labels in the dialog that opens when the user clicks or taps the 'Details' button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWrapLabels(
      /**
       * New value for property `wrapLabels`
       */
      bWrapLabels?: boolean
    ): this;
    /**
     * Switches the currently viewed content (triggers re-rendering).
     */
    switchChart(
      /**
       * The new content (Chart or Table) to be displayed
       */
      chart: Control
    ): void;
    /**
     * Updates ChartContainer and re-renders all its contents.
     *
     * @returns Reference to this in order to allow method chaining
     */
    updateChartContainer(): ChartContainer;
  }
  export default ChartContainer;

  export interface $ChartContainerSettings extends $ControlSettings {
    /**
     * Set to true to display the personalization icon. Set to false to hide it.
     */
    showPersonalization?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set to true to display the full screen icon. Set to false to hide it.
     */
    showFullScreen?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Display the chart and the toolbar in full screen or normal mode.
     */
    fullScreen?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set to true to display the charts' legends. Set to false to hide them. See also showLegendButton.
     */
    showLegend?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * String shown if there are no dimensions to display.
     */
    title?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.32.0) - Obsolete property as sap.m.Toolbar is replaced by sap.m.OverflowToolbar.
     *
     * Custom Label for Selectors Group.
     */
    selectorGroupLabel?: string | PropertyBindingInfo;

    /**
     * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent
     * container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine
     * height from its parent.
     */
    autoAdjustHeight?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set to true to display zoom icons. Set to false to hide them.
     */
    showZoom?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set to true or false to display or hide a button for controlling the visbility of the chart's legend.
     * Please be aware that setting this property to true indirectly is setting showLegend to false. If you
     * need to hide the button but to show the legend, you need to set showLegend at a later point in time (onBeforeRendering).
     * The execution order of the combined properties is not guaranteed by the control.
     */
    showLegendButton?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.48.0
     *
     * Set to true to display the 'Details' button that opens a popup dialog with details about the selected
     * data from the VizFrame based chart.
     */
    showSelectionDetails?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.58.0
     *
     * Set to true to wrap text labels in the dialog that opens when the user clicks or taps the 'Details' button.
     */
    wrapLabels?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to `true`, the Container control has its own scroll bar, with the scrolling taking place within
     * the Container control itself.
     */
    enableScroll?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the width of the Container.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Dimension Selects.
     */
    dimensionSelectors?:
      | Control[]
      | Control
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * ChartToolBar Content aggregation. Only sap.viz.ui5.controls.VizFrame, sap.m.Table and sap.ui.table.Table
     * can be embedded. If not specified explicitly, the rendering order of the charts is determined by the
     * sequence of contents provided by the application via this aggregation. This means, per default the first
     * chart of the aggregation will be rendered within the container.
     */
    content?:
      | ChartContainerContent[]
      | ChartContainerContent
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Overflow ToolBar. If an external toolbar is used, it will be integrated with the embedded toolbar via
     * a placeholder. This placeholder is mandatory, and it needs to be of type 'sap.suite.ui.commons.ChartContainerToolbarPlaceholder'.
     */
    toolbar?: OverflowToolbar;

    /**
     * This aggregation contains the custom icons that should be displayed additionally on the toolbar. It is
     * not guaranteed that the same instance of the sap.ui.core.Icon control will be used within the toolbar,
     * but the toolbar will contain a sap.m.OverflowToolbarButton with an icon property equal to the src property
     * of the sap.ui.core.Icon provided in the aggregation. If a press event is triggered by the icon displayed
     * on the toolbar, then the press handler of the original sap.ui.core.Icon control is used. The instance
     * of the control, that has triggered the press event, can be accessed using the "controlReference" parameter
     * of the event object.
     */
    customIcons?: Icon[] | Icon | AggregationBindingInfo | `{${string}}`;

    /**
     * Event fired when a user clicks on the personalization icon.
     */
    personalizationPress?: (oEvent: Event) => void;

    /**
     * Event fired when a user changes the displayed content.
     */
    contentChange?: (
      oEvent: Event<$ChartContainerContentChangeEventParameters>
    ) => void;

    /**
     * Custom event for zoom in.
     */
    customZoomInPress?: (oEvent: Event) => void;

    /**
     * Custom event for zoom out.
     */
    customZoomOutPress?: (oEvent: Event) => void;
  }

  export interface $ChartContainerContentChangeEventParameters {
    /**
     * Id of the selected item.
     */
    selectedItemId?: string;
  }

  export interface $ChartContainerCustomZoomInPressEventParameters {}

  export interface $ChartContainerCustomZoomOutPressEventParameters {}

  export interface $ChartContainerPersonalizationPressEventParameters {}
}

declare module "sap/suite/ui/commons/ChartContainerContent" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import SelectionDetailsFacade from "sap/m/SelectionDetailsFacade";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Content aggregation for ChartContainer.
   */
  class ChartContainerContent extends Control {
    /**
     * Constructor for a new ChartContainerContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ChartContainerContentSettings
    );
    /**
     * Constructor for a new ChartContainerContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ChartContainerContentSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ChartContainerContent with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ChartContainerContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ChartContainerContent.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Chart or Table as content of the ChartToolBar. Supported Types: sap.viz.ui5.controls.VizFrame, sap.m.Table,
     * sap.ui.table.Table
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon of the Chart.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * @SINCE 1.48
     *
     * Getter for the Selection Details facade.
     *
     * @returns The reduced Selection Details facade for outer framework usages.
     */
    getSelectionDetails(): SelectionDetailsFacade;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title of the Chart/Table
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon of the Chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title of the Chart/Table
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default ChartContainerContent;

  export interface $ChartContainerContentSettings extends $ControlSettings {
    /**
     * Icon of the Chart.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Title of the Chart/Table
     */
    title?: string | PropertyBindingInfo;

    /**
     * Chart or Table as content of the ChartToolBar. Supported Types: sap.viz.ui5.controls.VizFrame, sap.m.Table,
     * sap.ui.table.Table
     */
    content?: Control;
  }
}

declare module "sap/suite/ui/commons/ChartContainerToolbarPlaceholder" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Provides a placeholder for the embedded chart container toolbar.
   */
  class ChartContainerToolbarPlaceholder extends Control {
    /**
     * Constructor for a new ChartContainerToolbarPlaceholder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ChartContainerToolbarPlaceholderSettings
    );
    /**
     * Constructor for a new ChartContainerToolbarPlaceholder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ChartContainerToolbarPlaceholderSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ChartContainerToolbarPlaceholder with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ChartContainerToolbarPlaceholder>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ChartContainerToolbarPlaceholder.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default ChartContainerToolbarPlaceholder;

  export interface $ChartContainerToolbarPlaceholderSettings
    extends $ControlSettings {}
}

declare module "sap/suite/ui/commons/ChartTile" {
  import {
    default as InfoTile,
    $InfoTileSettings,
  } from "sap/suite/ui/commons/InfoTile";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
   *
   * This control is the implementation of the InfoTile to show a comparison or bullet chart.
   */
  class ChartTile extends InfoTile {
    /**
     * Constructor for a new ChartTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ChartTileSettings
    );
    /**
     * Constructor for a new ChartTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ChartTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ChartTile with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.InfoTile.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ChartTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ChartTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     *
     * @returns Value of property `unit`
     */
    getUnit(): string;
    /**
     * Sets a new value for property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUnit(
      /**
       * New value for property `unit`
       */
      sUnit?: string
    ): this;
  }
  export default ChartTile;

  export interface $ChartTileSettings extends $InfoTileSettings {
    /**
     * The percent sign, the currency symbol, or the unit of measure.
     */
    unit?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/CloudFilePicker" {
  import { default as Dialog, $DialogSettings } from "sap/m/Dialog";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { URI } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.101
   * @EXPERIMENTAL
   */
  class CloudFilePicker extends Dialog {
    /**
     * Constructor of the CloudFilePicker
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.CloudFilePicker with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CloudFilePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.CloudFilePicker.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.CloudFilePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CloudFilePicker` itself.
     *
     * Event is fired when the cancel button is pressed
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CloudFilePicker`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.CloudFilePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CloudFilePicker` itself.
     *
     * Event is fired when the cancel button is pressed
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CloudFilePicker`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.CloudFilePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CloudFilePicker` itself.
     *
     * Event is fired when the selection is made
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$CloudFilePickerSelectEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CloudFilePicker`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.CloudFilePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.CloudFilePicker` itself.
     *
     * Event is fired when the selection is made
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$CloudFilePickerSelectEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CloudFilePicker`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.CloudFilePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.suite.ui.commons.CloudFilePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$CloudFilePickerSelectEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:cancel cancel} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:select select} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $CloudFilePickerSelectEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getConfirmButtonText confirmButtonText}.
     *
     * Overwrites the default text for the confirmation button.
     *
     * Default value is `...see text or source`.
     *
     * @returns Value of property `confirmButtonText`
     */
    getConfirmButtonText(): string;
    /**
     * Gets current value of property {@link #getDuplicateMessage duplicateMessage}.
     *
     * Overwrites the default text for the duplicate message popup. It is relevant only if "enableDuplicateCheck"
     * is set to true.
     *
     * @returns Value of property `duplicateMessage`
     */
    getDuplicateMessage(): string;
    /**
     * Gets current value of property {@link #getEnableDuplicateCheck enableDuplicateCheck}.
     *
     * Specifies whether duplicate file check logic is needed.
     *
     * Default value is `false`.
     *
     * @returns Value of property `enableDuplicateCheck`
     */
    getEnableDuplicateCheck(): boolean;
    /**
     * Gets current value of property {@link #getFileNameMandatory fileNameMandatory}.
     *
     * Specifies whether file name is mandatory to perform confirmation action
     *
     * Default value is `false`.
     *
     * @returns Value of property `fileNameMandatory`
     */
    getFileNameMandatory(): boolean;
    /**
     * Gets current value of property {@link #getFilePickerMode filePickerMode}.
     *
     * Allow the type of resources that can be selected.
     *
     * Default value is `"All"`.
     *
     * @returns Value of property `filePickerMode`
     */
    getFilePickerMode(): /* was: sap.suite.ui.commons.FilePickerModes */ any;
    /**
     * Gets current value of property {@link #getServiceUrl serviceUrl}.
     *
     * Url of the FileShare OData V4 service.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `serviceUrl`
     */
    getServiceUrl(): URI;
    /**
     * Gets current value of property {@link #getSharedModel sharedModel}.
     *
     * Model shared from export as dialog
     *
     * @returns Value of property `sharedModel`
     */
    getSharedModel(): object;
    /**
     * Gets current value of property {@link #getSuggestedFileName suggestedFileName}.
     *
     * File name could be provided in case File picker control is used for Export/Save As scenario for selecting
     * the location. Value will be displayed in the File Name control on the dialog.
     *
     * @returns Value of property `suggestedFileName`
     */
    getSuggestedFileName(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Specifies the text for selectButton.
     *
     * Default value is `...see text or source`.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getConfirmButtonText confirmButtonText}.
     *
     * Overwrites the default text for the confirmation button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `...see text or source`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setConfirmButtonText(
      /**
       * New value for property `confirmButtonText`
       */
      sConfirmButtonText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDuplicateMessage duplicateMessage}.
     *
     * Overwrites the default text for the duplicate message popup. It is relevant only if "enableDuplicateCheck"
     * is set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDuplicateMessage(
      /**
       * New value for property `duplicateMessage`
       */
      sDuplicateMessage: string
    ): this;
    /**
     * Sets a new value for property {@link #getEnableDuplicateCheck enableDuplicateCheck}.
     *
     * Specifies whether duplicate file check logic is needed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableDuplicateCheck(
      /**
       * New value for property `enableDuplicateCheck`
       */
      bEnableDuplicateCheck?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFileNameMandatory fileNameMandatory}.
     *
     * Specifies whether file name is mandatory to perform confirmation action
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFileNameMandatory(
      /**
       * New value for property `fileNameMandatory`
       */
      bFileNameMandatory?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFilePickerMode filePickerMode}.
     *
     * Allow the type of resources that can be selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"All"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFilePickerMode(
      /**
       * New value for property `filePickerMode`
       */
      sFilePickerMode?: /* was: sap.suite.ui.commons.FilePickerModes */ any
    ): this;
    /**
     * Sets a new value for property {@link #getServiceUrl serviceUrl}.
     *
     * Url of the FileShare OData V4 service.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setServiceUrl(
      /**
       * New value for property `serviceUrl`
       */
      sServiceUrl?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getSharedModel sharedModel}.
     *
     * Model shared from export as dialog
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSharedModel(
      /**
       * New value for property `sharedModel`
       */
      oSharedModel?: object
    ): this;
    /**
     * Sets a new value for property {@link #getSuggestedFileName suggestedFileName}.
     *
     * File name could be provided in case File picker control is used for Export/Save As scenario for selecting
     * the location. Value will be displayed in the File Name control on the dialog.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSuggestedFileName(
      /**
       * New value for property `suggestedFileName`
       */
      sSuggestedFileName: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Specifies the text for selectButton.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `...see text or source`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default CloudFilePicker;

  export interface $CloudFilePickerSettings extends $DialogSettings {
    /**
     * Url of the FileShare OData V4 service.
     */
    serviceUrl?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Model shared from export as dialog
     */
    sharedModel?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Overwrites the default text for the confirmation button.
     */
    confirmButtonText?: string | PropertyBindingInfo;

    /**
     * Allow the type of resources that can be selected.
     */
    filePickerMode?: /* was: sap.suite.ui.commons.FilePickerModes */
      | any
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Specifies the text for selectButton.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Specifies whether duplicate file check logic is needed.
     */
    enableDuplicateCheck?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Overwrites the default text for the duplicate message popup. It is relevant only if "enableDuplicateCheck"
     * is set to true.
     */
    duplicateMessage?: string | PropertyBindingInfo;

    /**
     * File name could be provided in case File picker control is used for Export/Save As scenario for selecting
     * the location. Value will be displayed in the File Name control on the dialog.
     */
    suggestedFileName?: string | PropertyBindingInfo;

    /**
     * Specifies whether file name is mandatory to perform confirmation action
     */
    fileNameMandatory?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Event is fired when the selection is made
     */
    select?: (oEvent: Event<$CloudFilePickerSelectEventParameters>) => void;

    /**
     * Event is fired when the cancel button is pressed
     */
    cancel?: (oEvent: Event) => void;
  }

  export interface $CloudFilePickerCancelEventParameters {}

  export interface $CloudFilePickerSelectEventParameters {
    /**
     * Specifies whether an existing file is being overwritten in a file share.
     */
    replaceExistingFile?: boolean;

    /**
     * Specifies the name of the selected file.
     */
    selectedFileName?: string;

    /**
     * Specifies the details of the seleced file.
     */
    selectedFiles?: /* was: sap.suite.ui.commons.CloudFileInfo */ any[];

    /**
     * Specifies the details of the folder of a selected file.
     */
    selectedFolder?: /* was: sap.suite.ui.commons.CloudFileInfo */ any;
  }
}

declare module "sap/suite/ui/commons/collaboration/ServiceContainer" {
  /**
   * @SINCE 1.108
   *
   * Service container to get the collaboration type.
   */
  interface ServiceContainer {
    /**
     * Method that returns the collaboration service object as 'active' on the system. Microsoft Teams is supported
     * as a collaboration option and must be enabled using the communication service SAP_COM_0860. The type
     * definition and class are only available internally and are not intended for external consumers.
     *
     * @returns Returns the promise that is resolved to the instance of the collaboration service.
     */
    getServiceAsync(): Promise</* was: sap.suite.ui.commons.collaboration.BaseHelperService */ any>;
  }
  const ServiceContainer: ServiceContainer;
  export default ServiceContainer;
}

declare module "sap/suite/ui/commons/ColumnData" {
  import {
    default as ColumnMicroChartData,
    $ColumnMicroChartDataSettings,
  } from "sap/suite/ui/microchart/ColumnMicroChartData";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ColumnMicroChartData.
   *
   * Column data holder.
   */
  class ColumnData extends ColumnMicroChartData {
    /**
     * Constructor for a new ColumnData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ColumnMicroChartData#constructor sap.suite.ui.microchart.ColumnMicroChartData }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnDataSettings
    );
    /**
     * Constructor for a new ColumnData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ColumnMicroChartData#constructor sap.suite.ui.microchart.ColumnMicroChartData }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnDataSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ColumnData with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ColumnMicroChartData.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColumnData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ColumnData.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default ColumnData;

  export interface $ColumnDataSettings extends $ColumnMicroChartDataSettings {}
}

declare module "sap/suite/ui/commons/ColumnMicroChart" {
  import {
    default as ColumnMicroChart1,
    $ColumnMicroChartSettings as $ColumnMicroChartSettings1,
  } from "sap/suite/ui/microchart/ColumnMicroChart";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ColumnMicroChart.
   *
   * This control shows a column chart.
   */
  class ColumnMicroChart extends ColumnMicroChart1 {
    /**
     * Constructor for a new ColumnMicroChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ColumnMicroChart#constructor sap.suite.ui.microchart.ColumnMicroChart }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnMicroChartSettings
    );
    /**
     * Constructor for a new ColumnMicroChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ColumnMicroChart#constructor sap.suite.ui.microchart.ColumnMicroChart }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnMicroChartSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ColumnMicroChart with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ColumnMicroChart.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColumnMicroChart>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ColumnMicroChart.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default ColumnMicroChart;

  export interface $ColumnMicroChartSettings
    extends $ColumnMicroChartSettings1 {}
}

declare module "sap/suite/ui/commons/ColumnMicroChartLabel" {
  import {
    default as ColumnMicroChartLabel1,
    $ColumnMicroChartLabelSettings as $ColumnMicroChartLabelSettings1,
  } from "sap/suite/ui/microchart/ColumnMicroChartLabel";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ColumnMicroChartLabel.
   *
   * This element contains data for a label in ColumnMicroChart control.
   */
  class ColumnMicroChartLabel extends ColumnMicroChartLabel1 {
    /**
     * Constructor for a new ColumnMicroChartLabel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ColumnMicroChartLabel#constructor sap.suite.ui.microchart.ColumnMicroChartLabel }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnMicroChartLabelSettings
    );
    /**
     * Constructor for a new ColumnMicroChartLabel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ColumnMicroChartLabel#constructor sap.suite.ui.microchart.ColumnMicroChartLabel }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnMicroChartLabelSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ColumnMicroChartLabel with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ColumnMicroChartLabel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColumnMicroChartLabel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ColumnMicroChartLabel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default ColumnMicroChartLabel;

  export interface $ColumnMicroChartLabelSettings
    extends $ColumnMicroChartLabelSettings1 {}
}

declare module "sap/suite/ui/commons/ComparisonChart" {
  import {
    default as ComparisonMicroChart,
    $ComparisonMicroChartSettings,
  } from "sap/suite/ui/microchart/ComparisonMicroChart";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ComparisonMicroChart.
   *
   * This control shows a comparison chart.
   */
  class ComparisonChart extends ComparisonMicroChart {
    /**
     * Constructor for a new ComparisonChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ComparisonMicroChart#constructor sap.suite.ui.microchart.ComparisonMicroChart }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComparisonChartSettings
    );
    /**
     * Constructor for a new ComparisonChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ComparisonMicroChart#constructor sap.suite.ui.microchart.ComparisonMicroChart }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComparisonChartSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ComparisonChart with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ComparisonMicroChart.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComparisonChart>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ComparisonChart.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default ComparisonChart;

  export interface $ComparisonChartSettings
    extends $ComparisonMicroChartSettings {}
}

declare module "sap/suite/ui/commons/ComparisonData" {
  import {
    default as ComparisonMicroChartData,
    $ComparisonMicroChartDataSettings,
  } from "sap/suite/ui/microchart/ComparisonMicroChartData";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ComparisonMicroChartData.
   *
   * Comparison tile value holder.
   */
  class ComparisonData extends ComparisonMicroChartData {
    /**
     * Constructor for a new ComparisonData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ComparisonMicroChartData#constructor sap.suite.ui.microchart.ComparisonMicroChartData }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComparisonDataSettings
    );
    /**
     * Constructor for a new ComparisonData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.ComparisonMicroChartData#constructor sap.suite.ui.microchart.ComparisonMicroChartData }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComparisonDataSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ComparisonData with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ComparisonMicroChartData.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComparisonData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ComparisonData.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default ComparisonData;

  export interface $ComparisonDataSettings
    extends $ComparisonMicroChartDataSettings {}
}

declare module "sap/suite/ui/commons/DateRangeScroller" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import DateFormat from "sap/ui/core/format/DateFormat";

  /**
   * @deprecated (since 1.34) - Deprecated. Not Fiori.
   *
   * The DateRangeScroller provides a method to scroll through a series of time periods, each of which is
   * represented by a starting date and an ending date, known as the date range. The user may scroll to the
   * previous or next date range. Several predefined ranges are supported such as day, week, work week, month,
   * and year.
   */
  class DateRangeScroller extends Control {
    /**
     * Constructor for a new DateRangeScroller.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeScrollerSettings
    );
    /**
     * Constructor for a new DateRangeScroller.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeScrollerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.DateRangeScroller with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateRangeScroller>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.DateRangeScroller.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeScroller`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeScroller` itself.
     *
     * This event is fired whenever the date range is changed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$DateRangeScrollerChangeEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeScroller`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeScroller`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeScroller` itself.
     *
     * This event is fired whenever the date range is changed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$DateRangeScrollerChangeEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeScroller`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Decrement the date range by a time period increment according to the the date range type and fire the
     * dateChange event.
     *
     * @returns `this` to allow method chaining
     */
    decrementDateRange(): DateRangeScroller;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeScroller`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$DateRangeScrollerChangeEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:change change} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $DateRangeScrollerChangeEventParameters
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Returns an object containing startDate and endDate set to the current start and end Date objects.
     *
     * @returns The date range containing start and end Date.
     */
    getDateRange(): Object;
    /**
     * Increment the date range by a time period increment according to the the date range type and fire the
     * dateChange event.
     *
     * @returns `this` to allow method chaining.
     */
    incrementDateRange(): DateRangeScroller;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns The removed ariaDescribedBy or `null`
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID | null;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns The removed ariaLabelledBy or `null`
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID | null;
    /**
     * Setter for dateFormat which is used for formating the dates If passed object is null or is of incorrect
     * type, control's default formatting will be used.
     */
    setDateFormat(
      /**
       * Date format which should be used
       */
      oDateFormat: DateFormat
    ): void;
    /**
     * Set a custom date range beginning with the specified start date that increments/decrements `iDuration`
     * days at a time.
     *
     * @returns `this` to allow method chaining.
     */
    setDateRangeCustom(
      /**
       * The initial date for the custom range.
       */
      dInitialDate: Date,
      /**
       * The number of days in the custom range, including the start date.
       */
      iDuration?: int
    ): DateRangeScroller;
    /**
     * Set a date range equal to a single day, starting with the given initial date.
     *
     * @returns `this` to allow method chaining.
     */
    setDateRangeDay(
      /**
       * The initial date.
       */
      dInitialDate: Date
    ): DateRangeScroller;
    /**
     * Set a date range that increments/decrements one calendar month at a time. The month date range begins
     * on the first day of the month (beginning of the day) and ends on the last day of the month (end of the
     * day).
     *
     * @returns `this` to allow method chaining.
     */
    setDateRangeMonth(
      /**
       * Any date that falls within the desired month.
       */
      dInitialDate: Date
    ): DateRangeScroller;
    /**
     * Set a date range that steps one week at a time. The starting date is set according to the first day of
     * the week (default is Monday) and the initial date. For example, if the first day of the week is set to
     * Tuesday and the initial date is Wednesday, January 9, 2013, then the starting date will be Tuesday, January
     * 8, 2013.
     *
     * The last day of the range is calculated by adding (duration - 1) days to the starting date.
     *
     * @returns `this` to allow method chaining.
     */
    setDateRangeWeek(
      /**
       * Any date that falls on the desired week. Start/end dates will be adjusted according to the first day
       * of the week.
       */
      dInitialDate: Date,
      /**
       * Settings for the object
       */
      oSettings?: {
        /**
         * The number of days in the range with a minimum of 1 and maximum of 7.
         */
        duration?: int;
        /**
         * The starting day for the range. Valid values are 0-6, with 0=Sunday and 6=Saturday.
         */
        iFirstDayOfWeek?: int;
      }
    ): DateRangeScroller;
    /**
     * Set a date range that increments/decrements one calendar year at a time. The year date range begins on
     * the first day of the year (beginning of the day) and ends on the last day of the year (end of the day).
     *
     * @returns `this` to allow method chaining.
     */
    setDateRangeYear(
      /**
       * Any date that falls within the desired year.
       */
      dInitialDate: Date
    ): DateRangeScroller;
  }
  export default DateRangeScroller;

  export interface $DateRangeScrollerSettings extends $ControlSettings {
    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired whenever the date range is changed.
     */
    change?: (oEvent: Event<$DateRangeScrollerChangeEventParameters>) => void;
  }

  export interface $DateRangeScrollerChangeEventParameters {
    /**
     * Object containing startDate and endDate Date properties signifying the start and ending dates of the
     * currently selected range.
     */
    dateRange?: any;
  }
}

declare module "sap/suite/ui/commons/DateRangeSlider" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { CSSSize } from "sap/ui/core/library";

  import DateFormat from "sap/ui/core/format/DateFormat";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated. Not Fiori.
   *
   * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
   */
  class DateRangeSlider extends Control {
    /**
     * Constructor for a new DateRangeSlider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeSliderSettings
    );
    /**
     * Constructor for a new DateRangeSlider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeSliderSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.DateRangeSlider with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateRangeSlider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.DateRangeSlider.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
     *
     * This event is fired when user changes completes the selection of a new date using a grip. It contains
     * the Date object value of each grip such that the left grip value is held by the value property and the
     * right grip value is held by the value2 property.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
     *
     * This event is fired when user changes completes the selection of a new date using a grip. It contains
     * the Date object value of each grip such that the left grip value is held by the value property and the
     * right grip value is held by the value2 property.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
     *
     * This live event is fired as the user slides a grip with the mouse. It contains the Date object value
     * of each grip such that the left grip value is held by the value property and the right grip value is
     * held by the value2 property.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
     *
     * This live event is fired as the user slides a grip with the mouse. It contains the Date object value
     * of each grip such that the left grip value is held by the value property and the right grip value is
     * held by the value2 property.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:change change} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getEditable editable}.
     *
     * This property switches the enabled state of the control. Using the date range slider interactively requires
     * this property to be true.
     *
     * Default value is `true`.
     *
     * @returns Value of property `editable`
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * This property switches the enabled state of the control. Disabled fields have different colors, and can
     * not be focused.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getLabels labels}.
     *
     * Labels to be displayed instead of dates.
     *
     * @returns Value of property `labels`
     */
    getLabels(): string[];
    /**
     * Gets current value of property {@link #getMax max}.
     *
     * Maximum date for the slider.
     *
     * @returns Value of property `max`
     */
    getMax(): object;
    /**
     * Gets current value of property {@link #getMin min}.
     *
     * Minimum date for the slider.
     *
     * @returns Value of property `min`
     */
    getMin(): object;
    /**
     * Gets current value of property {@link #getPinGrip pinGrip}.
     *
     * Pin the left grip so that user cannot move it with the keyboard or mouse.
     *
     * Default value is `false`.
     *
     * @returns Value of property `pinGrip`
     */
    getPinGrip(): boolean;
    /**
     * Gets current value of property {@link #getPinGrip2 pinGrip2}.
     *
     * Pin the right grip so that user cannot move it with the keyboard or mouse.
     *
     * Default value is `false`.
     *
     * @returns Value of property `pinGrip2`
     */
    getPinGrip2(): boolean;
    /**
     * Gets current value of property {@link #getShowBubbles showBubbles}.
     *
     * Property to show or hide bubbles. Default is true.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showBubbles`
     */
    getShowBubbles(): boolean;
    /**
     * Gets current value of property {@link #getSmallStepWidth smallStepWidth}.
     *
     * The grips of the control can only be moved in steps of this width.
     *
     * @returns Value of property `smallStepWidth`
     */
    getSmallStepWidth(): float;
    /**
     * Gets current value of property {@link #getStepLabels stepLabels}.
     *
     * Display a date label above each tick.
     *
     * Default value is `false`.
     *
     * @returns Value of property `stepLabels`
     */
    getStepLabels(): boolean;
    /**
     * Gets current value of property {@link #getTotalUnits totalUnits}.
     *
     * Number of units between ticks.
     *
     * @returns Value of property `totalUnits`
     */
    getTotalUnits(): int;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Date value of the left grip.
     *
     * @returns Value of property `value`
     */
    getValue(): object;
    /**
     * Gets current value of property {@link #getValue2 value2}.
     *
     * Date value of the right grip.
     *
     * @returns Value of property `value2`
     */
    getValue2(): object;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * This property switches the visible state of the control. Invisible date range slider are not rendered.
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the horizontal date range slider.
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Setter for dateFormat which is used to format the dates for Labels, bubble texts, and tool tips. If passed
     * object is null or is of incorrect type, _oDateRangeSliderInternal's default formatting will be used.
     */
    setDateFormat(
      /**
       * Date format which is used to format the dates.
       */
      oDateFormat: DateFormat
    ): void;
    /**
     * Set Date Range Slider Granularity to Day
     *
     * @returns `this` to allow method chaining.
     */
    setDayGranularity(): DateRangeSlider;
    /**
     * Sets a new value for property {@link #getEditable editable}.
     *
     * This property switches the enabled state of the control. Using the date range slider interactively requires
     * this property to be true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * This property switches the enabled state of the control. Disabled fields have different colors, and can
     * not be focused.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLabels labels}.
     *
     * Labels to be displayed instead of dates.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabels(
      /**
       * New value for property `labels`
       */
      sLabels?: string[]
    ): this;
    /**
     * Set max property for the DateRangeSlider. This sets the maximum date for the slider.
     */
    setMax(
      /**
       * The max date.
       */
      dMax: Date
    ): void;
    /**
     * Set min property for the DateRangeSlider. This sets the minimum date for the slider.
     */
    setMin(
      /**
       * The min date.
       */
      dMin: Date
    ): void;
    /**
     * Set Date Range Slider Granularity to Month
     *
     * @returns `this` to allow method chaining.
     */
    setMonthGranularity(): DateRangeSlider;
    /**
     * Sets a new value for property {@link #getPinGrip pinGrip}.
     *
     * Pin the left grip so that user cannot move it with the keyboard or mouse.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPinGrip(
      /**
       * New value for property `pinGrip`
       */
      bPinGrip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPinGrip2 pinGrip2}.
     *
     * Pin the right grip so that user cannot move it with the keyboard or mouse.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPinGrip2(
      /**
       * New value for property `pinGrip2`
       */
      bPinGrip2?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowBubbles showBubbles}.
     *
     * Property to show or hide bubbles. Default is true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowBubbles(
      /**
       * New value for property `showBubbles`
       */
      bShowBubbles?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSmallStepWidth smallStepWidth}.
     *
     * The grips of the control can only be moved in steps of this width.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSmallStepWidth(
      /**
       * New value for property `smallStepWidth`
       */
      fSmallStepWidth?: float
    ): this;
    /**
     * Sets a new value for property {@link #getStepLabels stepLabels}.
     *
     * Display a date label above each tick.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStepLabels(
      /**
       * New value for property `stepLabels`
       */
      bStepLabels?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTotalUnits totalUnits}.
     *
     * Number of units between ticks.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTotalUnits(
      /**
       * New value for property `totalUnits`
       */
      iTotalUnits?: int
    ): this;
    /**
     * Set value property for the DateRangeSlider. This sets the value date for the slider.
     */
    setValue(
      /**
       * The value date.
       */
      dValue: Date
    ): void;
    /**
     * Sets a new value for property {@link #getValue2 value2}.
     *
     * Date value of the right grip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue2(
      /**
       * New value for property `value2`
       */
      oValue2?: object
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * This property switches the visible state of the control. Invisible date range slider are not rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the horizontal date range slider.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  export default DateRangeSlider;

  export interface $DateRangeSliderSettings extends $ControlSettings {
    /**
     * Width of the horizontal date range slider.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * This property switches the enabled state of the control. Disabled fields have different colors, and can
     * not be focused.
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * This property switches the enabled state of the control. Using the date range slider interactively requires
     * this property to be true.
     */
    editable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * This property switches the visible state of the control. Invisible date range slider are not rendered.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Property to show or hide bubbles. Default is true.
     */
    showBubbles?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The grips of the control can only be moved in steps of this width.
     */
    smallStepWidth?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Number of units between ticks.
     */
    totalUnits?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Display a date label above each tick.
     */
    stepLabels?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Labels to be displayed instead of dates.
     */
    labels?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Minimum date for the slider.
     */
    min?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Maximum date for the slider.
     */
    max?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Date value of the left grip.
     */
    value?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Date value of the right grip.
     */
    value2?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Pin the left grip so that user cannot move it with the keyboard or mouse.
     */
    pinGrip?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Pin the right grip so that user cannot move it with the keyboard or mouse.
     */
    pinGrip2?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * This event is fired when user changes completes the selection of a new date using a grip. It contains
     * the Date object value of each grip such that the left grip value is held by the value property and the
     * right grip value is held by the value2 property.
     */
    change?: (oEvent: Event) => void;

    /**
     * This live event is fired as the user slides a grip with the mouse. It contains the Date object value
     * of each grip such that the left grip value is held by the value property and the right grip value is
     * held by the value2 property.
     */
    liveChange?: (oEvent: Event) => void;
  }

  export interface $DateRangeSliderChangeEventParameters {}

  export interface $DateRangeSliderLiveChangeEventParameters {}
}

declare module "sap/suite/ui/commons/DateRangeSliderInternal" {
  import {
    default as RangeSlider,
    $RangeSliderSettings,
  } from "sap/ui/commons/RangeSlider";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import {
    $SliderChangeEventParameters,
    $SliderLiveChangeEventParameters,
  } from "sap/ui/commons/Slider";

  /**
   * @deprecated (since 1.34) - Deprecated. Not Fiori.
   *
   * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
   */
  class DateRangeSliderInternal extends RangeSlider {
    /**
     * Constructor for a new DateRangeSliderInternal.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeSliderInternalSettings
    );
    /**
     * Constructor for a new DateRangeSliderInternal.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeSliderInternalSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.DateRangeSliderInternal with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.commons.RangeSlider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateRangeSliderInternal>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.DateRangeSliderInternal.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
     *
     * This event is fired when user changes the positions of the grips of the control. It contains value as
     * Date object and value2 as Date object which are based on the positions of two grips.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
     *
     * This event is fired when user changes the positions of the grips of the control. It contains value as
     * Date object and value2 as Date object which are based on the positions of two grips.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
     *
     * This live event is fired when user changes the positions of the grips of the control. It contains value
     * as Date object and value2 as Date object which are based on the positions of two grips.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
     *
     * This live event is fired when user changes the positions of the grips of the control. It contains value
     * as Date object and value2 as Date object which are based on the positions of two grips.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:change change} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getPinGrip pinGrip}.
     *
     * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
     *
     * Default value is `false`.
     *
     * @returns Value of property `pinGrip`
     */
    getPinGrip(): boolean;
    /**
     * Gets current value of property {@link #getPinGrip2 pinGrip2}.
     *
     * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
     *
     * Default value is `false`.
     *
     * @returns Value of property `pinGrip2`
     */
    getPinGrip2(): boolean;
    /**
     * Gets current value of property {@link #getShowBubbles showBubbles}.
     *
     * Property to show or hide bubbles. Default is true.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showBubbles`
     */
    getShowBubbles(): boolean;
    /**
     * Sets a new value for property {@link #getPinGrip pinGrip}.
     *
     * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPinGrip(
      /**
       * New value for property `pinGrip`
       */
      bPinGrip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPinGrip2 pinGrip2}.
     *
     * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPinGrip2(
      /**
       * New value for property `pinGrip2`
       */
      bPinGrip2?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowBubbles showBubbles}.
     *
     * Property to show or hide bubbles. Default is true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowBubbles(
      /**
       * New value for property `showBubbles`
       */
      bShowBubbles?: boolean
    ): this;
  }
  export default DateRangeSliderInternal;

  export interface $DateRangeSliderInternalSettings
    extends $RangeSliderSettings {
    /**
     * Property to show or hide bubbles. Default is true.
     */
    showBubbles?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
     */
    pinGrip?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
     */
    pinGrip2?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * This event is fired when user changes the positions of the grips of the control. It contains value as
     * Date object and value2 as Date object which are based on the positions of two grips.
     */
    change?: (oEvent: Event) => void;

    /**
     * This live event is fired when user changes the positions of the grips of the control. It contains value
     * as Date object and value2 as Date object which are based on the positions of two grips.
     */
    liveChange?: (oEvent: Event) => void;
  }

  export interface $DateRangeSliderInternalChangeEventParameters
    extends $SliderChangeEventParameters {}

  export interface $DateRangeSliderInternalLiveChangeEventParameters
    extends $SliderLiveChangeEventParameters {}
}

declare module "sap/suite/ui/commons/DeltaMicroChart" {
  import {
    default as DeltaMicroChart1,
    $DeltaMicroChartSettings as $DeltaMicroChartSettings1,
  } from "sap/suite/ui/microchart/DeltaMicroChart";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.DeltaMicroChart should be used.
   *
   * This control displays a delta of two values as a chart.
   */
  class DeltaMicroChart extends DeltaMicroChart1 {
    /**
     * Constructor for a new DeltaMicroChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.DeltaMicroChart#constructor sap.suite.ui.microchart.DeltaMicroChart }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DeltaMicroChartSettings
    );
    /**
     * Constructor for a new DeltaMicroChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.DeltaMicroChart#constructor sap.suite.ui.microchart.DeltaMicroChart }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DeltaMicroChartSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.DeltaMicroChart with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.DeltaMicroChart.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DeltaMicroChart>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.DeltaMicroChart.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default DeltaMicroChart;

  export interface $DeltaMicroChartSettings extends $DeltaMicroChartSettings1 {}
}

declare module "sap/suite/ui/commons/DynamicContainer" {
  import { default as SlideTile, $SlideTileSettings } from "sap/m/SlideTile";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - Deprecated. Moved to openui5.
   *
   * The control that displays multiple GenericTile controls as changing slides.
   */
  class DynamicContainer extends SlideTile {
    /**
     * Constructor for a new DynamicContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SlideTile#constructor sap.m.SlideTile }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DynamicContainerSettings
    );
    /**
     * Constructor for a new DynamicContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SlideTile#constructor sap.m.SlideTile }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DynamicContainerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.DynamicContainer with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.SlideTile.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DynamicContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.DynamicContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default DynamicContainer;

  export interface $DynamicContainerSettings extends $SlideTileSettings {}
}

declare module "sap/suite/ui/commons/FacetOverview" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import { FacetOverviewHeight } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * This control is used in UnifiedThingInspector to display the preview of the facet content.
   */
  class FacetOverview extends Control {
    /**
     * Constructor for a new FacetOverview.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FacetOverviewSettings
    );
    /**
     * Constructor for a new FacetOverview.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FacetOverviewSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.FacetOverview with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FacetOverview>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.FacetOverview.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:heightChange heightChange} event of this `sap.suite.ui.commons.FacetOverview`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
     *
     * This event is fired when a new value to the heightType or height property is set.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeightChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:heightChange heightChange} event of this `sap.suite.ui.commons.FacetOverview`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
     *
     * This event is fired when a new value to the heightType or height property is set.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeightChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FacetOverview`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
     *
     * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of
     * the chosen control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$FacetOverviewPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FacetOverview`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
     *
     * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of
     * the chosen control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$FacetOverviewPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:heightChange heightChange} event of this `sap.suite.ui.commons.FacetOverview`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHeightChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.FacetOverview`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$FacetOverviewPressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:heightChange heightChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHeightChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $FacetOverviewPressEventParameters
    ): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content that appears in the left part of the control.
     */
    getContent(): Control;
    /**
     * @deprecated (since 1.17.1) - This property was replaced by heightType property.
     *
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control only if the heightType prperty is set to None. Must be set in rems
     * for the correct work in the UnifiedThingInspector.
     *
     * Default value is `'10rem'`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHeightType heightType}.
     *
     * Indicates the height of the control in the predifened values. If set to None, then the height is defined
     * by the depricated height property.
     *
     * Default value is `"None"`.
     *
     * @returns Value of property `heightType`
     */
    getHeightType(): FacetOverviewHeight | keyof typeof FacetOverviewHeight;
    /**
     * Gets current value of property {@link #getQuantity quantity}.
     *
     * Displays a label with the number of items in the right part of the control.
     *
     * Default value is `-1`.
     *
     * @returns Value of property `quantity`
     */
    getQuantity(): int;
    /**
     * @deprecated (since 1.17.1) - It is not used any more for the laoyut calculations in UnifiedThingInspector.
     *
     * Gets current value of property {@link #getRowSpan rowSpan}.
     *
     * Defines the number of rows that the control represents in an external layout.
     *
     * Default value is `1`.
     *
     * @returns Value of property `rowSpan`
     */
    getRowSpan(): int;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * This property is shown in the upper left part of control.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control. By default, the value is empty and the control inhertis the size from
     * its content.
     *
     * Default value is `'auto'`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * @deprecated (since 1.17.1) - This property was replaced by heightType property.
     *
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control only if the heightType prperty is set to None. Must be set in rems
     * for the correct work in the UnifiedThingInspector.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'10rem'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHeightType heightType}.
     *
     * Indicates the height of the control in the predifened values. If set to None, then the height is defined
     * by the depricated height property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeightType(
      /**
       * New value for property `heightType`
       */
      sHeightType?: FacetOverviewHeight | keyof typeof FacetOverviewHeight
    ): this;
    /**
     * Sets a new value for property {@link #getQuantity quantity}.
     *
     * Displays a label with the number of items in the right part of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setQuantity(
      /**
       * New value for property `quantity`
       */
      iQuantity?: int
    ): this;
    /**
     * @deprecated (since 1.17.1) - It is not used any more for the laoyut calculations in UnifiedThingInspector.
     *
     * Sets a new value for property {@link #getRowSpan rowSpan}.
     *
     * Defines the number of rows that the control represents in an external layout.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRowSpan(
      /**
       * New value for property `rowSpan`
       */
      iRowSpan?: int
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * This property is shown in the upper left part of control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control. By default, the value is empty and the control inhertis the size from
     * its content.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'auto'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  export default FacetOverview;

  export interface $FacetOverviewSettings extends $ControlSettings {
    /**
     * This property is shown in the upper left part of control.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Displays a label with the number of items in the right part of the control.
     */
    quantity?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the width of the control. By default, the value is empty and the control inhertis the size from
     * its content.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.17.1) - This property was replaced by heightType property.
     *
     * Defines the height of the control only if the heightType prperty is set to None. Must be set in rems
     * for the correct work in the UnifiedThingInspector.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.17.1) - It is not used any more for the laoyut calculations in UnifiedThingInspector.
     *
     * Defines the number of rows that the control represents in an external layout.
     */
    rowSpan?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates the height of the control in the predifened values. If set to None, then the height is defined
     * by the depricated height property.
     */
    heightType?:
      | (FacetOverviewHeight | keyof typeof FacetOverviewHeight)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The content that appears in the left part of the control.
     */
    content?: Control;

    /**
     * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of
     * the chosen control.
     */
    press?: (oEvent: Event<$FacetOverviewPressEventParameters>) => void;

    /**
     * This event is fired when a new value to the heightType or height property is set.
     */
    heightChange?: (oEvent: Event) => void;
  }

  export interface $FacetOverviewHeightChangeEventParameters {}

  export interface $FacetOverviewPressEventParameters {
    /**
     * The control ID.
     */
    id?: string;
  }
}

declare module "sap/suite/ui/commons/FeedItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Generic Tile should be used instead.
   *
   * This element represents a news feed item.
   */
  class FeedItem extends UI5Element {
    /**
     * Constructor for a new FeedItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedItemSettings
    );
    /**
     * Constructor for a new FeedItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.FeedItem with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.FeedItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getImage image}.
     *
     * The background image for the feed item.
     *
     * @returns Value of property `image`
     */
    getImage(): URI;
    /**
     * Gets current value of property {@link #getLink link}.
     *
     * The target location of the feed item.
     *
     * @returns Value of property `link`
     */
    getLink(): URI;
    /**
     * Gets current value of property {@link #getPublicationDate publicationDate}.
     *
     * The date the feed was published.
     *
     * @returns Value of property `publicationDate`
     */
    getPublicationDate(): object;
    /**
     * Gets current value of property {@link #getSource source}.
     *
     * The source of the feed item.
     *
     * @returns Value of property `source`
     */
    getSource(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the feed item.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getImage image}.
     *
     * The background image for the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImage(
      /**
       * New value for property `image`
       */
      sImage?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getLink link}.
     *
     * The target location of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLink(
      /**
       * New value for property `link`
       */
      sLink?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getPublicationDate publicationDate}.
     *
     * The date the feed was published.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPublicationDate(
      /**
       * New value for property `publicationDate`
       */
      oPublicationDate?: object
    ): this;
    /**
     * Sets a new value for property {@link #getSource source}.
     *
     * The source of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSource(
      /**
       * New value for property `source`
       */
      sSource?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default FeedItem;

  export interface $FeedItemSettings extends $ElementSettings {
    /**
     * The title of the feed item.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The background image for the feed item.
     */
    image?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The target location of the feed item.
     */
    link?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The source of the feed item.
     */
    source?: string | PropertyBindingInfo;

    /**
     * The date the feed was published.
     */
    publicationDate?: object | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/FeedItemHeader" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
   *
   * This control displays feed item header information.
   */
  class FeedItemHeader extends ListItemBase {
    /**
     * Constructor for a new FeedItemHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedItemHeaderSettings
    );
    /**
     * Constructor for a new FeedItemHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedItemHeaderSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.FeedItemHeader with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedItemHeader>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.FeedItemHeader.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * The description of the feed item.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getImage image}.
     *
     * The image associated with the feed item.
     *
     * @returns Value of property `image`
     */
    getImage(): URI;
    /**
     * Gets current value of property {@link #getLink link}.
     *
     * The target location of the feed item.
     *
     * @returns Value of property `link`
     */
    getLink(): URI;
    /**
     * Gets current value of property {@link #getPublicationDate publicationDate}.
     *
     * The date the feed item was published.
     *
     * @returns Value of property `publicationDate`
     */
    getPublicationDate(): object;
    /**
     * Gets current value of property {@link #getSource source}.
     *
     * The source of the feed item.
     *
     * @returns Value of property `source`
     */
    getSource(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the feed item.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * The description of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getImage image}.
     *
     * The image associated with the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImage(
      /**
       * New value for property `image`
       */
      sImage?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getLink link}.
     *
     * The target location of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLink(
      /**
       * New value for property `link`
       */
      sLink?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getPublicationDate publicationDate}.
     *
     * The date the feed item was published.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPublicationDate(
      /**
       * New value for property `publicationDate`
       */
      oPublicationDate?: object
    ): this;
    /**
     * Sets a new value for property {@link #getSource source}.
     *
     * The source of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSource(
      /**
       * New value for property `source`
       */
      sSource?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default FeedItemHeader;

  export interface $FeedItemHeaderSettings extends $ListItemBaseSettings {
    /**
     * The title of the feed item.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The image associated with the feed item.
     */
    image?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The target location of the feed item.
     */
    link?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The source of the feed item.
     */
    source?: string | PropertyBindingInfo;

    /**
     * The date the feed item was published.
     */
    publicationDate?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * The description of the feed item.
     */
    description?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/FeedTile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import FeedItem from "sap/suite/ui/commons/FeedItem";

  import Event from "sap/ui/base/Event";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Model from "sap/ui/model/Model";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
   *
   * This control displays news feeds.
   */
  class FeedTile extends Control {
    /**
     * Constructor for a new FeedTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedTileSettings
    );
    /**
     * Constructor for a new FeedTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.FeedTile with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.FeedTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: FeedItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FeedTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.FeedTile` itself.
     *
     * The event fired when the user clicks on the control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FeedTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FeedTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.FeedTile` itself.
     *
     * The event fired when the user clicks on the control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FeedTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.FeedTile`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDefaultImages defaultImages}.
     *
     * A list of default images that is cycled by the control when no image is available for a feed item or
     * when no feed items exist. After a random image is displayed first time, control cycles through this list
     * of images.
     *
     * @returns Value of property `defaultImages`
     */
    getDefaultImages(): URI[];
    /**
     * Gets current value of property {@link #getDisplayArticleImage displayArticleImage}.
     *
     * To display article Image or not. If it is true, the article Image will be displayed based on precedence.
     * If it is false, the default image will be displayed.
     *
     * Default value is `true`.
     *
     * @returns Value of property `displayArticleImage`
     */
    getDisplayArticleImage(): boolean;
    /**
     * Gets current value of property {@link #getDisplayDuration displayDuration}.
     *
     * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
     *
     * Default value is `5`.
     *
     * @returns Value of property `displayDuration`
     */
    getDisplayDuration(): int;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The feed items the control cycles through.
     */
    getItems(): FeedItem[];
    /**
     * Gets current value of property {@link #getSource source}.
     *
     * The source of the feed item.
     *
     * @returns Value of property `source`
     */
    getSource(): string;
    /**
     * Checks for the provided `sap.suite.ui.commons.FeedItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: FeedItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: FeedItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllItems(): FeedItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     *
     * @returns The removed item or `null`
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | FeedItem
    ): FeedItem | null;
    /**
     * Validate the array of URI first and then set the defaultImages property
     */
    setDefaultImages(
      /**
       * Default image URIs
       */
      oDefaultImages: URI[]
    ): void;
    /**
     * Sets a new value for property {@link #getDisplayArticleImage displayArticleImage}.
     *
     * To display article Image or not. If it is true, the article Image will be displayed based on precedence.
     * If it is false, the default image will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisplayArticleImage(
      /**
       * New value for property `displayArticleImage`
       */
      bDisplayArticleImage?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDisplayDuration displayDuration}.
     *
     * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `5`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisplayDuration(
      /**
       * New value for property `displayDuration`
       */
      iDisplayDuration?: int
    ): this;
    /**
     * Sets a new value for property {@link #getSource source}.
     *
     * The source of the feed item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSource(
      /**
       * New value for property `source`
       */
      sSource?: string
    ): this;
    /**
     * Set a new model of feed items, such as when a feed aggregator has collected the latest feed items. This
     * model is staged (not immediately set on the control) to avoid re-rendering before the currently displayed
     * article is faded out. Therefore a smooth transition between the display of feed items is always maintained.
     */
    stageModel(
      /**
       * Model of new feed items.
       */
      oModel: Model
    ): void;
  }
  export default FeedTile;

  export interface $FeedTileSettings extends $ControlSettings {
    /**
     * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
     */
    displayDuration?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * To display article Image or not. If it is true, the article Image will be displayed based on precedence.
     * If it is false, the default image will be displayed.
     */
    displayArticleImage?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The source of the feed item.
     */
    source?: string | PropertyBindingInfo;

    /**
     * A list of default images that is cycled by the control when no image is available for a feed item or
     * when no feed items exist. After a random image is displayed first time, control cycles through this list
     * of images.
     */
    defaultImages?: URI[] | PropertyBindingInfo | `{${string}}`;

    /**
     * The feed items the control cycles through.
     */
    items?: FeedItem[] | FeedItem | AggregationBindingInfo | `{${string}}`;

    /**
     * The event fired when the user clicks on the control.
     */
    press?: (oEvent: Event) => void;
  }

  export interface $FeedTilePressEventParameters {}
}

declare module "sap/suite/ui/commons/GenericTile" {
  import {
    default as GenericTile1,
    $GenericTileSettings as $GenericTileSettings1,
  } from "sap/m/GenericTile";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - Deprecated. Moved to openui5.
   *
   * The tile control that displays the title, description, and customizable main area.
   */
  class GenericTile extends GenericTile1 {
    /**
     * Constructor for a new GenericTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.GenericTile#constructor sap.m.GenericTile }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $GenericTileSettings
    );
    /**
     * Constructor for a new GenericTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.GenericTile#constructor sap.m.GenericTile }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $GenericTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.GenericTile with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.GenericTile.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GenericTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.GenericTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default GenericTile;

  export interface $GenericTileSettings extends $GenericTileSettings1 {}
}

declare module "sap/suite/ui/commons/GenericTile2X2" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TileContent2X2 from "sap/suite/ui/commons/TileContent2X2";

  import Event from "sap/ui/base/Event";

  import { URI } from "sap/ui/core/library";

  import {
    FrameType,
    InfoTileSize,
    LoadState,
  } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated.
   *
   * The tile control that displays the title, description, and customizable main area.
   */
  class GenericTile2X2 extends Control {
    /**
     * Constructor for a new GenericTile2X2.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $GenericTile2X2Settings
    );
    /**
     * Constructor for a new GenericTile2X2.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $GenericTile2X2Settings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.GenericTile2X2 with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GenericTile2X2>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.GenericTile2X2.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some tileContent to the aggregation {@link #getTileContent tileContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addTileContent(
      /**
       * The tileContent to add; if empty, nothing is inserted
       */
      oTileContent: TileContent2X2
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.GenericTile2X2`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.GenericTile2X2` itself.
     *
     * The event is fired when the user chooses the tile.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.GenericTile2X2`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.GenericTile2X2`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.GenericTile2X2` itself.
     *
     * The event is fired when the user chooses the tile.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.GenericTile2X2`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyIcon(): this;
    /**
     * Destroys all the tileContent in the aggregation {@link #getTileContent tileContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTileContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.GenericTile2X2`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getBackgroundImage backgroundImage}.
     *
     * The URI of the background image.
     *
     * @returns Value of property `backgroundImage`
     */
    getBackgroundImage(): URI;
    /**
     * Gets current value of property {@link #getFailedText failedText}.
     *
     * The message that appears when the control is in the Failed state.
     *
     * @returns Value of property `failedText`
     */
    getFailedText(): string;
    /**
     * Gets current value of property {@link #getFrameType frameType}.
     *
     * The frame type: 1x1 or 2x1.
     *
     * Default value is `"OneByOne"`.
     *
     * @returns Value of property `frameType`
     */
    getFrameType(): FrameType | keyof typeof FrameType;
    /**
     * Gets current value of property {@link #getHeader header}.
     *
     * The header of the tile.
     *
     * @returns Value of property `header`
     */
    getHeader(): string;
    /**
     * Gets current value of property {@link #getHeaderImage headerImage}.
     *
     * The image to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     *
     * @returns Value of property `headerImage`
     */
    getHeaderImage(): URI;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * An icon or image to be displayed in the control.
     */
    getIcon(): Control;
    /**
     * Gets current value of property {@link #getImageDescription imageDescription}.
     *
     * Description of a header image that is used in the tooltip.
     *
     * @returns Value of property `imageDescription`
     */
    getImageDescription(): string;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * The size of the tile. If not set, then the default size is applied based on the device tile.
     *
     * Default value is `"Auto"`.
     *
     * @returns Value of property `size`
     */
    getSize(): InfoTileSize | keyof typeof InfoTileSize;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * The load status.
     *
     * Default value is `"Loaded"`.
     *
     * @returns Value of property `state`
     */
    getState(): LoadState | keyof typeof LoadState;
    /**
     * Gets current value of property {@link #getSubheader subheader}.
     *
     * The subheader of the tile.
     *
     * @returns Value of property `subheader`
     */
    getSubheader(): string;
    /**
     * Gets content of aggregation {@link #getTileContent tileContent}.
     *
     * The switchable view that depends on the tile type.
     */
    getTileContent(): TileContent2X2[];
    /**
     * Checks for the provided `sap.suite.ui.commons.TileContent2X2` in the aggregation {@link #getTileContent tileContent}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfTileContent(
      /**
       * The tileContent whose index is looked for
       */
      oTileContent: TileContent2X2
    ): int;
    /**
     * Inserts a tileContent into the aggregation {@link #getTileContent tileContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertTileContent(
      /**
       * The tileContent to insert; if empty, nothing is inserted
       */
      oTileContent: TileContent2X2,
      /**
       * The `0`-based index the tileContent should be inserted at; for a negative value of `iIndex`, the tileContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the tileContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getTileContent tileContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllTileContent(): TileContent2X2[];
    /**
     * Removes a tileContent from the aggregation {@link #getTileContent tileContent}.
     *
     * @returns The removed tileContent or `null`
     */
    removeTileContent(
      /**
       * The tileContent to remove or its index or id
       */
      vTileContent: int | string | TileContent2X2
    ): TileContent2X2 | null;
    /**
     * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
     *
     * The URI of the background image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackgroundImage(
      /**
       * New value for property `backgroundImage`
       */
      sBackgroundImage?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getFailedText failedText}.
     *
     * The message that appears when the control is in the Failed state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFailedText(
      /**
       * New value for property `failedText`
       */
      sFailedText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFrameType frameType}.
     *
     * The frame type: 1x1 or 2x1.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"OneByOne"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFrameType(
      /**
       * New value for property `frameType`
       */
      sFrameType?: FrameType | keyof typeof FrameType
    ): this;
    /**
     * Sets a new value for property {@link #getHeader header}.
     *
     * The header of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeader(
      /**
       * New value for property `header`
       */
      sHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderImage headerImage}.
     *
     * The image to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeaderImage(
      /**
       * New value for property `headerImage`
       */
      sHeaderImage?: URI
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: Control
    ): this;
    /**
     * Sets a new value for property {@link #getImageDescription imageDescription}.
     *
     * Description of a header image that is used in the tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImageDescription(
      /**
       * New value for property `imageDescription`
       */
      sImageDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * The size of the tile. If not set, then the default size is applied based on the device tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: InfoTileSize | keyof typeof InfoTileSize
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * The load status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Loaded"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: LoadState | keyof typeof LoadState
    ): this;
    /**
     * Sets a new value for property {@link #getSubheader subheader}.
     *
     * The subheader of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSubheader(
      /**
       * New value for property `subheader`
       */
      sSubheader?: string
    ): this;
  }
  export default GenericTile2X2;

  export interface $GenericTile2X2Settings extends $ControlSettings {
    /**
     * The header of the tile.
     */
    header?: string | PropertyBindingInfo;

    /**
     * The subheader of the tile.
     */
    subheader?: string | PropertyBindingInfo;

    /**
     * The message that appears when the control is in the Failed state.
     */
    failedText?: string | PropertyBindingInfo;

    /**
     * The size of the tile. If not set, then the default size is applied based on the device tile.
     */
    size?:
      | (InfoTileSize | keyof typeof InfoTileSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The URI of the background image.
     */
    backgroundImage?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The image to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     */
    headerImage?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The frame type: 1x1 or 2x1.
     */
    frameType?:
      | (FrameType | keyof typeof FrameType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The load status.
     */
    state?:
      | (LoadState | keyof typeof LoadState)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Description of a header image that is used in the tooltip.
     */
    imageDescription?: string | PropertyBindingInfo;

    /**
     * The switchable view that depends on the tile type.
     */
    tileContent?:
      | TileContent2X2[]
      | TileContent2X2
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * An icon or image to be displayed in the control.
     */
    icon?: Control;

    /**
     * The event is fired when the user chooses the tile.
     */
    press?: (oEvent: Event) => void;
  }

  export interface $GenericTile2X2PressEventParameters {}
}

declare module "sap/suite/ui/commons/HarveyBallMicroChart" {
  import {
    default as HarveyBallMicroChart1,
    $HarveyBallMicroChartSettings as $HarveyBallMicroChartSettings1,
  } from "sap/suite/ui/microchart/HarveyBallMicroChart";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.HarveyBallMicroChart.
   *
   * This chart shows the part comparative to total.
   */
  class HarveyBallMicroChart extends HarveyBallMicroChart1 {
    /**
     * Constructor for a new HarveyBallMicroChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.HarveyBallMicroChart#constructor sap.suite.ui.microchart.HarveyBallMicroChart }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $HarveyBallMicroChartSettings
    );
    /**
     * Constructor for a new HarveyBallMicroChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.HarveyBallMicroChart#constructor sap.suite.ui.microchart.HarveyBallMicroChart }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $HarveyBallMicroChartSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.HarveyBallMicroChart with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.HarveyBallMicroChart.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HarveyBallMicroChart>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.HarveyBallMicroChart.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default HarveyBallMicroChart;

  export interface $HarveyBallMicroChartSettings
    extends $HarveyBallMicroChartSettings1 {}
}

declare module "sap/suite/ui/commons/HarveyBallMicroChartItem" {
  import {
    default as HarveyBallMicroChartItem1,
    $HarveyBallMicroChartItemSettings as $HarveyBallMicroChartItemSettings1,
  } from "sap/suite/ui/microchart/HarveyBallMicroChartItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.HarveyBallMicroChartItem.
   *
   * The configuration of the slice on the pie chart.
   */
  class HarveyBallMicroChartItem extends HarveyBallMicroChartItem1 {
    /**
     * Constructor for a new HarveyBallMicroChartItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.HarveyBallMicroChartItem#constructor sap.suite.ui.microchart.HarveyBallMicroChartItem }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $HarveyBallMicroChartItemSettings
    );
    /**
     * Constructor for a new HarveyBallMicroChartItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.HarveyBallMicroChartItem#constructor sap.suite.ui.microchart.HarveyBallMicroChartItem }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $HarveyBallMicroChartItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.HarveyBallMicroChartItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.HarveyBallMicroChartItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HarveyBallMicroChartItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.HarveyBallMicroChartItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default HarveyBallMicroChartItem;

  export interface $HarveyBallMicroChartItemSettings
    extends $HarveyBallMicroChartItemSettings1 {}
}

declare module "sap/suite/ui/commons/HeaderCell" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import HeaderCellItem from "sap/suite/ui/commons/HeaderCellItem";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.44.0) - HeaderCell control is no longer used. Please use other container controls
   * instead (like sap.m.VBox or sap.m.HBox).
   *
   * This control contains 4 cells (West, North, East, South). It can display one or more controls in different
   * layouts. Each aggregation must contain only one instance of HeaderCellItem.
   */
  class HeaderCell extends Control {
    /**
     * Constructor for a new HeaderCell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $HeaderCellSettings
    );
    /**
     * Constructor for a new HeaderCell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $HeaderCellSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.HeaderCell with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HeaderCell>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.HeaderCell.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the east in the aggregation {@link #getEast east}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyEast(): this;
    /**
     * Destroys the north in the aggregation {@link #getNorth north}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyNorth(): this;
    /**
     * Destroys the south in the aggregation {@link #getSouth south}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySouth(): this;
    /**
     * Destroys the west in the aggregation {@link #getWest west}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyWest(): this;
    /**
     * Gets content of aggregation {@link #getEast east}.
     *
     * Object that contains control to render in east area of the HeaderCell.
     */
    getEast(): HeaderCellItem;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the HeaderCell control.
     *
     * Default value is `'106px'`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * @deprecated (since 1.20.2) - Wrong property name
     *
     * Gets current value of property {@link #getHeigth heigth}.
     *
     * Height of the HeaderCell control.
     *
     * Default value is `'100px'`.
     *
     * @returns Value of property `heigth`
     */
    getHeigth(): CSSSize;
    /**
     * Gets content of aggregation {@link #getNorth north}.
     *
     * Object that contains control to render in north area of the HeaderCell.
     */
    getNorth(): HeaderCellItem;
    /**
     * Gets content of aggregation {@link #getSouth south}.
     *
     * Object that contains control to render in south area of the HeaderCell.
     */
    getSouth(): HeaderCellItem;
    /**
     * Gets content of aggregation {@link #getWest west}.
     *
     * Object that contains control to render in west area of the HeaderCell.
     */
    getWest(): HeaderCellItem;
    /**
     * Sets the aggregated {@link #getEast east}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEast(
      /**
       * The east to set
       */
      oEast: HeaderCellItem
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the HeaderCell control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'106px'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * @deprecated (since 1.20.2) - Wrong property name
     *
     * Sets a new value for property {@link #getHeigth heigth}.
     *
     * Height of the HeaderCell control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100px'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeigth(
      /**
       * New value for property `heigth`
       */
      sHeigth?: CSSSize
    ): this;
    /**
     * Sets the aggregated {@link #getNorth north}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNorth(
      /**
       * The north to set
       */
      oNorth: HeaderCellItem
    ): this;
    /**
     * Sets the aggregated {@link #getSouth south}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSouth(
      /**
       * The south to set
       */
      oSouth: HeaderCellItem
    ): this;
    /**
     * Sets the aggregated {@link #getWest west}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWest(
      /**
       * The west to set
       */
      oWest: HeaderCellItem
    ): this;
  }
  export default HeaderCell;

  export interface $HeaderCellSettings extends $ControlSettings {
    /**
     * @deprecated (since 1.20.2) - Wrong property name
     *
     * Height of the HeaderCell control.
     */
    heigth?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the HeaderCell control.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Object that contains control to render in west area of the HeaderCell.
     */
    west?: HeaderCellItem;

    /**
     * Object that contains control to render in north area of the HeaderCell.
     */
    north?: HeaderCellItem;

    /**
     * Object that contains control to render in east area of the HeaderCell.
     */
    east?: HeaderCellItem;

    /**
     * Object that contains control to render in south area of the HeaderCell.
     */
    south?: HeaderCellItem;
  }
}

declare module "sap/suite/ui/commons/HeaderCellItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Control from "sap/ui/core/Control";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.44.0) - The HeaderCellItem was deprecated because of the deprecation of HeaderCell.
   * Please see HeaderCell for replacement advice.
   *
   * Object that contains instance of control and information about height. It should be used inside sap.suite.ui.commons.HeaderCell
   */
  class HeaderCellItem extends UI5Element {
    /**
     * Constructor for a new HeaderCellItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $HeaderCellItemSettings
    );
    /**
     * Constructor for a new HeaderCellItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $HeaderCellItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.HeaderCellItem with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HeaderCellItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.HeaderCellItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Instance of UI5 Control that is used as content.
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of area to occupy by control.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of area to occupy by control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
  }
  export default HeaderCellItem;

  export interface $HeaderCellItemSettings extends $ElementSettings {
    /**
     * Height of area to occupy by control.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Instance of UI5 Control that is used as content.
     */
    content?: Control;
  }
}

declare module "sap/suite/ui/commons/HeaderContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ObjectHeaderContainer, BackgroundDesign } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { HeaderContainerView } from "sap/suite/ui/commons/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.44) - This control is deprecated in this library since 1.44 and moved to sap.m library
   * that is also part of openUI5.
   *
   * The container that provides a horizontal layout. It provides a horizontal scroll on the tablet and phone.
   * On the desktop, it provides scroll left and scroll right buttons. This control supports keyboard navigation.
   * You can use left and right arrow keys to navigate through the inner content. The Home key puts focus
   * on the first control and the End key puts focus on the last control. Use Enter or Space to choose the
   * control.
   */
  class HeaderContainer extends Control implements ObjectHeaderContainer {
    __implements__sap_m_ObjectHeaderContainer: boolean;
    /**
     * Constructor for a new HeaderContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $HeaderContainerSettings
    );
    /**
     * Constructor for a new HeaderContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $HeaderContainerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.HeaderContainer with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HeaderContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.HeaderContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: Control
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyItems(): this;
    /**
     * @SINCE 1.38
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the content. The visualization of the different options depends on
     * the used theme.
     *
     * Default value is `"Transparent"`.
     *
     * @returns Value of property `backgroundDesign`
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Items to add to HeaderContainer.
     */
    getItems(): Control[];
    /**
     * Gets current value of property {@link #getScrollStep scrollStep}.
     *
     * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
     *
     * Default value is `300`.
     *
     * @returns Value of property `scrollStep`
     */
    getScrollStep(): int;
    /**
     * Gets current value of property {@link #getScrollTime scrollTime}.
     *
     * Scroll animation time in milliseconds.
     *
     * Default value is `500`.
     *
     * @returns Value of property `scrollTime`
     */
    getScrollTime(): int;
    /**
     * @SINCE 1.25
     *
     * Gets current value of property {@link #getShowDividers showDividers}.
     *
     * If set to true, shows dividers between scrollable items.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showDividers`
     */
    getShowDividers(): boolean;
    /**
     * @SINCE 1.25
     *
     * Gets current value of property {@link #getView view}.
     *
     * The view of the HeaderContainer. There are two view modes: horizontal and vertical. In horizontal mode
     * the content controls are displayed next to each other, in vertical mode the content controls are displayed
     * on top of each other.
     *
     * Default value is `"Horizontal"`.
     *
     * @returns Value of property `view`
     */
    getView(): HeaderContainerView | keyof typeof HeaderContainerView;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Control
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: Control,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllItems(): Control[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     *
     * @returns The removed item or `null`
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | Control
    ): Control | null;
    /**
     * @SINCE 1.38
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the content. The visualization of the different options depends on
     * the used theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Transparent"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * Sets a new value for property {@link #getScrollStep scrollStep}.
     *
     * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `300`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScrollStep(
      /**
       * New value for property `scrollStep`
       */
      iScrollStep?: int
    ): this;
    /**
     * Sets a new value for property {@link #getScrollTime scrollTime}.
     *
     * Scroll animation time in milliseconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `500`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScrollTime(
      /**
       * New value for property `scrollTime`
       */
      iScrollTime?: int
    ): this;
    /**
     * @SINCE 1.25
     *
     * Sets a new value for property {@link #getShowDividers showDividers}.
     *
     * If set to true, shows dividers between scrollable items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowDividers(
      /**
       * New value for property `showDividers`
       */
      bShowDividers?: boolean
    ): this;
    /**
     * @SINCE 1.25
     *
     * Sets a new value for property {@link #getView view}.
     *
     * The view of the HeaderContainer. There are two view modes: horizontal and vertical. In horizontal mode
     * the content controls are displayed next to each other, in vertical mode the content controls are displayed
     * on top of each other.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Horizontal"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setView(
      /**
       * New value for property `view`
       */
      sView?: HeaderContainerView | keyof typeof HeaderContainerView
    ): this;
  }
  export default HeaderContainer;

  export interface $HeaderContainerSettings extends $ControlSettings {
    /**
     * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
     */
    scrollStep?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Scroll animation time in milliseconds.
     */
    scrollTime?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.25
     *
     * If set to true, shows dividers between scrollable items.
     */
    showDividers?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.25
     *
     * The view of the HeaderContainer. There are two view modes: horizontal and vertical. In horizontal mode
     * the content controls are displayed next to each other, in vertical mode the content controls are displayed
     * on top of each other.
     */
    view?:
      | (HeaderContainerView | keyof typeof HeaderContainerView)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @SINCE 1.38
     *
     * Specifies the background color of the content. The visualization of the different options depends on
     * the used theme.
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Items to add to HeaderContainer.
     */
    items?: Control[] | Control | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/imageeditor/CropCustomShapeHistoryItem" {
  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.67.0
   *
   * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
   * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#rectangleCrop} method.
   */
  class CropCustomShapeHistoryItem extends HistoryItem {
    /**
     * Constructor for a new CropCustomShapeHistoryItem.
     */
    constructor(
      /**
       * Property bag
       */
      mProperties: {
        /**
         * X value
         */
        x: int;
        /**
         * Y value
         */
        y: int;
        /**
         * Width of the rectangle
         */
        width: int;
        /**
         * Height of the rectangle
         */
        height: int;
        /**
         * Previous width of the rectangle
         */
        oldWidth: int;
        /**
         * Previous height of the rectangle
         */
        oldHeight: int;
      }
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CropCustomShapeHistoryItem with name
     * `sClassName` and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CropCustomShapeHistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CropCustomShapeHistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default CropCustomShapeHistoryItem;
}

declare module "sap/suite/ui/commons/imageeditor/CropEllipseHistoryItem" {
  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.66.0
   *
   * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
   * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#ellipseCrop} method.
   */
  class CropEllipseHistoryItem extends HistoryItem {
    /**
     * Constructor for a new CropEllipseHistoryItem.
     */
    constructor(
      /**
       * Property bag
       */
      mProperties: {
        /**
         * X value
         */
        x: int;
        /**
         * Y value
         */
        y: int;
        /**
         * X radius value
         */
        rx: int;
        /**
         * Y radius value
         */
        ry: int;
        /**
         * Width of the ellipse
         */
        width: int;
        /**
         * Height of the ellipse
         */
        height: int;
        /**
         * Previous width of the ellipse
         */
        oldWidth: int;
        /**
         * Previous height of the ellipse
         */
        oldHeight: int;
      }
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CropEllipseHistoryItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CropEllipseHistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CropEllipseHistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default CropEllipseHistoryItem;
}

declare module "sap/suite/ui/commons/imageeditor/CropRectangleHistoryItem" {
  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.66.0
   *
   * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
   * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#rectangleCrop} method.
   */
  class CropRectangleHistoryItem extends HistoryItem {
    /**
     * Constructor for a new CropRectangleHistoryItem.
     */
    constructor(
      /**
       * Property bag
       */
      mProperties: {
        /**
         * X value
         */
        x: int;
        /**
         * Y value
         */
        y: int;
        /**
         * Width of the rectangle
         */
        width: int;
        /**
         * Height of the rectangle
         */
        height: int;
        /**
         * Previous width of the rectangle
         */
        oldWidth: int;
        /**
         * Previous height of the rectangle
         */
        oldHeight: int;
      }
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CropRectangleHistoryItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CropRectangleHistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CropRectangleHistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default CropRectangleHistoryItem;
}

declare module "sap/suite/ui/commons/imageeditor/CustomSizeItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.66.0
   *
   * A `CustomSizeItem` can be used in the {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer} aggregations
   * to define custom items on the Resize, Crop Rectangle, and Crop Ellipse panels.
   */
  class CustomSizeItem extends UI5Element {
    /**
     * Constructor for a new CustomSizeItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomSizeItemSettings
    );
    /**
     * Constructor for a new CustomSizeItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomSizeItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CustomSizeItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomSizeItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CustomSizeItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * * Defines the height of the `CustomSizeItem`.
     * This property is mandatory and must be greater than 0.
     *
     * Default value is `0`.
     *
     * @returns Value of property `height`
     */
    getHeight(): float;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed in the `CustomSizeItem`.
     * If no icon is specified, the default image is used, which is derived from the set width and height.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Defines the label of the `CustomSizeItem`.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets current value of property {@link #getRelative relative}.
     *
     * Specifies whether the `width` and `height` properties use relative values (`true`) or absolute values
     * (`false`).
     * When used in the `customResizeItems` aggregation of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
     * width and height are multiplied by the `width` and `height` properties of the `CustomSizeItem`.
     * When used in the `customRectangleCropItems` or `customEllipseCropItems` aggregations of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
     * aspect ratio is set to the `width` and `height` properties of the `CustomSizeItem`.
     *
     * Default value is `false`.
     *
     * @returns Value of property `relative`
     */
    getRelative(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the `CustomSizeItem`.
     * This property is mandatory and must be greater than 0.
     *
     * Default value is `0`.
     *
     * @returns Value of property `width`
     */
    getWidth(): float;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * * Defines the height of the `CustomSizeItem`.
     * This property is mandatory and must be greater than 0.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      fHeight?: float
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed in the `CustomSizeItem`.
     * If no icon is specified, the default image is used, which is derived from the set width and height.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Defines the label of the `CustomSizeItem`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRelative relative}.
     *
     * Specifies whether the `width` and `height` properties use relative values (`true`) or absolute values
     * (`false`).
     * When used in the `customResizeItems` aggregation of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
     * width and height are multiplied by the `width` and `height` properties of the `CustomSizeItem`.
     * When used in the `customRectangleCropItems` or `customEllipseCropItems` aggregations of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
     * aspect ratio is set to the `width` and `height` properties of the `CustomSizeItem`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRelative(
      /**
       * New value for property `relative`
       */
      bRelative?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the `CustomSizeItem`.
     * This property is mandatory and must be greater than 0.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      fWidth?: float
    ): this;
  }
  export default CustomSizeItem;

  export interface $CustomSizeItemSettings extends $ElementSettings {
    /**
     * Defines the width of the `CustomSizeItem`.
     * This property is mandatory and must be greater than 0.
     */
    width?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * * Defines the height of the `CustomSizeItem`.
     * This property is mandatory and must be greater than 0.
     */
    height?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the label of the `CustomSizeItem`.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed in the `CustomSizeItem`.
     * If no icon is specified, the default image is used, which is derived from the set width and height.
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies whether the `width` and `height` properties use relative values (`true`) or absolute values
     * (`false`).
     * When used in the `customResizeItems` aggregation of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
     * width and height are multiplied by the `width` and `height` properties of the `CustomSizeItem`.
     * When used in the `customRectangleCropItems` or `customEllipseCropItems` aggregations of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
     * aspect ratio is set to the `width` and `height` properties of the `CustomSizeItem`.
     */
    relative?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/imageeditor/FilterHistoryItem" {
  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.66.0
   *
   * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
   * was created by one of the methods that apply filters to the image, such as {@link sap.suite.ui.commons.imageeditor.ImageEditor#sepia},
   * {@link sap.suite.ui.commons.imageeditor.ImageEditor#grayscale}, {@link sap.suite.ui.commons.imageeditor.ImageEditor#saturate},
   * {@link sap.suite.ui.commons.imageeditor.ImageEditor#invert}, {@link sap.suite.ui.commons.imageeditor.ImageEditor#brightness},
   * and {@link sap.suite.ui.commons.imageeditor.ImageEditor#contrast}.
   */
  class FilterHistoryItem extends HistoryItem {
    /**
     * Constructor for a new FilterHistoryItem.
     */
    constructor(
      /**
       * Property bag
       */
      mProperties: {
        /**
         * Filter type
         */
        type: string;
        /**
         * Filter value
         */
        value: int;
        /**
         * Filter unit
         */
        unit: string;
      }
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.FilterHistoryItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FilterHistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.FilterHistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Gets the type of the filter applied.
     *
     * @returns Type of the filter
     */
    getType(): string;
    /**
     * Gets the units of the filter value.
     *
     * @returns Unit of the filter
     */
    getUnit(): string;
    /**
     * Gets the filter value (its intensity).
     *
     * @returns Value of the filter
     */
    getValue(): int;
  }
  export default FilterHistoryItem;
}

declare module "sap/suite/ui/commons/imageeditor/FlipHistoryItem" {
  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.66.0
   *
   * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
   * was created by one of the flip methods, such as {@link sap.suite.ui.commons.imageeditor.ImageEditor#flipVertical},
   * {@link sap.suite.ui.commons.imageeditor.ImageEditor#flipHorizontal}, and {@link sap.suite.ui.commons.imageeditor.ImageEditor#flip}.
   */
  class FlipHistoryItem extends HistoryItem {
    /**
     * Constructor for a new FlipHistoryItem.
     */
    constructor(
      /**
       * Property bag
       */
      mProperties: {
        /**
         * Whether vertical flip has been performed
         */
        vertical: boolean;
        /**
         * Whether horizontal flip has been performed
         */
        horizontal: boolean;
      }
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.FlipHistoryItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FlipHistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.FlipHistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default FlipHistoryItem;
}

declare module "sap/suite/ui/commons/imageeditor/HistoryItem" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.66.0
   *
   * Abstract base class for all {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history items.
   */
  class HistoryItem extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.HistoryItem with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.HistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default HistoryItem;
}

declare module "sap/suite/ui/commons/imageeditor/ImageEditor" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import { ImageFormat, ImageEditorMode } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.66.0
   *
   * Image editor displays an image and provides API and visual controls to edit it.
   */
  class ImageEditor extends Control {
    /**
     * Constructor for a new ImageEditor.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageEditorSettings
    );
    /**
     * Constructor for a new ImageEditor.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageEditorSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ImageEditor with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ImageEditor>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ImageEditor.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Saves current preview to action history, if there is any.
     */
    applyPreview(): void;
    /**
     * Crops the image based on the currently shown crop area.
     * This method works only when the {@link sap.suite.ui.commons.ImageEditorMode} is set to `CropRectangle`
     * or `CropEllipse`.
     */
    applyVisibleCrop(
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cropAreaChanged cropAreaChanged} event of this
     * `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired when the size of the crop area is changed by the user while in the `CropRectangle`
     * or `CropEllipse` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCropAreaChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ImageEditorCropAreaChangedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cropAreaChanged cropAreaChanged} event of this
     * `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired when the size of the crop area is changed by the user while in the `CropRectangle`
     * or `CropEllipse` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCropAreaChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ImageEditorCropAreaChangedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customShapeError customShapeError} event of
     * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired if there is an error loading the image specified in the `customShapeSrc` property,
     * for example, when the URL is unreachable.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomShapeError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customShapeError customShapeError} event of
     * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired if there is an error loading the image specified in the `customShapeSrc` property,
     * for example, when the URL is unreachable.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomShapeError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customShapeLoaded customShapeLoaded} event of
     * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired after the image specified in the `customShapeSrc` property is successfully loaded.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomShapeLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customShapeLoaded customShapeLoaded} event of
     * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired after the image specified in the `customShapeSrc` property is successfully loaded.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomShapeLoaded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired if there is an error loading the image specified in the `src` property, for example,
     * when the URL is unreachable.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired if there is an error loading the image specified in the `src` property, for example,
     * when the URL is unreachable.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:historyChanged historyChanged} event of this
     * `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired each time there is a change in the history of recent actions or in the recent actions
     * history index.
     * This may happen either when an action is performed on the image or when the {@link #undo}, {@link #redo},
     * or {@link #jumpToHistory} methods are called.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHistoryChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:historyChanged historyChanged} event of this
     * `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired each time there is a change in the history of recent actions or in the recent actions
     * history index.
     * This may happen either when an action is performed on the image or when the {@link #undo}, {@link #redo},
     * or {@link #jumpToHistory} methods are called.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHistoryChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired after the image specified in the `src` property is successfully loaded.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired after the image specified in the `src` property is successfully loaded.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoaded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:sizeChanged sizeChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired when the size of the image is changed by the user while in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSizeChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ImageEditorSizeChangedEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:sizeChanged sizeChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired when the size of the image is changed by the user while in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSizeChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ImageEditorSizeChangedEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired when the zoom level is changed by the user interaction.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachZoomChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ImageEditorZoomChangedEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
     *
     * This event is fired when the zoom level is changed by the user interaction.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachZoomChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ImageEditorZoomChangedEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Applies the brightness filter to the image.
     */
    brightness(
      /**
       * Filter strength. Applicable range of values is from 0 to 500
       */
      iValue: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Cancels the current preview and restores the image to its last recorded state.
     */
    cancelPreview(): void;
    /**
     * Applies the contrast filter to the image.
     */
    contrast(
      /**
       * Amount of the filter strength. Applicable range of values is from 0 to 500
       */
      iValue: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Crops the image to a new shape based on the loaded custom shape and the specified pixel parameters.
     */
    customShapeCrop(
      /**
       * X coordinate of the top left corner of the crop area
       */
      iX: int,
      /**
       * Y coordinate of the top left corner of the crop area
       */
      iY: int,
      /**
       * Width of the crop area
       */
      iWidth: int,
      /**
       * Height of the crop area
       */
      iHeight: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cropAreaChanged cropAreaChanged} event of
     * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCropAreaChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$ImageEditorCropAreaChangedEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:customShapeError customShapeError} event of
     * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCustomShapeError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:customShapeLoaded customShapeLoaded} event
     * of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCustomShapeLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:error error} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:historyChanged historyChanged} event of this
     * `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHistoryChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loaded loaded} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:sizeChanged sizeChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSizeChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ImageEditorSizeChangedEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachZoomChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ImageEditorZoomChangedEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Crops the image to a new circular or oval shape based on the specified pixel parameters.
     */
    ellipseCrop(
      /**
       * X coordinate of the center of the crop area
       */
      iX: int,
      /**
       * Y coordinate of the center of the crop area
       */
      iY: int,
      /**
       * X radius of the crop area
       */
      iXRadius: int,
      /**
       * Y radius of the crop area
       */
      iYRadius: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:cropAreaChanged cropAreaChanged} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCropAreaChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ImageEditorCropAreaChangedEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:customShapeError customShapeError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCustomShapeError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:customShapeLoaded customShapeLoaded} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCustomShapeLoaded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:error error} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:historyChanged historyChanged} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHistoryChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:loaded loaded} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireLoaded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:sizeChanged sizeChanged} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSizeChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ImageEditorSizeChangedEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:zoomChanged zoomChanged} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireZoomChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ImageEditorZoomChangedEventParameters
    ): this;
    /**
     * Flips the image based on the specified parameters.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    flip(
      /**
       * Whether to flip the image vertically
       */
      bVertical: boolean,
      /**
       * Whether to flip the image horizontally
       */
      bHorizontal: boolean,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): ImageEditor;
    /**
     * Flips the whole image horizontally.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    flipHorizontal(
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): ImageEditor;
    /**
     * Flips the whole image vertically.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    flipVertical(
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): ImageEditor;
    /**
     * Gets the current crop area position and size.
     *
     * @returns Crop area with properties x, y, width, and height
     */
    getCropArea(): {
      x: int;

      y: int;

      width: int;

      height: int;
    };
    /**
     * Returns `true` when the `src` property is set and the specified image has been successfuly loaded.
     *
     * @returns Whether the image is loaded or not
     */
    getCustomShapeLoaded(): boolean;
    /**
     * Gets current value of property {@link #getCustomShapeSrc customShapeSrc}.
     *
     * Image source for the custom shape used in custom shape cropping.
     * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
     * supported by the <img> HTML tag.
     * **Note:** In Internet Explorer, `customShape` doesn't support SVG files and will throw and exception
     * if SVG files are used.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `customShapeSrc`
     */
    getCustomShapeSrc(): any;
    /**
     * Returns the name of the image file if a file was specified in the`src` property and its name is available.
     * Otherwise returns an empty string.
     *
     * @returns File name
     */
    getFileName(): string;
    /**
     * Returns the height of the image.
     *
     * @returns height of the last non-preview image
     */
    getHeight(): int;
    /**
     * Returns an array of all action history items.
     *
     * @returns Array of action history items
     */
    getHistory(): HistoryItem[];
    /**
     * Returns Blob object containing the image in the specified format. If the format is not specified, either
     * the original format of the image is used or PNG, if the original format is not supported by the browser's
     * `canvas.toDataURL` method.
     *
     * @returns Promise that resolves into the Blob object
     */
    getImageAsBlob(
      /**
       * File format of the returned image Blob. If the selected format is not suppoirted by the browser's `canvas.toDataURL`
       * method, PNG is returned instead.
       */
      sFormat?: ImageFormat | keyof typeof ImageFormat,
      /**
       * Only applied when JPEG format is used. Quality of the returned image, ranging from 0 to 1. 0 means highly
       * compressed image, 1 means uncompressed image. When no value is provided, canvas default compression level
       * is used.
       */
      fQuality?: float
    ): Promise<any>;
    /**
     * Returns Base64 Data URL of the image in the specified format. If the format is not specified, either
     * the original format of the image is used or PNG, if the original format is not supported by the browser's
     * `canvas.toDataURL` method.
     *
     * @returns Base64 Data URL
     */
    getImageDataURL(
      /**
       * File format of the returned Data URL. If the selected format is not suppoirted by the browser's `canvas.toDataURL`
       * method, PNG is returned instead.
       */
      sFormat?: ImageFormat | keyof typeof ImageFormat,
      /**
       * Only applied when JPEG format is used. Quality of the returned image, ranging from 0 to 1. 0 means highly
       * compressed image, 1 means uncompressed image. When no value is provided, canvas default compression level
       * is used.
       */
      fQuality?: float
    ): string;
    /**
     * Returns Base64 Data URL of the image in JPEG format.
     *
     * @returns Base64 Data URL
     */
    getImageJpegDataURL(
      /**
       * Quality of the returned image, ranging from 0 to 1. 0 means highly compressed image, 1 means uncompressed
       * image. When no value is provided, canvas default compression level is used.
       */
      fQuality?: float
    ): string;
    /**
     * Returns Base64 Data URL of the image in PNG format.
     *
     * @returns Base64 Data URL
     */
    getImagePngDataURL(): string;
    /**
     * Gets current value of property {@link #getKeepCropAspectRatio keepCropAspectRatio}.
     *
     * Defines whether aspect ratio should be kept when the crop area is expanded or shrunk in the `CropRectangle`
     * or `CropEllipse` modes ({@link sap.suite.ui.commons.ImageEditorMode}).
     *
     * Default value is `true`.
     *
     * @returns Value of property `keepCropAspectRatio`
     */
    getKeepCropAspectRatio(): boolean;
    /**
     * Gets current value of property {@link #getKeepResizeAspectRatio keepResizeAspectRatio}.
     *
     * Defines whether aspect ratio should be kept when the image is resized in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode})
     * or using the {@link #setWidth} or {@link #setHeight} methods.
     *
     * Default value is `true`.
     *
     * @returns Value of property `keepResizeAspectRatio`
     */
    getKeepResizeAspectRatio(): boolean;
    /**
     * Returns `true` when the `customShapeSrc` property is set and the specified image has been successfuly
     * loaded.
     *
     * @returns Whether the image is loaded or not
     */
    getLoaded(): boolean;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Image editor mode.
     * Four modes are available: resize mode, crop to rectangle mode, crop to circle mode, and display image
     * mode (default).
     * The default mode displays the image to be edited.
     *
     * Default value is `Default`.
     *
     * @returns Value of property `mode`
     */
    getMode(): ImageEditorMode | keyof typeof ImageEditorMode;
    /**
     * Returns the height of the currently shown image, even if it is in preview state.
     *
     * @returns height of the current image, even in preview state
     */
    getPreviewHeight(): int;
    /**
     * Gets the width of the currently shown image, even if it is in preview state.
     *
     * @returns width of the current image, even when in preview state
     */
    getPreviewWidth(): int;
    /**
     * Gets current value of property {@link #getScaleCropArea scaleCropArea}.
     *
     * Defines the behavior of the crop area when zooming in or out.
     * If set to `true`, the crop area is scaled up or down when the zoom level is changed.
     * If set to `false`, the crop area remains unchanged and keeps its size.
     *
     * Default value is `false`.
     *
     * @returns Value of property `scaleCropArea`
     */
    getScaleCropArea(): boolean;
    /**
     * Gets current value of property {@link #getSrc src}.
     *
     * Image source.
     * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
     * supported by the <img> HTML tag.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `src`
     */
    getSrc(): any;
    /**
     * Gets the width of the image.
     *
     * @returns width of the last non-preview image
     */
    getWidth(): int;
    /**
     * Returns the current zoom level.
     *
     * @returns Current zoom level
     */
    getZoomLevel(): int;
    /**
     * Applies the grayscale filter to the image.
     */
    grayscale(
      /**
       * Filter strength. Applicable range of values is from 0 to 100
       */
      iValue: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Inverts the colors of the image.
     */
    invert(
      /**
       * Filter strength. Applicable range of values is from 0 to 100
       */
      iValue: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Changes the state to an action history item at the given index.
     */
    jumpToHistory(
      /**
       * Index of the history item. Newest state has the index of 0, the most recent change has the index of 1.
       * The index increases with each preceding action.
       */
      iIndex: int
    ): void;
    /**
     * Opens Save As dialog in browser.
     */
    openSaveDialog(
      /**
       * File name prefilled in the the save as dialog. Default name is "image".
       */
      sFileName?: string,
      /**
       * File format of the returned image Blob. If the format is not specified, either the original format of
       * the image is used or PNG, if the original format is not supported by the browser's `canvas.toDataURL`
       * method.
       */
      sFormat?: ImageFormat | keyof typeof ImageFormat,
      /**
       * Only applied when JPEG format is used. Quality of the returned image, ranging from 0 to 1. 0 means highly
       * compressed image, 1 means uncompressed image. When no value is provided, canvas default compression level
       * is used.
       */
      fQuality?: float
    ): void;
    /**
     * Crops the image to a new rectangle-shaped image based on the specified pixel parameters.
     */
    rectangleCrop(
      /**
       * X coordinate of the top left corner of the crop area
       */
      iX: int,
      /**
       * Y coordinate of the top left corner of the crop area
       */
      iY: int,
      /**
       * Width of the crop area
       */
      iWidth: int,
      /**
       * Height of the crop area
       */
      iHeight: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Goes one action forward in the action history, if possible.
     */
    redo(): void;
    /**
     * Rotates the image to the specified angle, ranging from -360 to 360 degrees.
     * Use a positive value for clockwise rotation and a negative value for counterclockwise rotation.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    rotate(
      /**
       * Number of degrees to rotate the image. Applicable range of values is from -360 to 360
       */
      iDegrees: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): ImageEditor;
    /**
     * Applies the saturation filter to the image.
     */
    saturate(
      /**
       * Amount of the filter strength. Applicable range of values is from 0 to 500
       */
      iValue: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Applies the sepia filter to the image.
     */
    sepia(
      /**
       * Filter strength. Applicable range of values is from 0 to 100
       */
      iValue: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): void;
    /**
     * Sets the crop area to the position and size.
     * The size is expected to be in pixel values corresponding to the actual size of the image.
     * Crop area is automatically constrained, so that it doesn't overflow the edges of the image.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    setCropArea(
      /**
       * X coordinate of the top left corner of the crop area
       */
      iX: int,
      /**
       * Y coordinate of the top left corner of the crop area
       */
      iY: int,
      /**
       * Width of the crop area
       */
      iWidth: int,
      /**
       * Height of the crop area
       */
      iHeight: int
    ): ImageEditor;
    /**
     * Sets the size of the crop area to comply with the specified aspect ratio.
     * Centers the crop area, so that there is always some space from the edges of the image.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    setCropAreaByRatio(
      /**
       * Ratio width
       */
      iWidth: int,
      /**
       * Ratio height
       */
      iHeight: int
    ): ImageEditor;
    /**
     * Resizes the crop area to the specified height and width.
     * The size is expected to be in pixel values corresponding to the actual size of the image.
     * Crop area is automatically constrained, so that it doesn't overflow the edges of the image.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    setCropAreaBySize(
      /**
       * Width of the cropping area
       */
      iWidth: int,
      /**
       * Height of the cropping area
       */
      iHeight: int
    ): ImageEditor;
    /**
     * Sets the size of the crop area to comply with the aspect ratio of the loaded custom shape.
     * Centers the crop area, so that there is always some space from the edges of the image.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    setCustomShapeCropAreaRatio(): ImageEditor;
    /**
     * Sets a new value for property {@link #getCustomShapeSrc customShapeSrc}.
     *
     * Image source for the custom shape used in custom shape cropping.
     * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
     * supported by the <img> HTML tag.
     * **Note:** In Internet Explorer, `customShape` doesn't support SVG files and will throw and exception
     * if SVG files are used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCustomShapeSrc(
      /**
       * New value for property `customShapeSrc`
       */
      oCustomShapeSrc?: any
    ): this;
    /**
     * Sets the height of the image in pixels.
     * If the property `keepResizeAspectRatio` is set to `true`, changes the current width as well (even in
     * the preview mode).
     *
     * @returns instance of the ImageEditor for method chaining
     */
    setHeight(
      /**
       * New height of the image in pixels
       */
      iHeight: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): ImageEditor;
    /**
     * Sets a new value for property {@link #getKeepCropAspectRatio keepCropAspectRatio}.
     *
     * Defines whether aspect ratio should be kept when the crop area is expanded or shrunk in the `CropRectangle`
     * or `CropEllipse` modes ({@link sap.suite.ui.commons.ImageEditorMode}).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKeepCropAspectRatio(
      /**
       * New value for property `keepCropAspectRatio`
       */
      bKeepCropAspectRatio?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getKeepResizeAspectRatio keepResizeAspectRatio}.
     *
     * Defines whether aspect ratio should be kept when the image is resized in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode})
     * or using the {@link #setWidth} or {@link #setHeight} methods.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKeepResizeAspectRatio(
      /**
       * New value for property `keepResizeAspectRatio`
       */
      bKeepResizeAspectRatio?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Image editor mode.
     * Four modes are available: resize mode, crop to rectangle mode, crop to circle mode, and display image
     * mode (default).
     * The default mode displays the image to be edited.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ImageEditorMode | keyof typeof ImageEditorMode
    ): this;
    /**
     * Sets a new value for property {@link #getScaleCropArea scaleCropArea}.
     *
     * Defines the behavior of the crop area when zooming in or out.
     * If set to `true`, the crop area is scaled up or down when the zoom level is changed.
     * If set to `false`, the crop area remains unchanged and keeps its size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScaleCropArea(
      /**
       * New value for property `scaleCropArea`
       */
      bScaleCropArea?: boolean
    ): this;
    /**
     * Sets the size of the image in pixels.
     *
     * @returns Instance of the ImageEditor for method chaining
     */
    setSize(
      /**
       * New width of the image
       */
      iWidth: int,
      /**
       * New height of the image
       */
      iHeight: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): ImageEditor;
    /**
     * Sets a new value for property {@link #getSrc src}.
     *
     * Image source.
     * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
     * supported by the <img> HTML tag.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSrc(
      /**
       * New value for property `src`
       */
      oSrc?: any
    ): this;
    /**
     * Sets the width of the image in pixels.
     * If the property `keepResizeAspectRatio` is set to `true`, changes the current image height as well (even
     * in preview state).
     *
     * @returns instance of the ImageEditor for method chaining
     */
    setWidth(
      /**
       * New width of the image in pixels
       */
      iWidth: int,
      /**
       * Indicates whether to show this action in preview only (`true`) or record it in action history as well
       * (`false`)
       */
      bPreview: boolean
    ): ImageEditor;
    /**
     * Goes one action back in the action history, if possible.
     */
    undo(): void;
    /**
     * Zooms in or out to the specified zoom level.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    zoom(
      /**
       * Level of zoom
       */
      fZoom: float,
      /**
       * Map which contains following parameters properties:
       */
      mParameters?: {
        /**
         * x position in the image from/to which the zoom should happen
         */
        x?: number;
        /**
         * y position in the image from/to which the zoom should happen
         */
        y?: number;
      }
    ): ImageEditor;
    /**
     * Zooms in one step closer.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    zoomIn(
      /**
       * Map that contains following parameters properties:
       */
      mParameters?: {
        /**
         * x position from/to which the zoom should happen
         */
        x?: number;
        /**
         * y position from/to which the zoom should happen
         */
        y?: number;
      }
    ): ImageEditor;
    /**
     * Zooms out one step further.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    zoomOut(
      /**
       * Map that contains following parameters properties:
       */
      mParameters?: {
        /**
         * x position from/to which the zoom should happen
         */
        x?: number;
        /**
         * y position from/to which the zoom should happen
         */
        y?: number;
      }
    ): ImageEditor;
    /**
     * Fits the image into the currently visible area. This method can only be called after the image is loaded
     * and rendered.
     *
     * @returns instance of the ImageEditor for method chaining
     */
    zoomToFit(): ImageEditor;
  }
  export default ImageEditor;

  export interface $ImageEditorSettings extends $ControlSettings {
    /**
     * Image source.
     * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
     * supported by the <img> HTML tag.
     */
    src?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Image source for the custom shape used in custom shape cropping.
     * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
     * supported by the <img> HTML tag.
     * **Note:** In Internet Explorer, `customShape` doesn't support SVG files and will throw and exception
     * if SVG files are used.
     */
    customShapeSrc?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Image editor mode.
     * Four modes are available: resize mode, crop to rectangle mode, crop to circle mode, and display image
     * mode (default).
     * The default mode displays the image to be edited.
     */
    mode?:
      | (ImageEditorMode | keyof typeof ImageEditorMode)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines whether aspect ratio should be kept when the crop area is expanded or shrunk in the `CropRectangle`
     * or `CropEllipse` modes ({@link sap.suite.ui.commons.ImageEditorMode}).
     */
    keepCropAspectRatio?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether aspect ratio should be kept when the image is resized in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode})
     * or using the {@link #setWidth} or {@link #setHeight} methods.
     */
    keepResizeAspectRatio?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the behavior of the crop area when zooming in or out.
     * If set to `true`, the crop area is scaled up or down when the zoom level is changed.
     * If set to `false`, the crop area remains unchanged and keeps its size.
     */
    scaleCropArea?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * This event is fired after the image specified in the `src` property is successfully loaded.
     */
    loaded?: (oEvent: Event) => void;

    /**
     * This event is fired if there is an error loading the image specified in the `src` property, for example,
     * when the URL is unreachable.
     */
    error?: (oEvent: Event) => void;

    /**
     * This event is fired after the image specified in the `customShapeSrc` property is successfully loaded.
     */
    customShapeLoaded?: (oEvent: Event) => void;

    /**
     * This event is fired if there is an error loading the image specified in the `customShapeSrc` property,
     * for example, when the URL is unreachable.
     */
    customShapeError?: (oEvent: Event) => void;

    /**
     * This event is fired when the size of the image is changed by the user while in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
     */
    sizeChanged?: (
      oEvent: Event<$ImageEditorSizeChangedEventParameters>
    ) => void;

    /**
     * This event is fired when the size of the crop area is changed by the user while in the `CropRectangle`
     * or `CropEllipse` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
     */
    cropAreaChanged?: (
      oEvent: Event<$ImageEditorCropAreaChangedEventParameters>
    ) => void;

    /**
     * This event is fired when the zoom level is changed by the user interaction.
     */
    zoomChanged?: (
      oEvent: Event<$ImageEditorZoomChangedEventParameters>
    ) => void;

    /**
     * This event is fired each time there is a change in the history of recent actions or in the recent actions
     * history index.
     * This may happen either when an action is performed on the image or when the {@link #undo}, {@link #redo},
     * or {@link #jumpToHistory} methods are called.
     */
    historyChanged?: (oEvent: Event) => void;
  }

  export interface $ImageEditorCropAreaChangedEventParameters {
    cropArea?: object;

    originalCropArea?: object;
  }

  export interface $ImageEditorCustomShapeErrorEventParameters {}

  export interface $ImageEditorCustomShapeLoadedEventParameters {}

  export interface $ImageEditorErrorEventParameters {}

  export interface $ImageEditorHistoryChangedEventParameters {}

  export interface $ImageEditorLoadedEventParameters {}

  export interface $ImageEditorSizeChangedEventParameters {
    width?: int;

    height?: int;

    originalWidth?: int;

    originalHeight?: int;
  }

  export interface $ImageEditorZoomChangedEventParameters {
    zoom?: int;
  }
}

declare module "sap/suite/ui/commons/imageeditor/ImageEditorContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import CustomSizeItem from "sap/suite/ui/commons/imageeditor/CustomSizeItem";

  import {
    ImageEditorContainerButton,
    ImageEditorContainerMode,
  } from "sap/suite/ui/commons/library";

  import ImageEditor from "sap/suite/ui/commons/imageeditor/ImageEditor";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import OverflowToolbar from "sap/m/OverflowToolbar";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.66.0
   *
   * This control acts as a wrapper around the {@link sap.suite.ui.commons.imageeditor.ImageEditor} control.
   * It provides additional image editing capabilities for the convenience of your users.
   *
   * Toolbar Customization: There are two ways to customize the toolbar, but they cannot be used together:
   *
   * 	 - Use `enabledButtons property to select the order and visibility of the buttons provided by
   *     the ImageEditorContainer` control. You can use the `customToolbarControls` aggregation to add custom
   *     controls that will be rendered in the toolbar.
   * 	 - Use the {@link #getToolbar} method together with the {@link #getToolbarIds} method to customize the
   *     toolbar as you need.
   * The changes made to the toolbar will be kept unless some of the methods from previous approach are used.
   * The previous approach involves rerendering of the toolbar, which causes all changes to be lost. **Note:**
   * If you use this approach, make sure that you make your changes to the mobile toolbars as well, so that
   * your application can be used on mobile devices.
   * There are three mobile toolbars available:
   * 	The header toolbar that can be customized using the method {@link #getMobileHeaderToolbar} and is intended
   * for custom buttons.
   * 	 - The zoom toolbar contains zoom functionality that can be customized using the methods {@link #getMobileZoomToolbar }
   *     and {@link #getMobileZoomToolbarIds}.
   * 	 - The footer toolbar that usually includes the `ImageEditorContainer` buttons and can be customized
   *     using the methods {@link #getMobileFooterToolbar} and {@link #getMobileFooterToolbarIds}.
   */
  class ImageEditorContainer extends Control {
    /**
     * Constructor for a new ImageEditorContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageEditorContainerSettings
    );
    /**
     * Constructor for a new ImageEditorContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageEditorContainerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ImageEditorContainer with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ImageEditorContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ImageEditorContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some customEllipseCropItem to the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomEllipseCropItem(
      /**
       * The customEllipseCropItem to add; if empty, nothing is inserted
       */
      oCustomEllipseCropItem: CustomSizeItem
    ): this;
    /**
     * Adds some customRectangleCropItem to the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomRectangleCropItem(
      /**
       * The customRectangleCropItem to add; if empty, nothing is inserted
       */
      oCustomRectangleCropItem: CustomSizeItem
    ): this;
    /**
     * Adds some customResizeItem to the aggregation {@link #getCustomResizeItems customResizeItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomResizeItem(
      /**
       * The customResizeItem to add; if empty, nothing is inserted
       */
      oCustomResizeItem: CustomSizeItem
    ): this;
    /**
     * Adds some customToolbarControl to the aggregation {@link #getCustomToolbarControls customToolbarControls}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomToolbarControl(
      /**
       * The customToolbarControl to add; if empty, nothing is inserted
       */
      oCustomToolbarControl: Control
    ): this;
    /**
     * Destroys all the customEllipseCropItems in the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomEllipseCropItems(): this;
    /**
     * Destroys all the customRectangleCropItems in the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomRectangleCropItems(): this;
    /**
     * Destroys all the customResizeItems in the aggregation {@link #getCustomResizeItems customResizeItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomResizeItems(): this;
    /**
     * Destroys all the customToolbarControls in the aggregation {@link #getCustomToolbarControls customToolbarControls}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomToolbarControls(): this;
    /**
     * Destroys the imageEditor in the aggregation {@link #getImageEditor imageEditor}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyImageEditor(): this;
    /**
     * Gets content of aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
     *
     * Custom items for Ellipse Crop option panel.
     */
    getCustomEllipseCropItems(): CustomSizeItem[];
    /**
     * Gets content of aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
     *
     * Custom items for Rectangle Crop option panel.
     */
    getCustomRectangleCropItems(): CustomSizeItem[];
    /**
     * Gets content of aggregation {@link #getCustomResizeItems customResizeItems}.
     *
     * Custom items for Resize option panel.
     */
    getCustomResizeItems(): CustomSizeItem[];
    /**
     * Gets content of aggregation {@link #getCustomToolbarControls customToolbarControls}.
     *
     * Custom controls that are added into the toolbar of `ImageEditorContainer`. Only use controls that are
     * supported by {@link sap.m.OverflowToolbar}.
     */
    getCustomToolbarControls(): Control[];
    /**
     * Gets current value of property {@link #getEnabledButtons enabledButtons}.
     *
     * Controls order and availability of the buttons in the header panel of ImageEditorContainer.
     *
     * Default value is `[Filter, Transform, Crop]`.
     *
     * @returns Value of property `enabledButtons`
     */
    getEnabledButtons(): Array<
      ImageEditorContainerButton | keyof typeof ImageEditorContainerButton
    >;
    /**
     * Gets content of aggregation {@link #getImageEditor imageEditor}.
     *
     * {@link sap.suite.ui.commons.imageeditor.ImageEditor} containing the image for editing.
     * If no {@link sap.suite.ui.commons.imageeditor.ImageEditor} is specified, the `ImageEditorContainer` has
     * no effect.
     */
    getImageEditor(): ImageEditor;
    /**
     * Returns the mobile footer toolbar of the `ImageEditorContainer` for customization of its content.
     *
     * @returns Mobile footer toolbar
     */
    getMobileFooterToolbar(): OverflowToolbar;
    /**
     * Returns IDs of the default items in the mobile footer toolbar. Can be used for toolbar customization.
     *
     * @returns IDs of the default items in the header toolbar
     */
    getMobileFooterToolbarIds(): {
      filter: string;

      crop: string;

      transform: string;

      undo: string;

      history: string;

      apply: string;
    };
    /**
     * Returns the mobile header toolbar of the `ImageEditorContainer` for customization of its content.
     *
     * @returns Mobile header toolbar
     */
    getMobileHeaderToolbar(): OverflowToolbar;
    /**
     * @SINCE 1.68
     *
     * Returns the mobile zoom toolbar of the `ImageEditorContainer` for customization of its content.
     *
     * @returns Mobile zoom toolbar
     */
    getMobileZoomToolbar(): OverflowToolbar;
    /**
     * @SINCE 1.68
     *
     * Returns IDs of the default items in the mobile zoom toolbar. Can be used for toolbar customization.
     *
     * @returns IDs of the default items in the header toolbar
     */
    getMobileZoomToolbarIds(): {
      zoomIn: string;

      zoomOut: string;

      zoomToFit: string;

      zoomLabel: string;

      scaleSwitch: string;

      scaleLabel: string;
    };
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Image editor container mode.
     * Three modes are available: transform mode, crop mode, and filter mode (default).
     * The default mode provides filters for image editing: brightness, contrast, saturation, sepia grayscale,
     * and others.
     *
     * Default value is `Filter`.
     *
     * @returns Value of property `mode`
     */
    getMode(): ImageEditorContainerMode | keyof typeof ImageEditorContainerMode;
    /**
     * Returns the header toolbar of the `ImageEditorContainer` for customization of its content.
     *
     * @returns Header toolbar
     */
    getToolbar(): OverflowToolbar;
    /**
     * Returns IDs of the default items in the header toolbar. Can be used for toolbar customization.
     *
     * @returns Ids of the default items in the header toolbar
     */
    getToolbarIds(): {
      filter: string;

      crop: string;

      transform: string;

      undo: string;

      history: string;

      zoomIn: string;

      zoomOut: string;

      zoomToFit: string;

      zoomLabel: string;

      separator: string;
    };
    /**
     * Checks for the provided `sap.suite.ui.commons.imageeditor.CustomSizeItem` in the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomEllipseCropItem(
      /**
       * The customEllipseCropItem whose index is looked for
       */
      oCustomEllipseCropItem: CustomSizeItem
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.imageeditor.CustomSizeItem` in the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomRectangleCropItem(
      /**
       * The customRectangleCropItem whose index is looked for
       */
      oCustomRectangleCropItem: CustomSizeItem
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.imageeditor.CustomSizeItem` in the aggregation {@link #getCustomResizeItems customResizeItems}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomResizeItem(
      /**
       * The customResizeItem whose index is looked for
       */
      oCustomResizeItem: CustomSizeItem
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getCustomToolbarControls customToolbarControls}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomToolbarControl(
      /**
       * The customToolbarControl whose index is looked for
       */
      oCustomToolbarControl: Control
    ): int;
    /**
     * Inserts a customEllipseCropItem into the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomEllipseCropItem(
      /**
       * The customEllipseCropItem to insert; if empty, nothing is inserted
       */
      oCustomEllipseCropItem: CustomSizeItem,
      /**
       * The `0`-based index the customEllipseCropItem should be inserted at; for a negative value of `iIndex`,
       * the customEllipseCropItem is inserted at position 0; for a value greater than the current size of the
       * aggregation, the customEllipseCropItem is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a customRectangleCropItem into the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomRectangleCropItem(
      /**
       * The customRectangleCropItem to insert; if empty, nothing is inserted
       */
      oCustomRectangleCropItem: CustomSizeItem,
      /**
       * The `0`-based index the customRectangleCropItem should be inserted at; for a negative value of `iIndex`,
       * the customRectangleCropItem is inserted at position 0; for a value greater than the current size of the
       * aggregation, the customRectangleCropItem is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a customResizeItem into the aggregation {@link #getCustomResizeItems customResizeItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomResizeItem(
      /**
       * The customResizeItem to insert; if empty, nothing is inserted
       */
      oCustomResizeItem: CustomSizeItem,
      /**
       * The `0`-based index the customResizeItem should be inserted at; for a negative value of `iIndex`, the
       * customResizeItem is inserted at position 0; for a value greater than the current size of the aggregation,
       * the customResizeItem is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a customToolbarControl into the aggregation {@link #getCustomToolbarControls customToolbarControls}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomToolbarControl(
      /**
       * The customToolbarControl to insert; if empty, nothing is inserted
       */
      oCustomToolbarControl: Control,
      /**
       * The `0`-based index the customToolbarControl should be inserted at; for a negative value of `iIndex`,
       * the customToolbarControl is inserted at position 0; for a value greater than the current size of the
       * aggregation, the customToolbarControl is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomEllipseCropItems(): CustomSizeItem[];
    /**
     * Removes all the controls from the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomRectangleCropItems(): CustomSizeItem[];
    /**
     * Removes all the controls from the aggregation {@link #getCustomResizeItems customResizeItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomResizeItems(): CustomSizeItem[];
    /**
     * Removes all the controls from the aggregation {@link #getCustomToolbarControls customToolbarControls}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomToolbarControls(): Control[];
    /**
     * Removes a customEllipseCropItem from the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
     *
     * @returns The removed customEllipseCropItem or `null`
     */
    removeCustomEllipseCropItem(
      /**
       * The customEllipseCropItem to remove or its index or id
       */
      vCustomEllipseCropItem: int | string | CustomSizeItem
    ): CustomSizeItem | null;
    /**
     * Removes a customRectangleCropItem from the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
     *
     * @returns The removed customRectangleCropItem or `null`
     */
    removeCustomRectangleCropItem(
      /**
       * The customRectangleCropItem to remove or its index or id
       */
      vCustomRectangleCropItem: int | string | CustomSizeItem
    ): CustomSizeItem | null;
    /**
     * Removes a customResizeItem from the aggregation {@link #getCustomResizeItems customResizeItems}.
     *
     * @returns The removed customResizeItem or `null`
     */
    removeCustomResizeItem(
      /**
       * The customResizeItem to remove or its index or id
       */
      vCustomResizeItem: int | string | CustomSizeItem
    ): CustomSizeItem | null;
    /**
     * Removes a customToolbarControl from the aggregation {@link #getCustomToolbarControls customToolbarControls}.
     *
     * @returns The removed customToolbarControl or `null`
     */
    removeCustomToolbarControl(
      /**
       * The customToolbarControl to remove or its index or id
       */
      vCustomToolbarControl: int | string | Control
    ): Control | null;
    /**
     * Sets a new value for property {@link #getEnabledButtons enabledButtons}.
     *
     * Controls order and availability of the buttons in the header panel of ImageEditorContainer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[Filter, Transform, Crop]`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabledButtons(
      /**
       * New value for property `enabledButtons`
       */
      sEnabledButtons?: Array<
        ImageEditorContainerButton | keyof typeof ImageEditorContainerButton
      >
    ): this;
    /**
     * Sets the aggregated {@link #getImageEditor imageEditor}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImageEditor(
      /**
       * The imageEditor to set
       */
      oImageEditor: ImageEditor
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Image editor container mode.
     * Three modes are available: transform mode, crop mode, and filter mode (default).
     * The default mode provides filters for image editing: brightness, contrast, saturation, sepia grayscale,
     * and others.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Filter`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ImageEditorContainerMode | keyof typeof ImageEditorContainerMode
    ): this;
  }
  export default ImageEditorContainer;

  export interface $ImageEditorContainerSettings extends $ControlSettings {
    /**
     * Image editor container mode.
     * Three modes are available: transform mode, crop mode, and filter mode (default).
     * The default mode provides filters for image editing: brightness, contrast, saturation, sepia grayscale,
     * and others.
     */
    mode?:
      | (ImageEditorContainerMode | keyof typeof ImageEditorContainerMode)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Controls order and availability of the buttons in the header panel of ImageEditorContainer.
     */
    enabledButtons?:
      | Array<
          ImageEditorContainerButton | keyof typeof ImageEditorContainerButton
        >
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * {@link sap.suite.ui.commons.imageeditor.ImageEditor} containing the image for editing.
     * If no {@link sap.suite.ui.commons.imageeditor.ImageEditor} is specified, the `ImageEditorContainer` has
     * no effect.
     */
    imageEditor?: ImageEditor;

    /**
     * Custom controls that are added into the toolbar of `ImageEditorContainer`. Only use controls that are
     * supported by {@link sap.m.OverflowToolbar}.
     */
    customToolbarControls?:
      | Control[]
      | Control
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Custom items for Resize option panel.
     */
    customResizeItems?:
      | CustomSizeItem[]
      | CustomSizeItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Custom items for Rectangle Crop option panel.
     */
    customRectangleCropItems?:
      | CustomSizeItem[]
      | CustomSizeItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Custom items for Ellipse Crop option panel.
     */
    customEllipseCropItems?:
      | CustomSizeItem[]
      | CustomSizeItem
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/imageeditor/ImageEditorResponsiveContainer" {
  import {
    default as ImageEditorContainer,
    $ImageEditorContainerSettings,
  } from "sap/suite/ui/commons/imageeditor/ImageEditorContainer";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.68.0
   *
   * This control acts as a wrapper around the {@link sap.suite.ui.commons.imageeditor.ImageEditor} control.
   * It provides additional image editing capabilities for the convenience of your users.
   * This container is responsive and is rendered as a button on mobile devices.
   */
  class ImageEditorResponsiveContainer extends ImageEditorContainer {
    /**
     * Constructor for a new ImageEditorResponsiveContainer.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageEditorResponsiveContainerSettings
    );
    /**
     * Constructor for a new ImageEditorResponsiveContainer.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageEditorResponsiveContainerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ImageEditorResponsiveContainer with
     * name `sClassName` and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ImageEditorResponsiveContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ImageEditorResponsiveContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default ImageEditorResponsiveContainer;

  export interface $ImageEditorResponsiveContainerSettings
    extends $ImageEditorContainerSettings {}
}

declare module "sap/suite/ui/commons/imageeditor/ResizeHistoryItem" {
  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.66.0
   *
   * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
   * was created by one of the methods that change the size of the image, such as {@link sap.suite.ui.commons.imageeditor.ImageEditor#setSize},
   * {@link sap.suite.ui.commons.imageeditor.ImageEditor#setWidth}, and {@link sap.suite.ui.commons.imageeditor.ImageEditor#setHeight}.
   */
  class ResizeHistoryItem extends HistoryItem {
    /**
     * Constructor for a new ResizeHistoryItem.
     */
    constructor(
      /**
       * Property bag
       */
      mProperties: {
        /**
         * Width of the image
         */
        width: int;
        /**
         * Height of the image
         */
        height: int;
        /**
         * Previous width of the image
         */
        oldWidth: int;
        /**
         * Previous height of the image
         */
        oldHeight: int;
      }
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ResizeHistoryItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ResizeHistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ResizeHistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default ResizeHistoryItem;
}

declare module "sap/suite/ui/commons/imageeditor/RotateHistoryItem" {
  import HistoryItem from "sap/suite/ui/commons/imageeditor/HistoryItem";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.66.0
   *
   * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
   * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#rotate} method.
   */
  class RotateHistoryItem extends HistoryItem {
    /**
     * Constructor for a new RotateHistoryItem.
     */
    constructor(
      /**
       * Property bag
       */
      mProperties: {
        /**
         * Number of deegress
         */
        degrees: int;
      }
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.imageeditor.RotateHistoryItem with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RotateHistoryItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.imageeditor.RotateHistoryItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default RotateHistoryItem;
}

declare module "sap/suite/ui/commons/InfoTile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { InfoTileSize, LoadState } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
   *
   * The tile control that displays the title, description, footer, and customizable main area.
   */
  class InfoTile extends Control {
    /**
     * Constructor for a new InfoTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $InfoTileSettings
    );
    /**
     * Constructor for a new InfoTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $InfoTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.InfoTile with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, InfoTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.InfoTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.InfoTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.InfoTile` itself.
     *
     * The event is fired when the user chooses the tile.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.InfoTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.InfoTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.InfoTile` itself.
     *
     * The event is fired when the user chooses the tile.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.InfoTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.InfoTile`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The switchable view that depends on the tile type.
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Shows the description of the selected tile.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getFooter footer}.
     *
     * The footer text of the tile.
     *
     * @returns Value of property `footer`
     */
    getFooter(): string;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Updates the size of the tile. If not set then the default size is applied based on the device tile.
     *
     * Default value is `"Auto"`.
     *
     * @returns Value of property `size`
     */
    getSize(): InfoTileSize | keyof typeof InfoTileSize;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Indicates the load status.
     *
     * Default value is `"Loading"`.
     *
     * @returns Value of property `state`
     */
    getState(): LoadState | keyof typeof LoadState;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the tile.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Shows the description of the selected tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFooter footer}.
     *
     * The footer text of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFooter(
      /**
       * New value for property `footer`
       */
      sFooter?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Updates the size of the tile. If not set then the default size is applied based on the device tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: InfoTileSize | keyof typeof InfoTileSize
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * Indicates the load status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Loading"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: LoadState | keyof typeof LoadState
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default InfoTile;

  export interface $InfoTileSettings extends $ControlSettings {
    /**
     * Shows the description of the selected tile.
     */
    description?: string | PropertyBindingInfo;

    /**
     * The title of the tile.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The footer text of the tile.
     */
    footer?: string | PropertyBindingInfo;

    /**
     * Updates the size of the tile. If not set then the default size is applied based on the device tile.
     */
    size?:
      | (InfoTileSize | keyof typeof InfoTileSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Indicates the load status.
     */
    state?:
      | (LoadState | keyof typeof LoadState)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The switchable view that depends on the tile type.
     */
    content?: Control;

    /**
     * The event is fired when the user chooses the tile.
     */
    press?: (oEvent: Event) => void;
  }

  export interface $InfoTilePressEventParameters {}
}

declare module "sap/suite/ui/commons/JamContent" {
  import {
    default as FeedContent,
    $FeedContentSettings,
  } from "sap/m/FeedContent";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.m.FeedContent.
   *
   * This control displays the jam content text, subheader, and numeric value in a tile.
   */
  class JamContent extends FeedContent {
    /**
     * Constructor for a new JamContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.FeedContent#constructor sap.m.FeedContent }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $JamContentSettings
    );
    /**
     * Constructor for a new JamContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.FeedContent#constructor sap.m.FeedContent }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $JamContentSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.JamContent with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.FeedContent.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, JamContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.JamContent.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default JamContent;

  export interface $JamContentSettings extends $FeedContentSettings {}
}

declare module "sap/suite/ui/commons/KpiTile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ValueStatus } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Numeric content or any other standard Fiori control should be
   * used instead.
   *
   * This control is used in UnifiedThingInspector to display object-related KPIs in a factsheet.
   */
  class KpiTile extends Control {
    /**
     * Constructor for a new KpiTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $KpiTileSettings
    );
    /**
     * Constructor for a new KpiTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $KpiTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.KpiTile with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, KpiTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.KpiTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * The Description field.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getDoubleFontSize doubleFontSize}.
     *
     * If true, the value text will have 2 rem, if false - 1 rem.
     *
     * Default value is `true`.
     *
     * @returns Value of property `doubleFontSize`
     */
    getDoubleFontSize(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The Value field.
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueScale valueScale}.
     *
     * The scale of a value.
     *
     * @returns Value of property `valueScale`
     */
    getValueScale(): string;
    /**
     * Gets current value of property {@link #getValueStatus valueStatus}.
     *
     * The status color of the value. Depending on the status the tile is displayed in different colors.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Value of property `valueStatus`
     */
    getValueStatus(): ValueStatus | keyof typeof ValueStatus;
    /**
     * Gets current value of property {@link #getValueUnit valueUnit}.
     *
     * The percent sign, currency symbol, or unit for a value.
     *
     * @returns Value of property `valueUnit`
     */
    getValueUnit(): string;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * The Description field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDoubleFontSize doubleFontSize}.
     *
     * If true, the value text will have 2 rem, if false - 1 rem.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDoubleFontSize(
      /**
       * New value for property `doubleFontSize`
       */
      bDoubleFontSize?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The Value field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueScale valueScale}.
     *
     * The scale of a value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueScale(
      /**
       * New value for property `valueScale`
       */
      sValueScale?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueStatus valueStatus}.
     *
     * The status color of the value. Depending on the status the tile is displayed in different colors.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueStatus(
      /**
       * New value for property `valueStatus`
       */
      sValueStatus?: ValueStatus | keyof typeof ValueStatus
    ): this;
    /**
     * Sets a new value for property {@link #getValueUnit valueUnit}.
     *
     * The percent sign, currency symbol, or unit for a value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueUnit(
      /**
       * New value for property `valueUnit`
       */
      sValueUnit?: string
    ): this;
  }
  export default KpiTile;

  export interface $KpiTileSettings extends $ControlSettings {
    /**
     * The Value field.
     */
    value?: string | PropertyBindingInfo;

    /**
     * The Description field.
     */
    description?: string | PropertyBindingInfo;

    /**
     * If true, the value text will have 2 rem, if false - 1 rem.
     */
    doubleFontSize?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The percent sign, currency symbol, or unit for a value.
     */
    valueUnit?: string | PropertyBindingInfo;

    /**
     * The scale of a value.
     */
    valueScale?: string | PropertyBindingInfo;

    /**
     * The status color of the value. Depending on the status the tile is displayed in different colors.
     */
    valueStatus?:
      | (ValueStatus | keyof typeof ValueStatus)
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/LaunchTile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - Deprecated.
   *
   * This control launches a URL.
   */
  class LaunchTile extends Control {
    /**
     * Constructor for a new LaunchTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LaunchTileSettings
    );
    /**
     * Constructor for a new LaunchTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LaunchTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.LaunchTile with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LaunchTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.LaunchTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.LaunchTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.LaunchTile` itself.
     *
     * The event fired when the user clicks on the control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LaunchTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.LaunchTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.LaunchTile` itself.
     *
     * The event fired when the user clicks on the control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LaunchTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.LaunchTile`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon associated with the launch destination.
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getLink link}.
     *
     * The launch destination.
     *
     * @returns Value of property `link`
     */
    getLink(): URI;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Descriptive title of the launch destination.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon associated with the launch destination.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getLink link}.
     *
     * The launch destination.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLink(
      /**
       * New value for property `link`
       */
      sLink?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Descriptive title of the launch destination.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default LaunchTile;

  export interface $LaunchTileSettings extends $ControlSettings {
    /**
     * Descriptive title of the launch destination.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Icon associated with the launch destination.
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The launch destination.
     */
    link?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The event fired when the user clicks on the control.
     */
    press?: (oEvent: Event) => void;
  }

  export interface $LaunchTilePressEventParameters {}
}

declare module "sap/suite/ui/commons/LinkActionSheet" {
  import {
    default as ActionSheet,
    $ActionSheetSettings,
  } from "sap/m/ActionSheet";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * This control contains one or more sap.m.Button controls or sap.ui.commons.Link controls. The LinkActionSheet
   * control is closed if the user chooses one of the buttons or links. It looks similar to sap.m.Dialog in
   * iPhone and Android, and to sap.m.Popover in iPad.
   */
  class LinkActionSheet extends ActionSheet {
    /**
     * Constructor for a new LinkActionSheet.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LinkActionSheetSettings
    );
    /**
     * Constructor for a new LinkActionSheet.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LinkActionSheetSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.LinkActionSheet with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ActionSheet.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LinkActionSheet>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.LinkActionSheet.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.suite.ui.commons.LinkActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.LinkActionSheet` itself.
     *
     * The event is fired when the user chooses any item.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachItemPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$LinkActionSheetItemPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LinkActionSheet`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.suite.ui.commons.LinkActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.LinkActionSheet` itself.
     *
     * The event is fired when the user chooses any item.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachItemPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$LinkActionSheetItemPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LinkActionSheet`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemPress itemPress} event of this `sap.suite.ui.commons.LinkActionSheet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachItemPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$LinkActionSheetItemPressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:itemPress itemPress} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireItemPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $LinkActionSheetItemPressEventParameters
    ): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * These buttons or links are added to the content area in the LinkActionSheet control. If the user chooses
     * a button or a link, the LinkActionSheet is closed before the event listener is called.
     */
    getItems(): Control[];
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Control
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: Control,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllItems(): Control[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     *
     * @returns The removed item or `null`
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | Control
    ): Control | null;
  }
  export default LinkActionSheet;

  export interface $LinkActionSheetSettings extends $ActionSheetSettings {
    /**
     * These buttons or links are added to the content area in the LinkActionSheet control. If the user chooses
     * a button or a link, the LinkActionSheet is closed before the event listener is called.
     */
    items?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * The event is fired when the user chooses any item.
     */
    itemPress?: (
      oEvent: Event<$LinkActionSheetItemPressEventParameters>
    ) => void;
  }

  export interface $LinkActionSheetItemPressEventParameters {
    /**
     * The object that initiated the event.
     */
    item?: Control;
  }
}

declare module "sap/suite/ui/commons/MicroAreaChart" {
  import {
    default as AreaMicroChart,
    $AreaMicroChartSettings,
  } from "sap/suite/ui/microchart/AreaMicroChart";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChart.
   *
   * This control displays the history of values as a line mini chart or an area mini chart.
   */
  class MicroAreaChart extends AreaMicroChart {
    /**
     * Constructor for a new MicroAreaChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChart#constructor sap.suite.ui.microchart.AreaMicroChart }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartSettings
    );
    /**
     * Constructor for a new MicroAreaChart.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChart#constructor sap.suite.ui.microchart.AreaMicroChart }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChart with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChart.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MicroAreaChart>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChart.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default MicroAreaChart;

  export interface $MicroAreaChartSettings extends $AreaMicroChartSettings {}
}

declare module "sap/suite/ui/commons/MicroAreaChartItem" {
  import {
    default as AreaMicroChartItem,
    $AreaMicroChartItemSettings,
  } from "sap/suite/ui/microchart/AreaMicroChartItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChartItem.
   *
   * The configuration of the graphic element on the chart.
   */
  class MicroAreaChartItem extends AreaMicroChartItem {
    /**
     * Constructor for a new MicroAreaChartItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChartItem#constructor sap.suite.ui.microchart.AreaMicroChartItem }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartItemSettings
    );
    /**
     * Constructor for a new MicroAreaChartItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChartItem#constructor sap.suite.ui.microchart.AreaMicroChartItem }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartItem with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChartItem.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MicroAreaChartItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChartItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default MicroAreaChartItem;

  export interface $MicroAreaChartItemSettings
    extends $AreaMicroChartItemSettings {}
}

declare module "sap/suite/ui/commons/MicroAreaChartLabel" {
  import {
    default as AreaMicroChartLabel,
    $AreaMicroChartLabelSettings,
  } from "sap/suite/ui/microchart/AreaMicroChartLabel";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChartLabel.
   *
   * This element contains data for a label in MicroAreaChart control.
   */
  class MicroAreaChartLabel extends AreaMicroChartLabel {
    /**
     * Constructor for a new MicroAreaChartLabel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChartLabel#constructor sap.suite.ui.microchart.AreaMicroChartLabel }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartLabelSettings
    );
    /**
     * Constructor for a new MicroAreaChartLabel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChartLabel#constructor sap.suite.ui.microchart.AreaMicroChartLabel }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartLabelSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartLabel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChartLabel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MicroAreaChartLabel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChartLabel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default MicroAreaChartLabel;

  export interface $MicroAreaChartLabelSettings
    extends $AreaMicroChartLabelSettings {}
}

declare module "sap/suite/ui/commons/MicroAreaChartPoint" {
  import {
    default as AreaMicroChartPoint,
    $AreaMicroChartPointSettings,
  } from "sap/suite/ui/microchart/AreaMicroChartPoint";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChartPoint.
   *
   * This control contains data for the point.
   */
  class MicroAreaChartPoint extends AreaMicroChartPoint {
    /**
     * Constructor for a new MicroAreaChartPoint.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChartPoint#constructor sap.suite.ui.microchart.AreaMicroChartPoint }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartPointSettings
    );
    /**
     * Constructor for a new MicroAreaChartPoint.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.microchart.AreaMicroChartPoint#constructor sap.suite.ui.microchart.AreaMicroChartPoint }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MicroAreaChartPointSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartPoint with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChartPoint.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MicroAreaChartPoint>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChartPoint.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default MicroAreaChartPoint;

  export interface $MicroAreaChartPointSettings
    extends $AreaMicroChartPointSettings {}
}

declare module "sap/suite/ui/commons/MicroProcessFlow" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, CSSSize } from "sap/ui/core/library";

  import MicroProcessFlowItem from "sap/suite/ui/commons/MicroProcessFlowItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { MicroProcessFlowRenderType } from "sap/suite/ui/commons/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * The MicroProcessFlow control can be used to track the progress of a process.
   *  It is best used for linear processes, such as document, order, and approval flows, and can be embedded
   * in tiles, tables, and other containers.
   *
   *  To display more complex processes and workflows, use {@link sap.suite.ui.commons.ProcessFlow} instead.
   */
  class MicroProcessFlow extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new MicroProcessFlow.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MicroProcessFlow with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MicroProcessFlow>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MicroProcessFlow.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: MicroProcessFlowItem
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Gets current value of property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this control to be used by screen reader software.
     *
     * @returns Value of property `ariaLabel`
     */
    getAriaLabel(): string;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Holds the nodes and other content diplayed in the micro process flow.
     */
    getContent(): MicroProcessFlowItem[];
    /**
     * Gets current value of property {@link #getRenderType renderType}.
     *
     * Determines how the micro process flow should be rendered inside its parent container.
     * When the width of the parent container does not allow for all nodes in the micro process flow to be displayed,
     * you can wrap it inside the parent container or add scrolling icons.
     *
     * Default value is `Wrap`.
     *
     * @returns Value of property `renderType`
     */
    getRenderType():
      | MicroProcessFlowRenderType
      | keyof typeof MicroProcessFlowRenderType;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the micro process flow.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.suite.ui.commons.MicroProcessFlowItem` in the aggregation {@link #getContent content}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: MicroProcessFlowItem
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: MicroProcessFlowItem,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllContent(): MicroProcessFlowItem[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     *
     * @returns The removed content or `null`
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | MicroProcessFlowItem
    ): MicroProcessFlowItem | null;
    /**
     * Sets a new value for property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this control to be used by screen reader software.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAriaLabel(
      /**
       * New value for property `ariaLabel`
       */
      sAriaLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderType renderType}.
     *
     * Determines how the micro process flow should be rendered inside its parent container.
     * When the width of the parent container does not allow for all nodes in the micro process flow to be displayed,
     * you can wrap it inside the parent container or add scrolling icons.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Wrap`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderType(
      /**
       * New value for property `renderType`
       */
      sRenderType?:
        | MicroProcessFlowRenderType
        | keyof typeof MicroProcessFlowRenderType
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the micro process flow.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  export default MicroProcessFlow;

  export interface $MicroProcessFlowSettings extends $ControlSettings {
    /**
     * ARIA label for this control to be used by screen reader software.
     */
    ariaLabel?: string | PropertyBindingInfo;

    /**
     * Determines how the micro process flow should be rendered inside its parent container.
     * When the width of the parent container does not allow for all nodes in the micro process flow to be displayed,
     * you can wrap it inside the parent container or add scrolling icons.
     */
    renderType?:
      | (MicroProcessFlowRenderType | keyof typeof MicroProcessFlowRenderType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The width of the micro process flow.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Holds the nodes and other content diplayed in the micro process flow.
     */
    content?:
      | MicroProcessFlowItem[]
      | MicroProcessFlowItem
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/MicroProcessFlowItem" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ValueState, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Holds information about one node in the micro process flow.
   */
  class MicroProcessFlowItem extends Control {
    /**
     * Constructor for a new MicroProcessFlowItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $MicroProcessFlowItemSettings
    );
    /**
     * Constructor for a new MicroProcessFlowItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $MicroProcessFlowItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MicroProcessFlowItem with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MicroProcessFlowItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MicroProcessFlowItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MicroProcessFlowItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.MicroProcessFlowItem` itself.
     *
     * This event is fired when the user clicks or taps a node.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$MicroProcessFlowItemPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MicroProcessFlowItem`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MicroProcessFlowItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.MicroProcessFlowItem` itself.
     *
     * This event is fired when the user clicks or taps a node.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$MicroProcessFlowItemPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MicroProcessFlowItem`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the customControl in the aggregation {@link #getCustomControl customControl}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomControl(): this;
    /**
     * Destroys the intermediary in the aggregation {@link #getIntermediary intermediary}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyIntermediary(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.MicroProcessFlowItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$MicroProcessFlowItemPressEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $MicroProcessFlowItemPressEventParameters
    ): boolean;
    /**
     * Gets content of aggregation {@link #getCustomControl customControl}.
     *
     * Holds custom controls to be used as process flow nodes.
     */
    getCustomControl(): Control;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon that is displayed inside the node.
     * By default, an icon that corresponds to the node's `state` is used.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Gets content of aggregation {@link #getIntermediary intermediary}.
     *
     * Holds objects to be displayed between the process flow nodes.
     */
    getIntermediary(): Control;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Key of the node.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getShowIntermediary showIntermediary}.
     *
     * Defines whether an object should be displayed between this node and the following node.
     * When set to `true`, a vertical red bar is displayed by default. To define custom objects, use the `intermediary`
     * aggregation.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showIntermediary`
     */
    getShowIntermediary(): boolean;
    /**
     * Gets current value of property {@link #getShowSeparator showSeparator}.
     *
     * Defines whether a connector line should be displayed between this node and the node that follows it.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showSeparator`
     */
    getShowSeparator(): boolean;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * State associated with this node.
     * The state defines the semantic color applied to the node. Available states include `Standard` (neutral),
     * `Error` (negative), `Success` (positive), and `Warning` (critical).
     *
     * Default value is `Standard`.
     *
     * @returns Value of property `state`
     */
    getState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getStepWidth stepWidth}.
     *
     * Distance between this node and the following node.
     * When set to a percentage value, the distance is calculated based on the height of the parent container.
     *
     * @returns Value of property `stepWidth`
     */
    getStepWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title associated with this node.
     * The title is displayed as a tooltip when the user hovers over the node. This title can also be used by
     * screen reader software.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets the aggregated {@link #getCustomControl customControl}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCustomControl(
      /**
       * The customControl to set
       */
      oCustomControl: Control
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon that is displayed inside the node.
     * By default, an icon that corresponds to the node's `state` is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets the aggregated {@link #getIntermediary intermediary}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIntermediary(
      /**
       * The intermediary to set
       */
      oIntermediary: Control
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Key of the node.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowIntermediary showIntermediary}.
     *
     * Defines whether an object should be displayed between this node and the following node.
     * When set to `true`, a vertical red bar is displayed by default. To define custom objects, use the `intermediary`
     * aggregation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowIntermediary(
      /**
       * New value for property `showIntermediary`
       */
      bShowIntermediary?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSeparator showSeparator}.
     *
     * Defines whether a connector line should be displayed between this node and the node that follows it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowSeparator(
      /**
       * New value for property `showSeparator`
       */
      bShowSeparator?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * State associated with this node.
     * The state defines the semantic color applied to the node. Available states include `Standard` (neutral),
     * `Error` (negative), `Success` (positive), and `Warning` (critical).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getStepWidth stepWidth}.
     *
     * Distance between this node and the following node.
     * When set to a percentage value, the distance is calculated based on the height of the parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStepWidth(
      /**
       * New value for property `stepWidth`
       */
      sStepWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title associated with this node.
     * The title is displayed as a tooltip when the user hovers over the node. This title can also be used by
     * screen reader software.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default MicroProcessFlowItem;

  export interface $MicroProcessFlowItemSettings extends $ControlSettings {
    /**
     * Key of the node.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Icon that is displayed inside the node.
     * By default, an icon that corresponds to the node's `state` is used.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Title associated with this node.
     * The title is displayed as a tooltip when the user hovers over the node. This title can also be used by
     * screen reader software.
     */
    title?: string | PropertyBindingInfo;

    /**
     * State associated with this node.
     * The state defines the semantic color applied to the node. Available states include `Standard` (neutral),
     * `Error` (negative), `Success` (positive), and `Warning` (critical).
     */
    state?:
      | (ValueState | keyof typeof ValueState)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines whether an object should be displayed between this node and the following node.
     * When set to `true`, a vertical red bar is displayed by default. To define custom objects, use the `intermediary`
     * aggregation.
     */
    showIntermediary?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Distance between this node and the following node.
     * When set to a percentage value, the distance is calculated based on the height of the parent container.
     */
    stepWidth?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether a connector line should be displayed between this node and the node that follows it.
     */
    showSeparator?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Holds custom controls to be used as process flow nodes.
     */
    customControl?: Control;

    /**
     * Holds objects to be displayed between the process flow nodes.
     */
    intermediary?: Control;

    /**
     * This event is fired when the user clicks or taps a node.
     */
    press?: (oEvent: Event<$MicroProcessFlowItemPressEventParameters>) => void;
  }

  export interface $MicroProcessFlowItemPressEventParameters {
    item?: object;
  }
}

declare module "sap/suite/ui/commons/MonitoringContent" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import Icon from "sap/ui/core/Icon";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { InfoTileSize, LoadState } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.NumericContent.
   *
   * This control is used in a tile or any other place to display numeric values and an icon.
   */
  class MonitoringContent extends Control {
    /**
     * Constructor for a new MonitoringContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $MonitoringContentSettings
    );
    /**
     * Constructor for a new MonitoringContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $MonitoringContentSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MonitoringContent with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MonitoringContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MonitoringContent.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MonitoringContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.MonitoringContent` itself.
     *
     * The event is fired when the user chooses the monitoring content.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MonitoringContent`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MonitoringContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.MonitoringContent` itself.
     *
     * The event is fired when the user chooses the monitoring content.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MonitoringContent`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyIcon(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.MonitoringContent`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAnimateTextChange animateTextChange}.
     *
     * If set to true, changing of the value is animated.
     *
     * Default value is `true`.
     *
     * @returns Value of property `animateTextChange`
     */
    getAnimateTextChange(): boolean;
    /**
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * The icon that is displayed in the content.
     */
    getIcon(): Icon;
    /**
     * Gets current value of property {@link #getIconSrc iconSrc}.
     *
     * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
     * name parameter and optional collection parameter. The collection parameter is required when the application
     * extended icons are used.
     *
     * @returns Value of property `iconSrc`
     */
    getIconSrc(): string;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     *
     * Default value is `"Auto"`.
     *
     * @returns Value of property `size`
     */
    getSize(): InfoTileSize | keyof typeof InfoTileSize;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Indicates the load status.
     *
     * Default value is `"Loaded"`.
     *
     * @returns Value of property `state`
     */
    getState(): LoadState | keyof typeof LoadState;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The actual value.
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getAnimateTextChange animateTextChange}.
     *
     * If set to true, changing of the value is animated.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimateTextChange(
      /**
       * New value for property `animateTextChange`
       */
      bAnimateTextChange?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getIcon icon}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: Icon
    ): this;
    /**
     * Sets a new value for property {@link #getIconSrc iconSrc}.
     *
     * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
     * name parameter and optional collection parameter. The collection parameter is required when the application
     * extended icons are used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSrc(
      /**
       * New value for property `iconSrc`
       */
      sIconSrc?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: InfoTileSize | keyof typeof InfoTileSize
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * Indicates the load status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Loaded"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: LoadState | keyof typeof LoadState
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The actual value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
  }
  export default MonitoringContent;

  export interface $MonitoringContentSettings extends $ControlSettings {
    /**
     * The actual value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
     * name parameter and optional collection parameter. The collection parameter is required when the application
     * extended icons are used.
     */
    iconSrc?: string | PropertyBindingInfo;

    /**
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     */
    size?:
      | (InfoTileSize | keyof typeof InfoTileSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Indicates the load status.
     */
    state?:
      | (LoadState | keyof typeof LoadState)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * If set to true, changing of the value is animated.
     */
    animateTextChange?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The icon that is displayed in the content.
     */
    icon?: Icon;

    /**
     * The event is fired when the user chooses the monitoring content.
     */
    press?: (oEvent: Event) => void;
  }

  export interface $MonitoringContentPressEventParameters {}
}

declare module "sap/suite/ui/commons/MonitoringTile" {
  import {
    default as InfoTile,
    $InfoTileSettings,
  } from "sap/suite/ui/commons/InfoTile";

  import { InfoTileTextColor } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
   *
   * This control is the implementation of the InfoTile to show a numeric value and an icon.
   */
  class MonitoringTile extends InfoTile {
    /**
     * Constructor for a new MonitoringTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $MonitoringTileSettings
    );
    /**
     * Constructor for a new MonitoringTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $MonitoringTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.MonitoringTile with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.InfoTile.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MonitoringTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.MonitoringTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getFooterColor footerColor}.
     *
     * The color of the tile footer text.
     *
     * Default value is `"Positive"`.
     *
     * @returns Value of property `footerColor`
     */
    getFooterColor(): InfoTileTextColor | keyof typeof InfoTileTextColor;
    /**
     * Gets current value of property {@link #getIconSrc iconSrc}.
     *
     * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
     * name parameter and optional collection parameter. The collection parameter is required when the application
     * extended icons are used.
     *
     * @returns Value of property `iconSrc`
     */
    getIconSrc(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The actual value.
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getFooterColor footerColor}.
     *
     * The color of the tile footer text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Positive"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFooterColor(
      /**
       * New value for property `footerColor`
       */
      sFooterColor?: InfoTileTextColor | keyof typeof InfoTileTextColor
    ): this;
    /**
     * Sets a new value for property {@link #getIconSrc iconSrc}.
     *
     * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
     * name parameter and optional collection parameter. The collection parameter is required when the application
     * extended icons are used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSrc(
      /**
       * New value for property `iconSrc`
       */
      sIconSrc?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The actual value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
  }
  export default MonitoringTile;

  export interface $MonitoringTileSettings extends $InfoTileSettings {
    /**
     * The actual value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
     * name parameter and optional collection parameter. The collection parameter is required when the application
     * extended icons are used.
     */
    iconSrc?: string | PropertyBindingInfo;

    /**
     * The color of the tile footer text.
     */
    footerColor?:
      | (InfoTileTextColor | keyof typeof InfoTileTextColor)
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/networkgraph/ActionButton" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Holds information about one custom action button.
   */
  class ActionButton extends UI5Element {
    /**
     * Constructor for a new ActionButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.ActionButton with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ActionButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.ActionButton.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.ActionButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.ActionButton` itself.
     *
     * This event is fired when the action button is clicked or tapped.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ActionButtonPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.ActionButton`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.ActionButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.ActionButton` itself.
     *
     * This event is fired when the action button is clicked or tapped.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ActionButtonPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.ActionButton`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.ActionButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ActionButtonPressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ActionButtonPressEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Indicates whether the action button is enabled.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon to be used for the custom action button.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getPosition position}.
     *
     * Position of the action button. Available only for nodes.
     *
     * Default value is `"Right"`.
     *
     * @returns Value of property `position`
     */
    getPosition():
      | networkgraph.ActionButtonPosition
      | keyof typeof networkgraph.ActionButtonPosition;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Tooltip title for custom action button.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Indicates whether the action button is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon to be used for the custom action button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * Position of the action button. Available only for nodes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Right"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPosition(
      /**
       * New value for property `position`
       */
      sPosition?:
        | networkgraph.ActionButtonPosition
        | keyof typeof networkgraph.ActionButtonPosition
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Tooltip title for custom action button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default ActionButton;

  export interface $ActionButtonSettings extends $ElementSettings {
    /**
     * The icon to be used for the custom action button.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Tooltip title for custom action button.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Indicates whether the action button is enabled.
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Position of the action button. Available only for nodes.
     */
    position?:
      | (
          | networkgraph.ActionButtonPosition
          | keyof typeof networkgraph.ActionButtonPosition
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * This event is fired when the action button is clicked or tapped.
     */
    press?: (oEvent: Event<$ActionButtonPressEventParameters>) => void;
  }

  export interface $ActionButtonPressEventParameters {
    buttonElement?: object;
  }
}

declare module "sap/suite/ui/commons/networkgraph/Coordinate" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Holds information about coordinates on a two-dimensional Cartesian plane.
   */
  class Coordinate extends UI5Element {
    /**
     * Constructor for a new Coordinate.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Coordinate with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Coordinate>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Coordinate.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getX x}.
     *
     * The value of the x coordinate.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `x`
     */
    getX(): float;
    /**
     * Gets current value of property {@link #getY y}.
     *
     * The value of the y coordinate.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `y`
     */
    getY(): float;
    /**
     * Sets a new value for property {@link #getX x}.
     *
     * The value of the x coordinate.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setX(
      /**
       * New value for property `x`
       */
      fX?: float
    ): this;
    /**
     * Sets a new value for property {@link #getY y}.
     *
     * The value of the y coordinate.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setY(
      /**
       * New value for property `y`
       */
      fY?: float
    ): this;
  }
  export default Coordinate;

  export interface $CoordinateSettings extends $ElementSettings {
    /**
     * The value of the x coordinate.
     */
    x?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * The value of the y coordinate.
     */
    y?: float | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/networkgraph/ElementAttribute" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Holds details of an attribute used in the graph.
   */
  class ElementAttribute extends UI5Element {
    /**
     * Constructor for a new ElementAttribute.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.ElementAttribute with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ElementAttribute>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.ElementAttribute.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon assigned to the attribute.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Label of the attribute. If set to null, the label is not displayed.
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets current value of property {@link #getLabelStatus labelStatus}.
     *
     * Name of custom status that can change the color of the label. Note that only contentColor, selectedContentColor
     * and hoverContentColor are relevant to this attribute.
     *
     * @returns Value of property `labelStatus`
     */
    getLabelStatus(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Value of the attribute. If set to null, the value is not displayed.
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueStatus valueStatus}.
     *
     * Name of custom status that can change the color of the value. Note that only contentColor, selectedContentColor
     * and hoverContentColor are relevant to this attribute.
     *
     * @returns Value of property `valueStatus`
     */
    getValueStatus(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Defines whether the attribute is visible. This option is used for rectangular nodes. Visible attributes
     * are displayed right inside the rectangular node. The node's details popup shows all attributes, including
     * the invisible ones.
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon assigned to the attribute.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Label of the attribute. If set to null, the label is not displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabelStatus labelStatus}.
     *
     * Name of custom status that can change the color of the label. Note that only contentColor, selectedContentColor
     * and hoverContentColor are relevant to this attribute.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabelStatus(
      /**
       * New value for property `labelStatus`
       */
      sLabelStatus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Value of the attribute. If set to null, the value is not displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueStatus valueStatus}.
     *
     * Name of custom status that can change the color of the value. Note that only contentColor, selectedContentColor
     * and hoverContentColor are relevant to this attribute.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueStatus(
      /**
       * New value for property `valueStatus`
       */
      sValueStatus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Defines whether the attribute is visible. This option is used for rectangular nodes. Visible attributes
     * are displayed right inside the rectangular node. The node's details popup shows all attributes, including
     * the invisible ones.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  export default ElementAttribute;

  export interface $ElementAttributeSettings extends $ElementSettings {
    /**
     * Label of the attribute. If set to null, the label is not displayed.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Value of the attribute. If set to null, the value is not displayed.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Name of custom status that can change the color of the label. Note that only contentColor, selectedContentColor
     * and hoverContentColor are relevant to this attribute.
     */
    labelStatus?: string | PropertyBindingInfo;

    /**
     * Name of custom status that can change the color of the value. Note that only contentColor, selectedContentColor
     * and hoverContentColor are relevant to this attribute.
     */
    valueStatus?: string | PropertyBindingInfo;

    /**
     * Defines whether the attribute is visible. This option is used for rectangular nodes. Visible attributes
     * are displayed right inside the rectangular node. The node's details popup shows all attributes, including
     * the invisible ones.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Icon assigned to the attribute.
     */
    icon?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/networkgraph/ElementBase" {
  import {
    default as SvgBase,
    $SvgBaseSettings,
  } from "sap/suite/ui/commons/networkgraph/SvgBase";

  import ElementAttribute from "sap/suite/ui/commons/networkgraph/ElementAttribute";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * ElementBase class
   */
  class ElementBase extends SvgBase {
    /**
     * Constructor for a new ElementBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.ElementBase with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.SvgBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ElementBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.ElementBase.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some attribute to the aggregation {@link #getAttributes attributes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAttribute(
      /**
       * The attribute to add; if empty, nothing is inserted
       */
      oAttribute: ElementAttribute
    ): this;
    /**
     * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAttributes(): this;
    /**
     * Gets content of aggregation {@link #getAttributes attributes}.
     *
     * Attributes associated with the element.
     */
    getAttributes(): ElementAttribute[];
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Description.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getStatus status}.
     *
     * Status associated with this element. You can use any of the custom statuses defined by the `statuses`
     * aggregation in the {@link sap.suite.ui.commons.networkgraph.Graph} or use the default statuses provided
     * by {@link sap.suite.ui.commons.networkgraph.ElementStatus}.
     *
     * Default value is `Status.Standard`.
     *
     * @returns Value of property `status`
     */
    getStatus(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * A title associated with the element.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.ElementAttribute` in the aggregation {@link #getAttributes attributes}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfAttribute(
      /**
       * The attribute whose index is looked for
       */
      oAttribute: ElementAttribute
    ): int;
    /**
     * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertAttribute(
      /**
       * The attribute to insert; if empty, nothing is inserted
       */
      oAttribute: ElementAttribute,
      /**
       * The `0`-based index the attribute should be inserted at; for a negative value of `iIndex`, the attribute
       * is inserted at position 0; for a value greater than the current size of the aggregation, the attribute
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAttributes attributes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAttributes(): ElementAttribute[];
    /**
     * Removes a attribute from the aggregation {@link #getAttributes attributes}.
     *
     * @returns The removed attribute or `null`
     */
    removeAttribute(
      /**
       * The attribute to remove or its index or id
       */
      vAttribute: int | string | ElementAttribute
    ): ElementAttribute | null;
    /**
     * Scrolls the view port to show this element
     */
    scrollToElement(): void;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Description.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStatus status}.
     *
     * Status associated with this element. You can use any of the custom statuses defined by the `statuses`
     * aggregation in the {@link sap.suite.ui.commons.networkgraph.Graph} or use the default statuses provided
     * by {@link sap.suite.ui.commons.networkgraph.ElementStatus}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Status.Standard`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStatus(
      /**
       * New value for property `status`
       */
      sStatus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * A title associated with the element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default ElementBase;

  export interface $ElementBaseSettings extends $SvgBaseSettings {
    /**
     * A title associated with the element.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Description.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Status associated with this element. You can use any of the custom statuses defined by the `statuses`
     * aggregation in the {@link sap.suite.ui.commons.networkgraph.Graph} or use the default statuses provided
     * by {@link sap.suite.ui.commons.networkgraph.ElementStatus}.
     */
    status?: string | PropertyBindingInfo;

    /**
     * Attributes associated with the element.
     */
    attributes?:
      | ElementAttribute[]
      | ElementAttribute
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/networkgraph/Graph" {
  import {
    default as SvgBase,
    $SvgBaseSettings,
  } from "sap/suite/ui/commons/networkgraph/SvgBase";

  import { ID, URI, CSSSize } from "sap/ui/core/library";

  import Control from "sap/ui/core/Control";

  import Group from "sap/suite/ui/commons/networkgraph/Group";

  import Line from "sap/suite/ui/commons/networkgraph/Line";

  import Node from "sap/suite/ui/commons/networkgraph/Node";

  import Status from "sap/suite/ui/commons/networkgraph/Status";

  import Event from "sap/ui/base/Event";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import LayoutAlgorithm from "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import OverflowToolbar from "sap/m/OverflowToolbar";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementBase from "sap/suite/ui/commons/networkgraph/ElementBase";

  /**
   * @SINCE 1.50
   *
   * The network graph control allows you to display data as a network of nodes connected by lines. The nodes
   * can be circular or rectangular and can be joined into groups. You can define custom attributes for nodes
   * and groups of nodes as well as apply layout algorithms that define the graph's appearance.
   */
  class Graph extends SvgBase {
    /**
     * Constructor for a new Graph.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link https://ui5.sap.com/#/topic/b5649c8de7f74739b66747dcc9356d0b Network Graph}
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/network-graph/ Network Graph}
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Graph with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.SvgBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Graph>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Graph.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some group to the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addGroup(
      /**
       * The group to add; if empty, nothing is inserted
       */
      oGroup: Group
    ): this;
    /**
     * Adds some line to the aggregation {@link #getLines lines}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addLine(
      /**
       * The line to add; if empty, nothing is inserted
       */
      oLine: Line
    ): this;
    /**
     * Adds some node to the aggregation {@link #getNodes nodes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addNode(
      /**
       * The node to add; if empty, nothing is inserted
       */
      oNode: Node
    ): this;
    /**
     * Adds some status to the aggregation {@link #getStatuses statuses}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addStatus(
      /**
       * The status to add; if empty, nothing is inserted
       */
      oStatus: Status
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterLayouting afterLayouting} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the layouting algorithm has finished arranging the graph and SVG rendering starts.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterLayouting(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterLayouting afterLayouting} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the layouting algorithm has finished arranging the graph and SVG rendering starts.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterLayouting(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeLayouting beforeLayouting} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired just before the layout computation begins.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeLayouting(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeLayouting beforeLayouting} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired just before the layout computation begins.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeLayouting(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:failure failure} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when an error has occured and the graph cannot be rendered properly.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFailure(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphFailureEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:failure failure} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when an error has occured and the graph cannot be rendered properly.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFailure(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphFailureEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:graphReady graphReady} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the graph is fully rendered.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachGraphReady(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:graphReady graphReady} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the graph is fully rendered.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachGraphReady(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the user enters a keyword into the search field.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphSearchEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the user enters a keyword into the search field.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphSearchEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:searchSuggest searchSuggest} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the user runs a search and there is a matching term found among the suggestions.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearchSuggest(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphSearchSuggestEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:searchSuggest searchSuggest} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when the user runs a search and there is a matching term found among the suggestions.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearchSuggest(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphSearchSuggestEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when a selection of elements in the graph changes.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphSelectionChangeEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when a selection of elements in the graph changes.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GraphSelectionChangeEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when zooming in or out.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachZoomChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
     *
     * This event is fired when zooming in or out.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachZoomChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Deselects all currently selected items.
     *
     * @returns All items that have been deselected
     */
    deselect(
      /**
       * Indicates whether the `selecitonChange` event should be fired
       */
      bSuppressEvent: boolean
    ): any[];
    /**
     * This method removes all elements (lines, nodes, groups) without triggering invalidation. You should use
     * this method when changing graph data that uses data binding, for example with {@link sap.suite.ui.commons.networkgraph.Graph#setModel}.
     */
    destroyAllElements(): void;
    /**
     * Destroys all the groups in the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGroups(): this;
    /**
     * Destroys the layoutAlgorithm in the aggregation {@link #getLayoutAlgorithm layoutAlgorithm}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLayoutAlgorithm(): this;
    /**
     * Destroys the legend in the aggregation {@link #getLegend legend}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLegend(): this;
    /**
     * Destroys all the lines in the aggregation {@link #getLines lines}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLines(): this;
    /**
     * Destroys all the nodes in the aggregation {@link #getNodes nodes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyNodes(): this;
    /**
     * Destroys all the statuses in the aggregation {@link #getStatuses statuses}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyStatuses(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterLayouting afterLayouting} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterLayouting(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeLayouting beforeLayouting} event of
     * this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBeforeLayouting(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:failure failure} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFailure(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$GraphFailureEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:graphReady graphReady} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachGraphReady(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSearch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$GraphSearchEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:searchSuggest searchSuggest} event of this
     * `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSearchSuggest(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$GraphSearchSuggestEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$GraphSelectionChangeEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.networkgraph.Graph`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachZoomChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterLayouting afterLayouting} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterLayouting(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:beforeLayouting beforeLayouting} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBeforeLayouting(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:failure failure} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFailure(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $GraphFailureEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:graphReady graphReady} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireGraphReady(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:search search} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSearch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $GraphSearchEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:searchSuggest searchSuggest} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSearchSuggest(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $GraphSearchSuggestEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $GraphSelectionChangeEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:zoomChanged zoomChanged} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireZoomChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Background color.
     *
     * Default value is `"White"`.
     *
     * @returns Value of property `backgroundColor`
     */
    getBackgroundColor():
      | networkgraph.BackgroundColor
      | keyof typeof networkgraph.BackgroundColor;
    /**
     * Gets current value of property {@link #getBackgroundImage backgroundImage}.
     *
     * An image to be rendered on the background.
     *
     * @returns Value of property `backgroundImage`
     */
    getBackgroundImage(): URI;
    /**
     * Returns current zoom level.
     */
    getCurrentZoomLevel(): number;
    /**
     * Gets current value of property {@link #getEnableWheelZoom enableWheelZoom}.
     *
     * If this property is set to `false`, zooming in or out using the mouse wheel is available only when the
     * Ctrl key is pressed.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableWheelZoom`
     */
    getEnableWheelZoom(): boolean;
    /**
     * Gets current value of property {@link #getEnableZoom enableZoom}.
     *
     * If this property is set to `false`, zoom buttons are hidden, and the mouse wheel can be used for scrolling
     * only.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableZoom`
     */
    getEnableZoom(): boolean;
    /**
     * Gets content of aggregation {@link #getGroups groups}.
     *
     * Holds a list of groups used in the graph.
     */
    getGroups(): Group[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the graph. If this property is set to 'auto', the network graph will be resized to fit
     * the height of its content, regardless of the height of the parent control.
     *
     * Default value is `"100%"`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets content of aggregation {@link #getLayoutAlgorithm layoutAlgorithm}.
     *
     * Defines the layout algorithm to be used. If not defined, {@link sap.suite.ui.commons.networkgraph.layout.LayeredLayout }
     * is used.
     */
    getLayoutAlgorithm(): LayoutAlgorithm;
    /**
     * Gets content of aggregation {@link #getLegend legend}.
     *
     * A custom legend to be rendered instead of the autogenerated one.
     */
    getLegend(): Control;
    /**
     * Gets content of aggregation {@link #getLines lines}.
     *
     * Holds the lines to be displayed in the graph.
     */
    getLines(): Line[];
    /**
     * Gets current value of property {@link #getNoData noData}.
     *
     * Set this property to `true` if you want to notify the user that no data has been loaded.
     *  There is no internal check for data received, so we recommend that you make sure you set it correctly
     * when there is no data received, not just when the application is waiting for data to be retrieved.
     *
     * Default value is `false`.
     *
     * @returns Value of property `noData`
     */
    getNoData(): boolean;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * Text displayed when no data is set.
     *  This property takes effect only when the `noData` property is set to `true`.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `noDataText`
     */
    getNoDataText(): string;
    /**
     * Returns a node by its key.
     *
     * @returns The node, if such a node exists, or undefined
     */
    getNodeByKey(
      /**
       * Node's key
       */
      sKey: string
    ): Node;
    /**
     * Gets content of aggregation {@link #getNodes nodes}.
     *
     * Holds the nodes to be displayed in the graph.
     */
    getNodes(): Node[];
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * Orientation of the graph flow. This property is used by layout algorithms.
     *
     * Default value is `LeftRight`.
     *
     * @returns Value of property `orientation`
     */
    getOrientation():
      | networkgraph.Orientation
      | keyof typeof networkgraph.Orientation;
    /**
     * Gets current value of property {@link #getRenderType renderType}.
     *
     * Nodes rendering type. For optimal performance and usability, it is recommended that you use HTML whenever
     * possible.
     *
     * Default value is `Html`.
     *
     * @returns Value of property `renderType`
     */
    getRenderType():
      | networkgraph.RenderType
      | keyof typeof networkgraph.RenderType;
    /**
     * Gets content of aggregation {@link #getStatuses statuses}.
     *
     * Holds a collection of custom statuses that can be used to assign custom colors to nodes, lines, and groups
     * of nodes, based on their status.
     */
    getStatuses(): Status[];
    /**
     * Returns a toolbar instance to allow its customization.
     *
     * @returns Toolbar instance
     */
    getToolbar(): OverflowToolbar;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the graph. If this property is set to 'auto', the network graph will be resized to fit the
     * width of its content, regardless of the width of the parent control.
     *
     * Default value is `"100%"`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Returns predefined zoom level steps used by the default zoom functionality.
     *
     * @returns zoom level milestones
     */
    getZoomLevelMilestones(): number[];
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.Group` in the aggregation {@link #getGroups groups}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfGroup(
      /**
       * The group whose index is looked for
       */
      oGroup: Group
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.Line` in the aggregation {@link #getLines lines}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfLine(
      /**
       * The line whose index is looked for
       */
      oLine: Line
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.Node` in the aggregation {@link #getNodes nodes}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfNode(
      /**
       * The node whose index is looked for
       */
      oNode: Node
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.Status` in the aggregation {@link #getStatuses statuses}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfStatus(
      /**
       * The status whose index is looked for
       */
      oStatus: Status
    ): int;
    /**
     * Inserts a group into the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertGroup(
      /**
       * The group to insert; if empty, nothing is inserted
       */
      oGroup: Group,
      /**
       * The `0`-based index the group should be inserted at; for a negative value of `iIndex`, the group is inserted
       * at position 0; for a value greater than the current size of the aggregation, the group is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a line into the aggregation {@link #getLines lines}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertLine(
      /**
       * The line to insert; if empty, nothing is inserted
       */
      oLine: Line,
      /**
       * The `0`-based index the line should be inserted at; for a negative value of `iIndex`, the line is inserted
       * at position 0; for a value greater than the current size of the aggregation, the line is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a node into the aggregation {@link #getNodes nodes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertNode(
      /**
       * The node to insert; if empty, nothing is inserted
       */
      oNode: Node,
      /**
       * The `0`-based index the node should be inserted at; for a negative value of `iIndex`, the node is inserted
       * at position 0; for a value greater than the current size of the aggregation, the node is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a status into the aggregation {@link #getStatuses statuses}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertStatus(
      /**
       * The status to insert; if empty, nothing is inserted
       */
      oStatus: Status,
      /**
       * The `0`-based index the status should be inserted at; for a negative value of `iIndex`, the status is
       * inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Returns `true` if the graph is in full screen mode.
     */
    isFullScreen(): void;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getGroups groups}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllGroups(): Group[];
    /**
     * Removes all the controls from the aggregation {@link #getLines lines}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllLines(): Line[];
    /**
     * Removes all the controls from the aggregation {@link #getNodes nodes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllNodes(): Node[];
    /**
     * Removes all the controls from the aggregation {@link #getStatuses statuses}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllStatuses(): Status[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns The removed ariaDescribedBy or `null`
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID | null;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns The removed ariaLabelledBy or `null`
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID | null;
    /**
     * Removes a group from the aggregation {@link #getGroups groups}.
     *
     * @returns The removed group or `null`
     */
    removeGroup(
      /**
       * The group to remove or its index or id
       */
      vGroup: int | string | Group
    ): Group | null;
    /**
     * Removes a line from the aggregation {@link #getLines lines}.
     *
     * @returns The removed line or `null`
     */
    removeLine(
      /**
       * The line to remove or its index or id
       */
      vLine: int | string | Line
    ): Line | null;
    /**
     * Removes a node from the aggregation {@link #getNodes nodes}.
     *
     * @returns The removed node or `null`
     */
    removeNode(
      /**
       * The node to remove or its index or id
       */
      vNode: int | string | Node
    ): Node | null;
    /**
     * Removes a status from the aggregation {@link #getStatuses statuses}.
     *
     * @returns The removed status or `null`
     */
    removeStatus(
      /**
       * The status to remove or its index or id
       */
      vStatus: int | string | Status
    ): Status | null;
    /**
     * Scrolls to the element set in the parameter.
     */
    scrollToElement(
      /**
       * Element to scroll to
       */
      oElement: Object
    ): void;
    /**
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Background color.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"White"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?:
        | networkgraph.BackgroundColor
        | keyof typeof networkgraph.BackgroundColor
    ): this;
    /**
     * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
     *
     * An image to be rendered on the background.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackgroundImage(
      /**
       * New value for property `backgroundImage`
       */
      sBackgroundImage?: URI
    ): this;
    /**
     * Sets current zoom level.
     */
    setCurrentZoomLevel(
      /**
       * New zoom level
       */
      zoomLevel: float
    ): void;
    /**
     * Sets a custom label for the legend.
     */
    setCustomLegendLabel(
      /**
       * Parameters for this method
       */
      mArguments: {
        /**
         * ]text for the legend label
         */
        label: string;
        /**
         * Status the custom text will be assigned to. Works only for the default legend, not when the Legend aggregation
         * is used
         */
        status:
          | networkgraph.ElementStatus
          | keyof typeof networkgraph.ElementStatus;
        /**
         * True for a legend describing nodes. True by default if 'isLine' and 'isGroup' are false.
         */
        isNode: boolean;
        /**
         * True for a legend describing lines. By default true if 'isNode' is false.
         */
        isLine: boolean;
        /**
         * True for a legend describing groups. False by default.
         */
        isGroup: boolean;
      }
    ): void;
    /**
     * Sets a new value for property {@link #getEnableWheelZoom enableWheelZoom}.
     *
     * If this property is set to `false`, zooming in or out using the mouse wheel is available only when the
     * Ctrl key is pressed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableWheelZoom(
      /**
       * New value for property `enableWheelZoom`
       */
      bEnableWheelZoom?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableZoom enableZoom}.
     *
     * If this property is set to `false`, zoom buttons are hidden, and the mouse wheel can be used for scrolling
     * only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableZoom(
      /**
       * New value for property `enableZoom`
       */
      bEnableZoom?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the graph. If this property is set to 'auto', the network graph will be resized to fit
     * the height of its content, regardless of the height of the parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets the aggregated {@link #getLayoutAlgorithm layoutAlgorithm}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLayoutAlgorithm(
      /**
       * The layoutAlgorithm to set
       */
      oLayoutAlgorithm: LayoutAlgorithm
    ): this;
    /**
     * Sets the aggregated {@link #getLegend legend}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegend(
      /**
       * The legend to set
       */
      oLegend: Control
    ): this;
    /**
     * Sets a new value for property {@link #getNoData noData}.
     *
     * Set this property to `true` if you want to notify the user that no data has been loaded.
     *  There is no internal check for data received, so we recommend that you make sure you set it correctly
     * when there is no data received, not just when the application is waiting for data to be retrieved.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNoData(
      /**
       * New value for property `noData`
       */
      bNoData?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * Text displayed when no data is set.
     *  This property takes effect only when the `noData` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * Orientation of the graph flow. This property is used by layout algorithms.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `LeftRight`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?:
        | networkgraph.Orientation
        | keyof typeof networkgraph.Orientation
    ): this;
    /**
     * Sets a new value for property {@link #getRenderType renderType}.
     *
     * Nodes rendering type. For optimal performance and usability, it is recommended that you use HTML whenever
     * possible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Html`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderType(
      /**
       * New value for property `renderType`
       */
      sRenderType?:
        | networkgraph.RenderType
        | keyof typeof networkgraph.RenderType
    ): this;
    /**
     * Sets custom search suggestions.
     */
    setSearchSuggestionItems(
      /**
       * Array with suggestion items ({@link sap.m.SuggestionItem}) to display when the user runs a search.
       */
      aItems: any[]
    ): void;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the graph. If this property is set to 'auto', the network graph will be resized to fit the
     * width of its content, regardless of the width of the parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Toggles full screen mode.
     */
    toggleFullScreen(): void;
    /**
     * Updates the legend.
     */
    updateLegend(): void;
    /**
     * Zooms in or out of the graph.
     */
    zoom(
      /**
       * Map which contains following parameters properties:
       */
      mParameters: {
        /**
         * x position from/to which the zoom should happen
         */
        x?: number;
        /**
         * y position from/to which the zoom should happen
         */
        y?: number;
        /**
         * whether to zoom in or out
         */
        zoomin?: boolean;
        /**
         * zoom level in percents, parameter zoomin ignored in this case
         */
        zoomLevel?: number;
      }
    ): void;
  }
  export default Graph;

  export interface $GraphSettings extends $SvgBaseSettings {
    /**
     * The height of the graph. If this property is set to 'auto', the network graph will be resized to fit
     * the height of its content, regardless of the height of the parent control.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The width of the graph. If this property is set to 'auto', the network graph will be resized to fit the
     * width of its content, regardless of the width of the parent control.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Orientation of the graph flow. This property is used by layout algorithms.
     */
    orientation?:
      | (networkgraph.Orientation | keyof typeof networkgraph.Orientation)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * If this property is set to `false`, zoom buttons are hidden, and the mouse wheel can be used for scrolling
     * only.
     */
    enableZoom?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If this property is set to `false`, zooming in or out using the mouse wheel is available only when the
     * Ctrl key is pressed.
     */
    enableWheelZoom?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * An image to be rendered on the background.
     */
    backgroundImage?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Background color.
     */
    backgroundColor?:
      | (
          | networkgraph.BackgroundColor
          | keyof typeof networkgraph.BackgroundColor
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Nodes rendering type. For optimal performance and usability, it is recommended that you use HTML whenever
     * possible.
     */
    renderType?:
      | (networkgraph.RenderType | keyof typeof networkgraph.RenderType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Set this property to `true` if you want to notify the user that no data has been loaded.
     *  There is no internal check for data received, so we recommend that you make sure you set it correctly
     * when there is no data received, not just when the application is waiting for data to be retrieved.
     */
    noData?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Text displayed when no data is set.
     *  This property takes effect only when the `noData` property is set to `true`.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Holds the lines to be displayed in the graph.
     */
    lines?: Line[] | Line | AggregationBindingInfo | `{${string}}`;

    /**
     * Holds the nodes to be displayed in the graph.
     */
    nodes?: Node[] | Node | AggregationBindingInfo | `{${string}}`;

    /**
     * Holds a list of groups used in the graph.
     */
    groups?: Group[] | Group | AggregationBindingInfo | `{${string}}`;

    /**
     * A custom legend to be rendered instead of the autogenerated one.
     */
    legend?: Control;

    /**
     * Defines the layout algorithm to be used. If not defined, {@link sap.suite.ui.commons.networkgraph.layout.LayeredLayout }
     * is used.
     */
    layoutAlgorithm?: LayoutAlgorithm;

    /**
     * Holds a collection of custom statuses that can be used to assign custom colors to nodes, lines, and groups
     * of nodes, based on their status.
     */
    statuses?: Status[] | Status | AggregationBindingInfo | `{${string}}`;

    /**
     * Controls or IDs that describe this control. This association is used by screen reader software.
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Controls or IDs that label this control. This association is used by screen reader software.
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired when the graph is fully rendered.
     */
    graphReady?: (oEvent: Event) => void;

    /**
     * This event is fired when the layouting algorithm has finished arranging the graph and SVG rendering starts.
     */
    afterLayouting?: (oEvent: Event) => void;

    /**
     * This event is fired just before the layout computation begins.
     */
    beforeLayouting?: (oEvent: Event) => void;

    /**
     * This event is fired when zooming in or out.
     */
    zoomChanged?: (oEvent: Event) => void;

    /**
     * This event is fired when an error has occured and the graph cannot be rendered properly.
     */
    failure?: (oEvent: Event<$GraphFailureEventParameters>) => void;

    /**
     * This event is fired when a selection of elements in the graph changes.
     */
    selectionChange?: (
      oEvent: Event<$GraphSelectionChangeEventParameters>
    ) => void;

    /**
     * This event is fired when the user runs a search and there is a matching term found among the suggestions.
     */
    searchSuggest?: (oEvent: Event<$GraphSearchSuggestEventParameters>) => void;

    /**
     * This event is fired when the user enters a keyword into the search field.
     */
    search?: (oEvent: Event<$GraphSearchEventParameters>) => void;
  }

  export interface $GraphAfterLayoutingEventParameters {}

  export interface $GraphBeforeLayoutingEventParameters {}

  export interface $GraphFailureEventParameters {
    /**
     * Type of an error. This parameter can be used for decision making in the calling code.
     */
    type?: string;

    /**
     * A human readable message with a description of what went wrong.
     */
    message?: string;
  }

  export interface $GraphGraphReadyEventParameters {}

  export interface $GraphSearchEventParameters {
    term?: string;

    key?: string;
  }

  export interface $GraphSearchSuggestEventParameters {
    term?: string;
  }

  export interface $GraphSelectionChangeEventParameters {
    /**
     * A list of elements that changed the state of the selection. To determine the new state, use the `getSelected()`
     * method.
     */
    items?: ElementBase[];
  }

  export interface $GraphZoomChangedEventParameters {}
}

declare module "sap/suite/ui/commons/networkgraph/GraphMap" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { ID, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Graph from "sap/suite/ui/commons/networkgraph/Graph";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * A component which displays an overview of the entire graph and allows users to quickly navigate in the
   * linked graph.
   */
  class GraphMap extends Control {
    /**
     * Constructor for a new GraphMap.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.GraphMap with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GraphMap>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.GraphMap.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:mapReady mapReady} event of this `sap.suite.ui.commons.networkgraph.GraphMap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.GraphMap` itself.
     *
     * This event is fired when the map is fully rendered.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMapReady(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.GraphMap`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:mapReady mapReady} event of this `sap.suite.ui.commons.networkgraph.GraphMap`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.GraphMap` itself.
     *
     * This event is fired when the map is fully rendered.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMapReady(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.GraphMap`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:mapReady mapReady} event of this `sap.suite.ui.commons.networkgraph.GraphMap`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMapReady(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:mapReady mapReady} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireMapReady(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDirectRenderNodeLimit directRenderNodeLimit}.
     *
     * This property affects the threshold at which the renderer switches from link rendering to direct graph
     * rendering. Rendering using xlink is much faster, but with larger graphs it may slow down the browser
     * performance. Modify this property with care. Please also keep in mind that a graph map that is rendered
     * directly does not adapt to changes until it's fully rerendered. Available only for `SVG` rendering type.
     *
     * Default value is `250`.
     *
     * @returns Value of property `directRenderNodeLimit`
     */
    getDirectRenderNodeLimit(): int;
    /**
     * ID of the element which is the current target of the association {@link #getGraph graph}, or `null`.
     */
    getGraph(): ID;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the graph map.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Graph overview title
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the graph map.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDirectRenderNodeLimit directRenderNodeLimit}.
     *
     * This property affects the threshold at which the renderer switches from link rendering to direct graph
     * rendering. Rendering using xlink is much faster, but with larger graphs it may slow down the browser
     * performance. Modify this property with care. Please also keep in mind that a graph map that is rendered
     * directly does not adapt to changes until it's fully rerendered. Available only for `SVG` rendering type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `250`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDirectRenderNodeLimit(
      /**
       * New value for property `directRenderNodeLimit`
       */
      iDirectRenderNodeLimit?: int
    ): this;
    /**
     * Sets the associated {@link #getGraph graph}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGraph(
      /**
       * ID of an element which becomes the new target of this graph association; alternatively, an element instance
       * may be given
       */
      oGraph: ID | Graph
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the graph map.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Graph overview title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the graph map.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  export default GraphMap;

  export interface $GraphMapSettings extends $ControlSettings {
    /**
     * The height of the graph map.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The width of the graph map.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * This property affects the threshold at which the renderer switches from link rendering to direct graph
     * rendering. Rendering using xlink is much faster, but with larger graphs it may slow down the browser
     * performance. Modify this property with care. Please also keep in mind that a graph map that is rendered
     * directly does not adapt to changes until it's fully rerendered. Available only for `SVG` rendering type.
     */
    directRenderNodeLimit?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Graph overview title
     */
    title?: string | PropertyBindingInfo;

    /**
     * An association to a graph displayed by this component.
     */
    graph?: Graph | string;

    /**
     * This event is fired when the map is fully rendered.
     */
    mapReady?: (oEvent: Event) => void;
  }

  export interface $GraphMapMapReadyEventParameters {}
}

declare module "sap/suite/ui/commons/networkgraph/Group" {
  import {
    default as ElementBase,
    $ElementBaseSettings,
  } from "sap/suite/ui/commons/networkgraph/ElementBase";

  import Event from "sap/ui/base/Event";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Holds details about a group.
   */
  class Group extends ElementBase {
    /**
     * Constructor for a new Group. Grouping is not supported for custom layouting.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Group with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.ElementBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Group>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Group.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
     * `sap.suite.ui.commons.networkgraph.Group`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
     *
     * This event is fired when the user clicks or taps the collapse/expand button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCollapseExpand(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
     * `sap.suite.ui.commons.networkgraph.Group`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
     *
     * This event is fired when the user clicks or taps the collapse/expand button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCollapseExpand(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
     * of this `sap.suite.ui.commons.networkgraph.Group`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
     *
     * This event is fired when the user selects or clears the Header checkbox.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeaderCheckBoxPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GroupHeaderCheckBoxPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
     * of this `sap.suite.ui.commons.networkgraph.Group`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
     *
     * This event is fired when the user selects or clears the Header checkbox.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeaderCheckBoxPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$GroupHeaderCheckBoxPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showDetail showDetail} event of this `sap.suite.ui.commons.networkgraph.Group`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
     *
     * This event is fired when the user clicks or taps the group's details button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowDetail(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:showDetail showDetail} event of this `sap.suite.ui.commons.networkgraph.Group`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
     *
     * This event is fired when the user clicks or taps the group's details button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachShowDetail(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:collapseExpand collapseExpand} event of this
     * `sap.suite.ui.commons.networkgraph.Group`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCollapseExpand(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
     * of this `sap.suite.ui.commons.networkgraph.Group`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHeaderCheckBoxPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$GroupHeaderCheckBoxPressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:showDetail showDetail} event of this `sap.suite.ui.commons.networkgraph.Group`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachShowDetail(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:collapseExpand collapseExpand} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCollapseExpand(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:headerCheckBoxPress headerCheckBoxPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHeaderCheckBoxPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $GroupHeaderCheckBoxPressEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:showDetail showDetail} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireShowDetail(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     *
     * @returns Returns all lines connected to the group's child nodes.
     */
    getChildLines(): any[];
    /**
     *
     * @returns Returns all child nodes of the group.
     */
    getChildNodes(): any[];
    /**
     * Gets current value of property {@link #getCollapsed collapsed}.
     *
     * Defines whether the group is collapsed. By default, it is expanded.
     *
     * Default value is `false`.
     *
     * @returns Value of property `collapsed`
     */
    getCollapsed(): boolean;
    /**
     * Returns header checkbox object
     */
    getHeaderCheckbox(): void;
    /**
     * Gets current value of property {@link #getHeaderCheckBoxState headerCheckBoxState}.
     *
     * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
     * the checkbox is hidden.
     *
     * Default value is `Hidden`.
     *
     * @returns Value of property `headerCheckBoxState`
     */
    getHeaderCheckBoxState():
      | networkgraph.HeaderCheckboxState
      | keyof typeof networkgraph.HeaderCheckboxState;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * An icon associated with the group.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * The key of the group. This key is used to assign nodes to groups.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getMinWidth minWidth}.
     *
     * Minimal width of the group (swim lane) for the `SwimLanes` type of {@link sap.suite.ui.commons.networkgraph.LayoutRenderType}.
     *  If not specified, the width of the group (swim lane) is defined automatically, based on the width of
     * the nodes included in the swim lane.
     *  If the width specified in this property is too small to fit the nodes included in this group (swim lane),
     * the width is increased accordingly.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `minWidth`
     */
    getMinWidth(): float;
    /**
     *
     * @returns Returns all nodes belonging to this group.
     */
    getNodes(): any[];
    /**
     * Gets current value of property {@link #getParentGroupKey parentGroupKey}.
     *
     * Key of the parent group. Can be used only with the `TwoColumns` layout.
     *
     * @returns Value of property `parentGroupKey`
     */
    getParentGroupKey(): string;
    /**
     *
     * @returns Returns all lines connected to the parent nodes of the group.
     */
    getParentLines(): any[];
    /**
     *
     * @returns Returns all parent nodes of the group.
     */
    getParentNodes(): any[];
    /**
     * Sets a new value for property {@link #getCollapsed collapsed}.
     *
     * Defines whether the group is collapsed. By default, it is expanded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCollapsed(
      /**
       * New value for property `collapsed`
       */
      bCollapsed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderCheckBoxState headerCheckBoxState}.
     *
     * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
     * the checkbox is hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Hidden`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeaderCheckBoxState(
      /**
       * New value for property `headerCheckBoxState`
       */
      sHeaderCheckBoxState?:
        | networkgraph.HeaderCheckboxState
        | keyof typeof networkgraph.HeaderCheckboxState
    ): this;
    /**
     * Hides the group and the nodes included in it.
     */
    setHidden(): void;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * An icon associated with the group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * The key of the group. This key is used to assign nodes to groups.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMinWidth minWidth}.
     *
     * Minimal width of the group (swim lane) for the `SwimLanes` type of {@link sap.suite.ui.commons.networkgraph.LayoutRenderType}.
     *  If not specified, the width of the group (swim lane) is defined automatically, based on the width of
     * the nodes included in the swim lane.
     *  If the width specified in this property is too small to fit the nodes included in this group (swim lane),
     * the width is increased accordingly.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinWidth(
      /**
       * New value for property `minWidth`
       */
      fMinWidth?: float
    ): this;
    /**
     * Sets a new value for property {@link #getParentGroupKey parentGroupKey}.
     *
     * Key of the parent group. Can be used only with the `TwoColumns` layout.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setParentGroupKey(
      /**
       * New value for property `parentGroupKey`
       */
      sParentGroupKey?: string
    ): this;
  }
  export default Group;

  export interface $GroupSettings extends $ElementBaseSettings {
    /**
     * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
     * the checkbox is hidden.
     */
    headerCheckBoxState?:
      | (
          | networkgraph.HeaderCheckboxState
          | keyof typeof networkgraph.HeaderCheckboxState
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The key of the group. This key is used to assign nodes to groups.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Defines whether the group is collapsed. By default, it is expanded.
     */
    collapsed?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * An icon associated with the group.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Minimal width of the group (swim lane) for the `SwimLanes` type of {@link sap.suite.ui.commons.networkgraph.LayoutRenderType}.
     *  If not specified, the width of the group (swim lane) is defined automatically, based on the width of
     * the nodes included in the swim lane.
     *  If the width specified in this property is too small to fit the nodes included in this group (swim lane),
     * the width is increased accordingly.
     */
    minWidth?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Key of the parent group. Can be used only with the `TwoColumns` layout.
     */
    parentGroupKey?: string | PropertyBindingInfo;

    /**
     * This event is fired when the user selects or clears the Header checkbox.
     */
    headerCheckBoxPress?: (
      oEvent: Event<$GroupHeaderCheckBoxPressEventParameters>
    ) => void;

    /**
     * This event is fired when the user clicks or taps the collapse/expand button.
     */
    collapseExpand?: (oEvent: Event) => void;

    /**
     * This event is fired when the user clicks or taps the group's details button.
     */
    showDetail?: (oEvent: Event) => void;
  }

  export interface $GroupCollapseExpandEventParameters {}

  export interface $GroupHeaderCheckBoxPressEventParameters {
    /**
     * Indicates whether checkbox is selected.
     */
    checked?: boolean;
  }

  export interface $GroupShowDetailEventParameters {}
}

declare module "sap/suite/ui/commons/networkgraph/layout/ForceBasedLayout" {
  import {
    default as LayoutAlgorithm,
    $LayoutAlgorithmSettings,
  } from "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import LayoutTask from "sap/suite/ui/commons/networkgraph/layout/LayoutTask";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * This algorithm uses D3.force algorithm to layout the graph. It's good if the graph is too complicated
   * and LayeredLayout is not sufficient.
   */
  class ForceBasedLayout extends LayoutAlgorithm {
    /**
     * Constructor for a new ForceBasedLayout.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ForceBasedLayout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAlpha alpha}.
     *
     * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#alpha}
     *
     * Default value is `0.3`.
     *
     * @returns Value of property `alpha`
     */
    getAlpha(): float;
    /**
     * Gets current value of property {@link #getCharge charge}.
     *
     * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#charge}
     *
     * Default value is `-30`.
     *
     * @returns Value of property `charge`
     */
    getCharge(): float;
    /**
     * Gets current value of property {@link #getFriction friction}.
     *
     * Value in [0,1] range. See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#friction}
     *
     * Default value is `0.9`.
     *
     * @returns Value of property `friction`
     */
    getFriction(): float;
    /**
     * Gets the type of the layout algorithm that defines the visual features and layout of the network graph.
     */
    getLayoutRenderType():
      | networkgraph.LayoutRenderType
      | keyof typeof networkgraph.LayoutRenderType;
    /**
     * Gets current value of property {@link #getMaximumDuration maximumDuration}.
     *
     * Specifies the maximal time in miliseconds the algorithm is allowed to run.
     *
     * Default value is `1000`.
     *
     * @returns Value of property `maximumDuration`
     */
    getMaximumDuration(): int;
    /**
     * Specifies if this layouting algorithm distributes nodes into layers. Parent graph may change behaviour
     * based on this option.
     *
     * @returns Always false
     */
    isLayered(): boolean;
    /**
     * Executes the layouting algorithm.
     *
     * @returns Task to get the layout calculated.
     */
    layout(): LayoutTask;
    /**
     * Sets a new value for property {@link #getAlpha alpha}.
     *
     * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#alpha}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0.3`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAlpha(
      /**
       * New value for property `alpha`
       */
      fAlpha?: float
    ): this;
    /**
     * Sets a new value for property {@link #getCharge charge}.
     *
     * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#charge}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-30`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCharge(
      /**
       * New value for property `charge`
       */
      fCharge?: float
    ): this;
    /**
     * Sets a new value for property {@link #getFriction friction}.
     *
     * Value in [0,1] range. See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#friction}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0.9`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFriction(
      /**
       * New value for property `friction`
       */
      fFriction?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMaximumDuration maximumDuration}.
     *
     * Specifies the maximal time in miliseconds the algorithm is allowed to run.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1000`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaximumDuration(
      /**
       * New value for property `maximumDuration`
       */
      iMaximumDuration?: int
    ): this;
  }
  export default ForceBasedLayout;

  export interface $ForceBasedLayoutSettings extends $LayoutAlgorithmSettings {
    /**
     * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#alpha}
     */
    alpha?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#charge}
     */
    charge?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Value in [0,1] range. See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#friction}
     */
    friction?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies the maximal time in miliseconds the algorithm is allowed to run.
     */
    maximumDuration?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/networkgraph/layout/ForceDirectedLayout" {
  import {
    default as LayoutAlgorithm,
    $LayoutAlgorithmSettings,
  } from "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import LayoutTask from "sap/suite/ui/commons/networkgraph/layout/LayoutTask";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.58
   *
   * This algorithm uses the deterministic variant of the force-directed layout algorithm {@link sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout }
   * to arrange the nodes included in the network graph. It can be useful for complex graphs, where {@link sap.suite.ui.commons.networkgraph.layout.LayeredLayout }
   * is not sufficient.
   */
  class ForceDirectedLayout extends LayoutAlgorithm {
    /**
     * Constructor for a new ForceDirectedLayout.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout with name
     * `sClassName` and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ForceDirectedLayout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getCoolDownStep coolDownStep}.
     *
     * Specifies how much the 'temperature' decreases after every iteration.
     *
     * Default value is `1`.
     *
     * @returns Value of property `coolDownStep`
     */
    getCoolDownStep(): float;
    /**
     * Gets current value of property {@link #getInitialTemperature initialTemperature}.
     *
     * Initial 'temperature' of the system, that controls the step width of the nodes' movements and that decreases,
     * or 'cools down', after each iteration.
     *
     * Default value is `200`.
     *
     * @returns Value of property `initialTemperature`
     */
    getInitialTemperature(): float;
    /**
     * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
     */
    getLayoutRenderType():
      | networkgraph.LayoutRenderType
      | keyof typeof networkgraph.LayoutRenderType;
    /**
     * Gets current value of property {@link #getMaxIterations maxIterations}.
     *
     * Maximum number of iterations (or cooldown steps) the layouting process will go through.
     *
     * Default value is `200`.
     *
     * @returns Value of property `maxIterations`
     */
    getMaxIterations(): int;
    /**
     * Gets current value of property {@link #getMaxTime maxTime}.
     *
     * Maximum time in milliseconds the layouting process will run for.
     *
     * Default value is `2000`.
     *
     * @returns Value of property `maxTime`
     */
    getMaxTime(): int;
    /**
     * Gets current value of property {@link #getOptimalDistanceConstant optimalDistanceConstant}.
     *
     * The "C" constant from the optimal distance equation used in the Fruchterman-Reingold Algorithm. See {@link https://www.researchgate.net/publication/309193795_Force-Directed_Graph_Drawing_Algorithm}
     *
     * Default value is `0.2`.
     *
     * @returns Value of property `optimalDistanceConstant`
     */
    getOptimalDistanceConstant(): float;
    /**
     * Gets current value of property {@link #getStaticNodes staticNodes}.
     *
     * List of keys of nodes that should ignore cooldown iterations and keep their original positions (x and
     * y coordinates) in the graph.
     *
     * Default value is `[]`.
     *
     * @returns Value of property `staticNodes`
     */
    getStaticNodes(): string[];
    /**
     * Specifies if this layout algorithm distributes nodes into layers. The parent graph may affect the behaviour
     * based on this option.
     *
     * @returns Always false
     */
    isLayered(): boolean;
    /**
     * Runs the layout algorithm.
     *
     * @returns Task to get the layout calculated.
     */
    layout(): LayoutTask;
    /**
     * Sets a new value for property {@link #getCoolDownStep coolDownStep}.
     *
     * Specifies how much the 'temperature' decreases after every iteration.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCoolDownStep(
      /**
       * New value for property `coolDownStep`
       */
      fCoolDownStep?: float
    ): this;
    /**
     * Sets a new value for property {@link #getInitialTemperature initialTemperature}.
     *
     * Initial 'temperature' of the system, that controls the step width of the nodes' movements and that decreases,
     * or 'cools down', after each iteration.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `200`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInitialTemperature(
      /**
       * New value for property `initialTemperature`
       */
      fInitialTemperature?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMaxIterations maxIterations}.
     *
     * Maximum number of iterations (or cooldown steps) the layouting process will go through.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `200`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxIterations(
      /**
       * New value for property `maxIterations`
       */
      iMaxIterations?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMaxTime maxTime}.
     *
     * Maximum time in milliseconds the layouting process will run for.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2000`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxTime(
      /**
       * New value for property `maxTime`
       */
      iMaxTime?: int
    ): this;
    /**
     * Sets a new value for property {@link #getOptimalDistanceConstant optimalDistanceConstant}.
     *
     * The "C" constant from the optimal distance equation used in the Fruchterman-Reingold Algorithm. See {@link https://www.researchgate.net/publication/309193795_Force-Directed_Graph_Drawing_Algorithm}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0.2`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOptimalDistanceConstant(
      /**
       * New value for property `optimalDistanceConstant`
       */
      fOptimalDistanceConstant?: float
    ): this;
    /**
     * Sets a new value for property {@link #getStaticNodes staticNodes}.
     *
     * List of keys of nodes that should ignore cooldown iterations and keep their original positions (x and
     * y coordinates) in the graph.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStaticNodes(
      /**
       * New value for property `staticNodes`
       */
      sStaticNodes?: string[]
    ): this;
  }
  export default ForceDirectedLayout;

  export interface $ForceDirectedLayoutSettings
    extends $LayoutAlgorithmSettings {
    /**
     * The "C" constant from the optimal distance equation used in the Fruchterman-Reingold Algorithm. See {@link https://www.researchgate.net/publication/309193795_Force-Directed_Graph_Drawing_Algorithm}
     */
    optimalDistanceConstant?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Maximum number of iterations (or cooldown steps) the layouting process will go through.
     */
    maxIterations?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Maximum time in milliseconds the layouting process will run for.
     */
    maxTime?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Initial 'temperature' of the system, that controls the step width of the nodes' movements and that decreases,
     * or 'cools down', after each iteration.
     */
    initialTemperature?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies how much the 'temperature' decreases after every iteration.
     */
    coolDownStep?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * List of keys of nodes that should ignore cooldown iterations and keep their original positions (x and
     * y coordinates) in the graph.
     */
    staticNodes?: string[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/networkgraph/layout/LayeredLayout" {
  import {
    default as LayoutAlgorithm,
    $LayoutAlgorithmSettings,
  } from "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import LayoutTask from "sap/suite/ui/commons/networkgraph/layout/LayoutTask";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * This algorithm uses the klay.js algorithm to rearrange the graph in grid form. It's suitable for process
   * flows and tree-like graphs. It can be used for almost any graph.
   */
  class LayeredLayout extends LayoutAlgorithm {
    /**
     * Constructor for a new LayeredLayout.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.LayeredLayout with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LayeredLayout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.LayeredLayout.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
     */
    getLayoutRenderType():
      | networkgraph.LayoutRenderType
      | keyof typeof networkgraph.LayoutRenderType;
    /**
     * Gets current value of property {@link #getLineSpacingFactor lineSpacingFactor}.
     *
     * Default value is `0.25`.
     *
     * @returns Value of property `lineSpacingFactor`
     */
    getLineSpacingFactor(): float;
    /**
     * Gets current value of property {@link #getMergeEdges mergeEdges}.
     *
     * Determines if all lines should lead to the same place in the node, or if each line should point to a
     * different place.
     *
     * Default value is `false`.
     *
     * @returns Value of property `mergeEdges`
     */
    getMergeEdges(): boolean;
    /**
     * Gets current value of property {@link #getNodePlacement nodePlacement}.
     *
     * A node placement strategy to use (see {@link sap.suite.ui.commons.networkgraph.NodePlacement}).
     *
     * Default value is `BrandesKoepf`.
     *
     * @returns Value of property `nodePlacement`
     */
    getNodePlacement():
      | networkgraph.NodePlacement
      | keyof typeof networkgraph.NodePlacement;
    /**
     * Gets current value of property {@link #getNodeSpacing nodeSpacing}.
     *
     * Define a minimal distance on nodes the algorithm will try to keep. The default value is 55. Note that
     * values below 50 are incompatible with presence of groups due to insufficient space for group title bars
     * and space between nodes and their groups' borders.
     *
     * Default value is `55`.
     *
     * @returns Value of property `nodeSpacing`
     */
    getNodeSpacing(): float;
    /**
     * Executes the layout algorithm.
     *
     * @returns Task to get the layout calculated.
     */
    layout(): LayoutTask;
    /**
     * Sets a new value for property {@link #getLineSpacingFactor lineSpacingFactor}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0.25`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLineSpacingFactor(
      /**
       * New value for property `lineSpacingFactor`
       */
      fLineSpacingFactor?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMergeEdges mergeEdges}.
     *
     * Determines if all lines should lead to the same place in the node, or if each line should point to a
     * different place.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMergeEdges(
      /**
       * New value for property `mergeEdges`
       */
      bMergeEdges?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getNodePlacement nodePlacement}.
     *
     * A node placement strategy to use (see {@link sap.suite.ui.commons.networkgraph.NodePlacement}).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `BrandesKoepf`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNodePlacement(
      /**
       * New value for property `nodePlacement`
       */
      sNodePlacement?:
        | networkgraph.NodePlacement
        | keyof typeof networkgraph.NodePlacement
    ): this;
    /**
     * Sets a new value for property {@link #getNodeSpacing nodeSpacing}.
     *
     * Define a minimal distance on nodes the algorithm will try to keep. The default value is 55. Note that
     * values below 50 are incompatible with presence of groups due to insufficient space for group title bars
     * and space between nodes and their groups' borders.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `55`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNodeSpacing(
      /**
       * New value for property `nodeSpacing`
       */
      fNodeSpacing?: float
    ): this;
  }
  export default LayeredLayout;

  export interface $LayeredLayoutSettings extends $LayoutAlgorithmSettings {
    /**
     * Define a minimal distance on nodes the algorithm will try to keep. The default value is 55. Note that
     * values below 50 are incompatible with presence of groups due to insufficient space for group title bars
     * and space between nodes and their groups' borders.
     */
    nodeSpacing?: float | PropertyBindingInfo | `{${string}}`;

    lineSpacingFactor?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * A node placement strategy to use (see {@link sap.suite.ui.commons.networkgraph.NodePlacement}).
     */
    nodePlacement?:
      | (networkgraph.NodePlacement | keyof typeof networkgraph.NodePlacement)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Determines if all lines should lead to the same place in the node, or if each line should point to a
     * different place.
     */
    mergeEdges?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import LayoutTask from "sap/suite/ui/commons/networkgraph/layout/LayoutTask";

  /**
   * @SINCE 1.50
   *
   * This is an abstract base class for Layout Algorithms.
   */
  class LayoutAlgorithm extends UI5Element {
    /**
     * Constructor for a new LayoutingAlgorithm.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element }
     * can be used.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LayoutAlgorithm>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     */
    _alignCoordinatesWithView(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     *
     * @returns True if there are hierarchical groups, false otherwise.
     */
    _hasHierarchicalGroups(): boolean;
    /**
     * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
     */
    getType(): /* was: sap.suite.ui.commons.networkgraph.LayoutType */ any;
    /**
     * Specifies if this layouting algorithm distributes nodes into layers. Parent graph may change behaviour
     * based on this option.
     */
    isLayered(): boolean;
    /**
     * Executes the layouting algorithm.
     */
    layout(): LayoutTask;
  }
  export default LayoutAlgorithm;

  export interface $LayoutAlgorithmSettings extends $ElementSettings {}
}

declare module "sap/suite/ui/commons/networkgraph/layout/LayoutTask" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.50
   *
   * A layout task is a wrapper around Promise which allows the caller to terminate the task. A terminated
   * layout task should not modify the graph associated with it.
   */
  class LayoutTask extends BaseObject {
    /**
     * Constructor for a new LayoutTask.
     */
    constructor(
      /**
       * A function to be called from Promise main body. It gets
       */
      fnPromiseCallback: Function
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.LayoutTask with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LayoutTask>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.LayoutTask.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
  export default LayoutTask;
}

declare module "sap/suite/ui/commons/networkgraph/layout/NoopLayout" {
  import {
    default as LayoutAlgorithm,
    $LayoutAlgorithmSettings,
  } from "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import LayoutTask from "sap/suite/ui/commons/networkgraph/layout/LayoutTask";

  /**
   * @SINCE 1.50
   *
   * This is a simple layout algorithm that expects the positions of nodes to be already present. It only
   * creates line coordinates (see {@link sap.suite.ui.commons.networkgraph.Line#setCoordinates}).
   */
  class NoopLayout extends LayoutAlgorithm {
    /**
     * Constructor for a new NoopLayout.
     */
    constructor();

    /**
     * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
     */
    getLayoutRenderType():
      | networkgraph.LayoutRenderType
      | keyof typeof networkgraph.LayoutRenderType;
    /**
     * Executes the layout algorithm.
     *
     * @returns Task to get the layout calculated.
     */
    layout(): LayoutTask;
  }
  export default NoopLayout;

  export interface $NoopLayoutSettings extends $LayoutAlgorithmSettings {}
}

declare module "sap/suite/ui/commons/networkgraph/layout/SwimLaneChainLayout" {
  import {
    default as LayoutAlgorithm,
    $LayoutAlgorithmSettings,
  } from "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import LayoutTask from "sap/suite/ui/commons/networkgraph/layout/LayoutTask";

  /**
   * @SINCE 1.58
   *
   * This algorithm uses the klay.js algorithm to rearrange the graph in grid form. It's suitable for process
   * flows and tree-like graphs. It can be used for almost any graph.
   */
  class SwimLaneChainLayout extends LayoutAlgorithm {
    /**
     * Constructor for a new SwimLaneChainLayout.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm#constructor sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm }
     * can be used.
     */
    constructor();

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * In this override of the generic method for all layouts we want to avoid global margin.
     */
    _alignCoordinatesWithView(): void;
    /**
     * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
     */
    getLayoutRenderType():
      | networkgraph.LayoutRenderType
      | keyof typeof networkgraph.LayoutRenderType;
    /**
     * Executes the layout algorithm.
     *
     * @returns Task to get the layout calculated.
     */
    layout(): LayoutTask;
  }
  export default SwimLaneChainLayout;

  export interface $SwimLaneChainLayoutSettings
    extends $LayoutAlgorithmSettings {}
}

declare module "sap/suite/ui/commons/networkgraph/layout/TwoColumnsLayout" {
  import {
    default as LayoutAlgorithm,
    $LayoutAlgorithmSettings,
  } from "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import LayoutTask from "sap/suite/ui/commons/networkgraph/layout/LayoutTask";

  /**
   * @SINCE 1.63
   *
   * This algorithm rearranges the graph into two columns.
   */
  class TwoColumnsLayout extends LayoutAlgorithm {
    /**
     * Constructor for a new TwoColumnsLayout.
     */
    constructor();

    /**
     * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
     */
    getLayoutRenderType():
      | networkgraph.LayoutRenderType
      | keyof typeof networkgraph.LayoutRenderType;
    /**
     * Executes the layout algorithm.
     *
     * @returns Task to get the layout calculated.
     */
    layout(): LayoutTask;
  }
  export default TwoColumnsLayout;

  export interface $TwoColumnsLayoutSettings extends $LayoutAlgorithmSettings {}
}

declare module "sap/suite/ui/commons/networkgraph/Line" {
  import {
    default as ElementBase,
    $ElementBaseSettings,
  } from "sap/suite/ui/commons/networkgraph/ElementBase";

  import ActionButton from "sap/suite/ui/commons/networkgraph/ActionButton";

  import Coordinate from "sap/suite/ui/commons/networkgraph/Coordinate";

  import Event from "sap/ui/base/Event";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Holds information about one connector line.
   */
  class Line extends ElementBase {
    /**
     * Constructor for a new Line.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Line with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.ElementBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Line>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Line.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some actionButton to the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addActionButton(
      /**
       * The actionButton to add; if empty, nothing is inserted
       */
      oActionButton: ActionButton
    ): this;
    /**
     * Adds coordinates for points that should define the shape of the line between its start and end points.
     * This method doesn't call invalidate on the object.
     *
     * @returns Newly added coordinates object
     */
    addBend(
      /**
       * X and Y coordinates
       */
      oPoint: {
        x: float;

        y: float;
      }
    ): Coordinate;
    /**
     * Adds some coordinate to the aggregation {@link #getCoordinates coordinates}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCoordinate(
      /**
       * The coordinate to add; if empty, nothing is inserted
       */
      oCoordinate: Coordinate
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
     *
     * This event is fired when the user moves the mouse pointer over the line.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHover(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
     *
     * This event is fired when the user moves the mouse pointer over the line.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHover(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
     *
     * This event is fired when the user clicks or taps the line.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$LinePressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Line`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
     *
     * This event is fired when the user clicks or taps the line.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$LinePressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Removes all points that define the shape of the line between its start and end points. This method doesn't
     * call invalidate on the object.
     */
    clearBends(): void;
    /**
     * Destroys all the actionButtons in the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyActionButtons(): this;
    /**
     * Destroys all the coordinates in the aggregation {@link #getCoordinates coordinates}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCoordinates(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Line`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHover(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Line`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$LinePressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:hover hover} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHover(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $LinePressEventParameters
    ): this;
    /**
     * Gets content of aggregation {@link #getActionButtons actionButtons}.
     *
     * A list of custom action buttons.
     */
    getActionButtons(): ActionButton[];
    /**
     * Gets current value of property {@link #getArrowOrientation arrowOrientation}.
     *
     * Orientation of the line that defines the direction of the arrow.
     *
     * Default value is `ParentOf`.
     *
     * @returns Value of property `arrowOrientation`
     */
    getArrowOrientation():
      | networkgraph.LineArrowOrientation
      | keyof typeof networkgraph.LineArrowOrientation;
    /**
     * Gets current value of property {@link #getArrowPosition arrowPosition}.
     *
     * Position of the arrow on the line. Can be set to End, Middle, or Start.
     *
     * Default value is `End`.
     *
     * @returns Value of property `arrowPosition`
     */
    getArrowPosition():
      | networkgraph.LineArrowPosition
      | keyof typeof networkgraph.LineArrowPosition;
    /**
     * Returns the coordinates of all points that define the shape of the line between its start and end points.
     * This method doesn't call invalidate on the object.
     *
     * @returns Coordinates of the points shaping the line
     */
    getBends(): Coordinate[];
    /**
     * Gets content of aggregation {@link #getCoordinates coordinates}.
     *
     * A list of points the line goes through. After the layouting algorithm has finished arranging the graph,
     * this aggregation contains the coordinates of at least two points: the starting point and the end point
     * of the line. The rest of the points making up the line are treated as break points.
     */
    getCoordinates(): Coordinate[];
    /**
     * Gets current value of property {@link #getFrom from}.
     *
     * Key of the node where the line begins.
     *
     * @returns Value of property `from`
     */
    getFrom(): string;
    /**
     * Returns the node instance where the line starts. This method doesn't call invalidate on the object.
     *
     * @returns Node instance where the line starts
     */
    getFromNode(): object;
    /**
     * Gets current value of property {@link #getLineType lineType}.
     *
     * Defines the appearance of the line. Can be set to solid, dashed, or dotted.
     *
     * Default value is `Solid`.
     *
     * @returns Value of property `lineType`
     */
    getLineType(): networkgraph.LineType | keyof typeof networkgraph.LineType;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Shows if the line is selected. Once the line is selected, its appearance changes slightly to distinguish
     * it from other lines.
     *
     * Default value is `false`.
     *
     * @returns Value of property `selected`
     */
    getSelected(): boolean;
    /**
     * Returns the coordinates of the line's starting point. This method doesn't call invalidate on the object.
     *
     * @returns Coordinate object
     */
    getSource(): Coordinate;
    /**
     * Gets current value of property {@link #getStretchToCenter stretchToCenter}.
     *
     * Extends the line up to the node's horizontal or vertical axis to ensure that it meets the shape's outline
     * even when a fancy shape is used.
     *  Available for custom nodes only.
     *
     * Default value is `false`.
     *
     * @returns Value of property `stretchToCenter`
     */
    getStretchToCenter(): boolean;
    /**
     * Returns the coordinates of the line's end point. This method doesn't call invalidate on the object.
     *
     * @returns Coordinate object
     */
    getTarget(): Coordinate;
    /**
     * Gets current value of property {@link #getTo to}.
     *
     * Key of the node the line leads to.
     *
     * @returns Value of property `to`
     */
    getTo(): string;
    /**
     * Returns the node instance where the line leads to. This method doesn't call invalidate on the object.
     *
     * @returns Node instance where the line ends
     */
    getToNode(): object;
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.ActionButton` in the aggregation {@link #getActionButtons actionButtons}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfActionButton(
      /**
       * The actionButton whose index is looked for
       */
      oActionButton: ActionButton
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.Coordinate` in the aggregation {@link #getCoordinates coordinates}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCoordinate(
      /**
       * The coordinate whose index is looked for
       */
      oCoordinate: Coordinate
    ): int;
    /**
     * Inserts a actionButton into the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertActionButton(
      /**
       * The actionButton to insert; if empty, nothing is inserted
       */
      oActionButton: ActionButton,
      /**
       * The `0`-based index the actionButton should be inserted at; for a negative value of `iIndex`, the actionButton
       * is inserted at position 0; for a value greater than the current size of the aggregation, the actionButton
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a coordinate into the aggregation {@link #getCoordinates coordinates}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCoordinate(
      /**
       * The coordinate to insert; if empty, nothing is inserted
       */
      oCoordinate: Coordinate,
      /**
       * The `0`-based index the coordinate should be inserted at; for a negative value of `iIndex`, the coordinate
       * is inserted at position 0; for a value greater than the current size of the aggregation, the coordinate
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes a actionButton from the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns The removed actionButton or `null`
     */
    removeActionButton(
      /**
       * The actionButton to remove or its index or id
       */
      vActionButton: int | string | ActionButton
    ): ActionButton | null;
    /**
     * Removes all the controls from the aggregation {@link #getActionButtons actionButtons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllActionButtons(): ActionButton[];
    /**
     * Removes all the controls from the aggregation {@link #getCoordinates coordinates}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCoordinates(): Coordinate[];
    /**
     * Removes a coordinate from the aggregation {@link #getCoordinates coordinates}.
     *
     * @returns The removed coordinate or `null`
     */
    removeCoordinate(
      /**
       * The coordinate to remove or its index or id
       */
      vCoordinate: int | string | Coordinate
    ): Coordinate | null;
    /**
     * Sets a new value for property {@link #getArrowOrientation arrowOrientation}.
     *
     * Orientation of the line that defines the direction of the arrow.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `ParentOf`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setArrowOrientation(
      /**
       * New value for property `arrowOrientation`
       */
      sArrowOrientation?:
        | networkgraph.LineArrowOrientation
        | keyof typeof networkgraph.LineArrowOrientation
    ): this;
    /**
     * Sets a new value for property {@link #getArrowPosition arrowPosition}.
     *
     * Position of the arrow on the line. Can be set to End, Middle, or Start.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `End`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setArrowPosition(
      /**
       * New value for property `arrowPosition`
       */
      sArrowPosition?:
        | networkgraph.LineArrowPosition
        | keyof typeof networkgraph.LineArrowPosition
    ): this;
    /**
     * Sets a new value for property {@link #getFrom from}.
     *
     * Key of the node where the line begins.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFrom(
      /**
       * New value for property `from`
       */
      sFrom?: string
    ): this;
    /**
     * Hides the line.
     */
    setHidden(): void;
    /**
     * Sets a new value for property {@link #getLineType lineType}.
     *
     * Defines the appearance of the line. Can be set to solid, dashed, or dotted.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Solid`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLineType(
      /**
       * New value for property `lineType`
       */
      sLineType?: networkgraph.LineType | keyof typeof networkgraph.LineType
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Shows if the line is selected. Once the line is selected, its appearance changes slightly to distinguish
     * it from other lines.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets the starting point, or the source, for the line. This method doesn't call invalidate on the object.
     */
    setSource(
      /**
       * mArguments.x mArguments.y X and Y coordinates of the starting point
       */
      mArguments: object
    ): void;
    /**
     * Sets a new value for property {@link #getStretchToCenter stretchToCenter}.
     *
     * Extends the line up to the node's horizontal or vertical axis to ensure that it meets the shape's outline
     * even when a fancy shape is used.
     *  Available for custom nodes only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStretchToCenter(
      /**
       * New value for property `stretchToCenter`
       */
      bStretchToCenter?: boolean
    ): this;
    /**
     * Sets the end point, or the target, for the line. This method doesn't call invalidate on the object.
     */
    setTarget(
      /**
       * mArguments.x mArguments.y X and Y coordinates of the end point
       */
      mArguments: object
    ): void;
    /**
     * Sets a new value for property {@link #getTo to}.
     *
     * Key of the node the line leads to.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTo(
      /**
       * New value for property `to`
       */
      sTo?: string
    ): this;
  }
  export default Line;

  export interface $LineSettings extends $ElementBaseSettings {
    /**
     * Shows if the line is selected. Once the line is selected, its appearance changes slightly to distinguish
     * it from other lines.
     */
    selected?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Key of the node where the line begins.
     */
    from?: string | PropertyBindingInfo;

    /**
     * Key of the node the line leads to.
     */
    to?: string | PropertyBindingInfo;

    /**
     * Defines the appearance of the line. Can be set to solid, dashed, or dotted.
     */
    lineType?:
      | (networkgraph.LineType | keyof typeof networkgraph.LineType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Position of the arrow on the line. Can be set to End, Middle, or Start.
     */
    arrowPosition?:
      | (
          | networkgraph.LineArrowPosition
          | keyof typeof networkgraph.LineArrowPosition
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Orientation of the line that defines the direction of the arrow.
     */
    arrowOrientation?:
      | (
          | networkgraph.LineArrowOrientation
          | keyof typeof networkgraph.LineArrowOrientation
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Extends the line up to the node's horizontal or vertical axis to ensure that it meets the shape's outline
     * even when a fancy shape is used.
     *  Available for custom nodes only.
     */
    stretchToCenter?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * A list of points the line goes through. After the layouting algorithm has finished arranging the graph,
     * this aggregation contains the coordinates of at least two points: the starting point and the end point
     * of the line. The rest of the points making up the line are treated as break points.
     */
    coordinates?:
      | Coordinate[]
      | Coordinate
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * A list of custom action buttons.
     */
    actionButtons?:
      | ActionButton[]
      | ActionButton
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * This event is fired when the user moves the mouse pointer over the line.
     */
    hover?: (oEvent: Event) => void;

    /**
     * This event is fired when the user clicks or taps the line.
     */
    press?: (oEvent: Event<$LinePressEventParameters>) => void;
  }

  export interface $LineHoverEventParameters {}

  export interface $LinePressEventParameters {
    /**
     * Coordinates of the cursor when pressed.
     */
    point?: Object;

    /**
     * Object you can pass to 'openBy' method for custom tooltip. Its important for lines where you want to
     * display tooltip precisely where the cursor is.
     */
    opener?: Object;
  }
}

declare module "sap/suite/ui/commons/networkgraph/Node" {
  import {
    default as ElementBase,
    $ElementBaseSettings,
  } from "sap/suite/ui/commons/networkgraph/ElementBase";

  import ActionButton from "sap/suite/ui/commons/networkgraph/ActionButton";

  import Control from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { networkgraph } from "sap/suite/ui/commons/library";

  import NodeImage from "sap/suite/ui/commons/networkgraph/NodeImage";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Holds information about one node. When changing the size of the node after the graph is rendered, you
   * have to manually invalidate the graph, which causes the layout algorithm to be applied again.
   */
  class Node extends ElementBase {
    /**
     * Constructor for a new Node.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Node with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.ElementBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Node>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Node.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some actionButton to the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addActionButton(
      /**
       * The actionButton to add; if empty, nothing is inserted
       */
      oActionButton: ActionButton
    ): this;
    /**
     * Adds some actionLink to the aggregation {@link #getActionLinks actionLinks}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addActionLink(
      /**
       * The actionLink to add; if empty, nothing is inserted
       */
      oActionLink: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
     * `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user clicks the node's collapse/expand button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCollapseExpand(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
     * `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user clicks the node's collapse/expand button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCollapseExpand(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
     * of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user selects or clears the Header checkbox.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeaderCheckBoxPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NodeHeaderCheckBoxPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
     * of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user selects or clears the Header checkbox.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeaderCheckBoxPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NodeHeaderCheckBoxPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user moves the mouse pointer over the node.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHover(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user moves the mouse pointer over the node.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHover(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user clicks or taps the node.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
     *
     * This event is fired when the user clicks or taps the node.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Determines node sizes, applies text trimming, arranges the text into lines, and makes other necessary
     * adjustments.
     *
     *
     * This method can only be overridden when custom rendering is used. It must never be called directly.
     */
    calculateSizes(): any;
    /**
     * Returns an object that includes an array of text lines and the height of a single line.
     */
    computeTextDimensions(
      /**
       * Arguments passed to the method
       */
      mArguments?: {
        /**
         * Additional attributes appended to the text
         */
        attributes?: Object;
        /**
         * Width of the text is trimmed to
         */
        width?: int;
        /**
         * Text to trim
         */
        text?: string;
      }
    ): void;
    /**
     * Destroys all the actionButtons in the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyActionButtons(): this;
    /**
     * Destroys all the actionLinks in the aggregation {@link #getActionLinks actionLinks}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyActionLinks(): this;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Destroys the image in the aggregation {@link #getImage image}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyImage(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:collapseExpand collapseExpand} event of this
     * `sap.suite.ui.commons.networkgraph.Node`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCollapseExpand(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
     * of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHeaderCheckBoxPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NodeHeaderCheckBoxPressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHover(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Node`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:collapseExpand collapseExpand} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCollapseExpand(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:headerCheckBoxPress headerCheckBoxPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHeaderCheckBoxPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NodeHeaderCheckBoxPressEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:hover hover} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHover(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getActionButtons actionButtons}.
     *
     * A list of custom action buttons. These buttons are displayed in the button area for each node. A node
     * may have up to 4 buttons. The default 3 buttons (collapse/expand, details, and links) have priority over
     * any other custom buttons that you add. If you want all 4 of your custom buttons to be displayed, set
     * the visibility of the default buttons to false.
     */
    getActionButtons(): ActionButton[];
    /**
     * Gets content of aggregation {@link #getActionLinks actionLinks}.
     *
     * A list of links to be shown in the links area. A link may point to any UI5 control. It's up to the caller
     * to set up all necessary callback functions.
     */
    getActionLinks(): Control[];
    /**
     * @SINCE 1.112
     *
     * Gets current value of property {@link #getAltText altText}.
     *
     * In the absence of a title, alternate texts can be used to identify the nodes.
     *
     * @returns Value of property `altText`
     */
    getAltText(): string;
    /**
     * Returns center position of the node.
     *
     * @returns Object with X and Y coordinates of the center of the node. For circular nodes, this method returns
     * the center of the circle.
     */
    getCenterPosition(): Object;
    /**
     * Returns all lines connected to the child nodes.
     *
     * @returns Array of lines connecting this node with its child nodes
     */
    getChildLines(): any[];
    /**
     * Returns all child nodes.
     *
     * @returns Array with child nodes
     */
    getChildNodes(): any[];
    /**
     * Gets current value of property {@link #getCollapsed collapsed}.
     *
     * Defines if the subtree of this node is collapsed. By default, it is expanded.
     *
     * Default value is `false`.
     *
     * @returns Value of property `collapsed`
     */
    getCollapsed(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Custom content rendered with the node. Available only for rectangular nodes with HTML rendering type.
     * When this aggregation is used, the description and attributes of {@link sap.suite.ui.commons.networkgraph.ElementBase }
     * are ignored.
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getCoreNodeSize coreNodeSize}.
     *
     * Determines the size of a custom node, which can be useful for nodes that have text or other content outside
     * of its shape.
     * This property is available for custom nodes only.
     *
     * Default value is `0`.
     *
     * @returns Value of property `coreNodeSize`
     */
    getCoreNodeSize(): int;
    /**
     * Gets current value of property {@link #getDescriptionLineSize descriptionLineSize}.
     *
     * Determines the maximum number of lines allowed to be displayed in the node's description. If you want
     * to hide the description, set this property to `-1` (default). To display an unlimited number of lines,
     * set this property to `0`. This property does not affect the description that appears in the tooltip,
     * which is always fully rendered.
     *
     * Default value is `-1`.
     *
     * @returns Value of property `descriptionLineSize`
     */
    getDescriptionLineSize(): int;
    /**
     * Gets the node's action buttons that are enabled.
     *
     * @returns Returns an array of enabled action buttons.
     */
    getEnabledActionButtons(): any[];
    /**
     * Gets current value of property {@link #getGroup group}.
     *
     * Key of the group where this node is included.
     *
     * @returns Value of property `group`
     */
    getGroup(): string;
    /**
     * Returns header checkbox object
     */
    getHeaderCheckbox(): void;
    /**
     * Gets current value of property {@link #getHeaderCheckBoxState headerCheckBoxState}.
     *
     * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
     * the checkbox is hidden. Available only for box nodes.
     *
     * Default value is `Hidden`.
     *
     * @returns Value of property `headerCheckBoxState`
     */
    getHeaderCheckBoxState():
      | networkgraph.HeaderCheckboxState
      | keyof typeof networkgraph.HeaderCheckboxState;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the node. In circular nodes, it determines the circle diameter.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `height`
     */
    getHeight(): int;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * An icon associated with the element.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Gets current value of property {@link #getIconSize iconSize}.
     *
     * Determines the size of the node's icon. This property can be applied only to circular nodes.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `iconSize`
     */
    getIconSize(): int;
    /**
     * Gets content of aggregation {@link #getImage image}.
     *
     * The image that is displayed in the node's header instead of the icon.
     */
    getImage(): NodeImage;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Key of the node. This key is used throughout the DOM to reference this node, mainly in the connector
     * line (Line) elements of the graph.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getMaxWidth maxWidth}.
     *
     * Maximum width allowed. The auto grow algorithm stops increasing the width at this value.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `maxWidth`
     */
    getMaxWidth(): int;
    /**
     * Returns all lines connected to the parent nodes.
     *
     * @returns Array with lines connecting this node with its parent nodes
     */
    getParentLines(): any[];
    /**
     * Returns all parent nodes.
     *
     * @returns Array with all parent nodes
     */
    getParentNodes(): any[];
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Shows if the node is selected. Once the node is selected, its appearance changes slightly to distinguish
     * it from other nodes.
     *
     * Default value is `false`.
     *
     * @returns Value of property `selected`
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getShape shape}.
     *
     * Shape of the node. The shape is round by default. To create a rectangular node, set this property to
     * Box.
     *
     * Default value is `Circle`.
     *
     * @returns Value of property `shape`
     */
    getShape(): networkgraph.NodeShape | keyof typeof networkgraph.NodeShape;
    /**
     * Gets current value of property {@link #getShowActionLinksButton showActionLinksButton}.
     *
     * Determines if the links button is visible.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showActionLinksButton`
     */
    getShowActionLinksButton(): boolean;
    /**
     * Gets current value of property {@link #getShowDetailButton showDetailButton}.
     *
     * Determines if the details button is visible.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showDetailButton`
     */
    getShowDetailButton(): boolean;
    /**
     * Gets current value of property {@link #getShowExpandButton showExpandButton}.
     *
     * Determines if the expand button is visible.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showExpandButton`
     */
    getShowExpandButton(): boolean;
    /**
     * Gets current value of property {@link #getStatusIcon statusIcon}.
     *
     * An additional status icon displayed when the node is collapsed.
     *
     * @returns Value of property `statusIcon`
     */
    getStatusIcon(): string;
    /**
     * Gets current value of property {@link #getTitleLineSize titleLineSize}.
     *
     * Determines the maximum number of lines allowed for the node's label. If set to 0, the label may have
     * an unlimited number of lines.
     *
     * Default value is `1`.
     *
     * @returns Value of property `titleLineSize`
     */
    getTitleLineSize(): int;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Whether the control should be visible on the screen. Node is still used for layouter.
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the node. If the width is not defined, the node expands, so it can fit the content.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `width`
     */
    getWidth(): int;
    /**
     * Gets current value of property {@link #getX x}.
     *
     * The x coordinate of the node. This value must be set after the layout algorithm has finished arranging
     * the graph. It may come from the input data but is not required for most layout algorithms.
     * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
     * property. However, you can still change it using an `afterLayouting` event.
     *
     * Default value is `0`.
     *
     * @returns Value of property `x`
     */
    getX(): float;
    /**
     * Gets current value of property {@link #getY y}.
     *
     * The y coordinate of the node. This value must be set after the layout algorithm has finished arranging
     * the graph. It may come from the input data but is not required for most layout algorithms.
     * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
     * property. However, you can still change it using an `afterLayouting` event.
     *
     * Default value is `0`.
     *
     * @returns Value of property `y`
     */
    getY(): float;
    /**
     * Checks whether the node has visible action buttons
     *
     * @returns Returns true if node has action buttons displayed.
     */
    hasVisibleActionButtons(): boolean;
    /**
     * Checks for the provided `sap.suite.ui.commons.networkgraph.ActionButton` in the aggregation {@link #getActionButtons actionButtons}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfActionButton(
      /**
       * The actionButton whose index is looked for
       */
      oActionButton: ActionButton
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getActionLinks actionLinks}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfActionLink(
      /**
       * The actionLink whose index is looked for
       */
      oActionLink: Control
    ): int;
    /**
     * Inserts a actionButton into the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertActionButton(
      /**
       * The actionButton to insert; if empty, nothing is inserted
       */
      oActionButton: ActionButton,
      /**
       * The `0`-based index the actionButton should be inserted at; for a negative value of `iIndex`, the actionButton
       * is inserted at position 0; for a value greater than the current size of the aggregation, the actionButton
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a actionLink into the aggregation {@link #getActionLinks actionLinks}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertActionLink(
      /**
       * The actionLink to insert; if empty, nothing is inserted
       */
      oActionLink: Control,
      /**
       * The `0`-based index the actionLink should be inserted at; for a negative value of `iIndex`, the actionLink
       * is inserted at position 0; for a value greater than the current size of the aggregation, the actionLink
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Indicates whether the node is hidden by collapsing any of its parent nodes.
     *
     * @returns `true` if the node is hidden
     */
    isHidden(): boolean | any;
    /**
     * Removes a actionButton from the aggregation {@link #getActionButtons actionButtons}.
     *
     * @returns The removed actionButton or `null`
     */
    removeActionButton(
      /**
       * The actionButton to remove or its index or id
       */
      vActionButton: int | string | ActionButton
    ): ActionButton | null;
    /**
     * Removes a actionLink from the aggregation {@link #getActionLinks actionLinks}.
     *
     * @returns The removed actionLink or `null`
     */
    removeActionLink(
      /**
       * The actionLink to remove or its index or id
       */
      vActionLink: int | string | Control
    ): Control | null;
    /**
     * Removes all the controls from the aggregation {@link #getActionButtons actionButtons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllActionButtons(): ActionButton[];
    /**
     * Removes all the controls from the aggregation {@link #getActionLinks actionLinks}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllActionLinks(): Control[];
    /**
     * This method can only be overridden when custom rendering is used. It must never be called directly.
     */
    renderContent(
      /**
       * Options passed to the method
       */
      mOptions?: {
        /**
         * If `true`, the size is determined for the purposes of text trimming and other resizing operations that
         * are performed later, just before the final rendering of the graph, not when the method is called.
         *  If you don't plan to trim text or resize the node, skip the rendering if you set this property to `true`.
         */
        sizeDetermination?: boolean;
      }
    ): any;
    /**
     * Creates an SVG element string.
     *
     * @returns SVG icon string
     */
    renderElement(
      /**
       * Name of the element
       */
      name?: string,
      /**
       * Attributes of the element.
       */
      mAttributes?: string,
      /**
       * Indicates whether to close the element. If set to `false`, the caller is responsible for adding a closing
       * tag.
       */
      bClose?: boolean
    ): string;
    /**
     * Renders wrappers for HTML action buttons. Used for custom rendering.
     */
    renderHtmlActionButtons(
      /**
       * Options passed to the method (optional).
       */
      mOptions?: {
        /**
         * Suffix (optional). When the suffix is specified, it is added to the IDs of the wrappers.
         */
        idSufix?: string;
      }
    ): string;
    /**
     * Creates HTML representation of an icon.
     *
     * @returns HTML icon
     */
    renderHtmlIcon(
      /**
       * icon to render
       */
      sIcon: undefined,
      /**
       * Options passed to the method (optional).
       */
      mOptions?: Object
    ): string;
    /**
     * Renders custom info icon for HTML rendering.
     */
    renderHtmlInfoIcon(
      /**
       * Object with additional style appended to info icon
       */
      oStyle: object,
      /**
       * Options passed to the method (optional).
       */
      mOptions?: Object
    ): void;
    /**
     * Creates an SVG icon string.
     *
     * @returns SVG icon string
     */
    renderIcon(
      /**
       * Arguments passed to the method
       */
      mArguments?: {
        /**
         * Icon name, based on the SAP icon font
         */
        icon?: string;
        /**
         * X coordinate that is added to node's top left x coordinate.
         */
        x?: int;
        /**
         * Y coordinate that is added to node's top left y coordinate.
         */
        y?: int;
        /**
         * Additional attributes rendered with the text
         */
        attributes?: Object;
      }
    ): string;
    /**
     * This method can only be overridden when custom rendering is used. It must never be called directly.
     */
    renderItemContent(
      /**
       * Options passed to the method
       */
      mOptions?: {
        /**
         * If `true`, the size is determined for the purposes of text trimming and other resizing operations that
         * are performed later, just before the final rendering of the graph, not when the method is called.
         *  If you don't plan to trim text or resize the node, skip the rendering if you set this property to `true`.
         */
        sizeDetermination?: boolean;
      }
    ): any;
    /**
     * Renders the status icon. Can be called directly or overridden when custom rendering is used.
     */
    renderStatusIcon(
      /**
       * Options passed to the method
       */
      mParameters?: Object
    ): void;
    /**
     * Renders the text of the node as SVG. Either text or lines of text must be passed to this method as an
     * argument.
     *
     * @returns Text string rendered as SVG
     */
    renderText(
      /**
       * Arguments passed to the method
       */
      mArguments?: {
        /**
         * Text to render, available only for single-line text. Rendered as it is, cannot be used for trim or any
         * other similar operation
         */
        text?: string;
        /**
         * Array with lines of text. Words are spread across multiple lines
         */
        lines?: any[];
        /**
         * X coordinate that is added to the node's top left x coordinate
         */
        x?: int;
        /**
         * Y coordinate that is added to the node's top left y coordinate
         */
        y?: int;
        /**
         * Line size for the node, if not set, the default line size is used
         */
        lineSize?: int;
        /**
         * Additional attributes rendered with the text
         */
        attributes?: Object;
      }
    ): string;
    /**
     * @SINCE 1.112
     *
     * Sets a new value for property {@link #getAltText altText}.
     *
     * In the absence of a title, alternate texts can be used to identify the nodes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAltText(
      /**
       * New value for property `altText`
       */
      sAltText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getCollapsed collapsed}.
     *
     * Defines if the subtree of this node is collapsed. By default, it is expanded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCollapsed(
      /**
       * New value for property `collapsed`
       */
      bCollapsed?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getCoreNodeSize coreNodeSize}.
     *
     * Determines the size of a custom node, which can be useful for nodes that have text or other content outside
     * of its shape.
     * This property is available for custom nodes only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCoreNodeSize(
      /**
       * New value for property `coreNodeSize`
       */
      iCoreNodeSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getDescriptionLineSize descriptionLineSize}.
     *
     * Determines the maximum number of lines allowed to be displayed in the node's description. If you want
     * to hide the description, set this property to `-1` (default). To display an unlimited number of lines,
     * set this property to `0`. This property does not affect the description that appears in the tooltip,
     * which is always fully rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescriptionLineSize(
      /**
       * New value for property `descriptionLineSize`
       */
      iDescriptionLineSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getGroup group}.
     *
     * Key of the group where this node is included.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroup(
      /**
       * New value for property `group`
       */
      sGroup?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderCheckBoxState headerCheckBoxState}.
     *
     * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
     * the checkbox is hidden. Available only for box nodes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Hidden`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeaderCheckBoxState(
      /**
       * New value for property `headerCheckBoxState`
       */
      sHeaderCheckBoxState?:
        | networkgraph.HeaderCheckboxState
        | keyof typeof networkgraph.HeaderCheckboxState
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the node. In circular nodes, it determines the circle diameter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      iHeight?: int
    ): this;
    /**
     * Hides the node and any lines that lead to it.
     */
    setHidden(
      /**
       * value
       */
      bValue: undefined
    ): void;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * An icon associated with the element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconSize iconSize}.
     *
     * Determines the size of the node's icon. This property can be applied only to circular nodes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSize(
      /**
       * New value for property `iconSize`
       */
      iIconSize?: int
    ): this;
    /**
     * Sets the aggregated {@link #getImage image}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImage(
      /**
       * The image to set
       */
      oImage: NodeImage
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Key of the node. This key is used throughout the DOM to reference this node, mainly in the connector
     * line (Line) elements of the graph.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMaxWidth maxWidth}.
     *
     * Maximum width allowed. The auto grow algorithm stops increasing the width at this value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxWidth(
      /**
       * New value for property `maxWidth`
       */
      iMaxWidth?: int
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Shows if the node is selected. Once the node is selected, its appearance changes slightly to distinguish
     * it from other nodes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShape shape}.
     *
     * Shape of the node. The shape is round by default. To create a rectangular node, set this property to
     * Box.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Circle`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShape(
      /**
       * New value for property `shape`
       */
      sShape?: networkgraph.NodeShape | keyof typeof networkgraph.NodeShape
    ): this;
    /**
     * Sets a new value for property {@link #getShowActionLinksButton showActionLinksButton}.
     *
     * Determines if the links button is visible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowActionLinksButton(
      /**
       * New value for property `showActionLinksButton`
       */
      bShowActionLinksButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowDetailButton showDetailButton}.
     *
     * Determines if the details button is visible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowDetailButton(
      /**
       * New value for property `showDetailButton`
       */
      bShowDetailButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowExpandButton showExpandButton}.
     *
     * Determines if the expand button is visible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowExpandButton(
      /**
       * New value for property `showExpandButton`
       */
      bShowExpandButton?: boolean
    ): this;
    /**
     * Sets the width and height of the node.
     *  If you don't want to change the `height` and `width` properties, use this method to change the internal
     * width and height.
     */
    setSize(
      /**
       * Arguments passed to the method
       */
      mArguments: Object
    ): void;
    /**
     * Sets a new value for property {@link #getStatusIcon statusIcon}.
     *
     * An additional status icon displayed when the node is collapsed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStatusIcon(
      /**
       * New value for property `statusIcon`
       */
      sStatusIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleLineSize titleLineSize}.
     *
     * Determines the maximum number of lines allowed for the node's label. If set to 0, the label may have
     * an unlimited number of lines.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitleLineSize(
      /**
       * New value for property `titleLineSize`
       */
      iTitleLineSize?: int
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Whether the control should be visible on the screen. Node is still used for layouter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the node. If the width is not defined, the node expands, so it can fit the content.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      iWidth?: int
    ): this;
    /**
     * Sets a new value for property {@link #getX x}.
     *
     * The x coordinate of the node. This value must be set after the layout algorithm has finished arranging
     * the graph. It may come from the input data but is not required for most layout algorithms.
     * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
     * property. However, you can still change it using an `afterLayouting` event.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setX(
      /**
       * New value for property `x`
       */
      fX?: float
    ): this;
    /**
     * Sets a new value for property {@link #getY y}.
     *
     * The y coordinate of the node. This value must be set after the layout algorithm has finished arranging
     * the graph. It may come from the input data but is not required for most layout algorithms.
     * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
     * property. However, you can still change it using an `afterLayouting` event.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setY(
      /**
       * New value for property `y`
       */
      fY?: float
    ): this;
    /**
     * Shows or hides the node's action buttons.
     */
    showActionButtons(
      /**
       * Indicates whether to hide or to show buttons
       */
      bShow: boolean
    ): void;
  }
  export default Node;

  export interface $NodeSettings extends $ElementBaseSettings {
    /**
     * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
     * the checkbox is hidden. Available only for box nodes.
     */
    headerCheckBoxState?:
      | (
          | networkgraph.HeaderCheckboxState
          | keyof typeof networkgraph.HeaderCheckboxState
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines if the subtree of this node is collapsed. By default, it is expanded.
     */
    collapsed?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Shows if the node is selected. Once the node is selected, its appearance changes slightly to distinguish
     * it from other nodes.
     */
    selected?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Key of the group where this node is included.
     */
    group?: string | PropertyBindingInfo;

    /**
     * Key of the node. This key is used throughout the DOM to reference this node, mainly in the connector
     * line (Line) elements of the graph.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Shape of the node. The shape is round by default. To create a rectangular node, set this property to
     * Box.
     */
    shape?:
      | (networkgraph.NodeShape | keyof typeof networkgraph.NodeShape)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * An icon associated with the element.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * An additional status icon displayed when the node is collapsed.
     */
    statusIcon?: string | PropertyBindingInfo;

    /**
     * Width of the node. If the width is not defined, the node expands, so it can fit the content.
     */
    width?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the node. In circular nodes, it determines the circle diameter.
     */
    height?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Maximum width allowed. The auto grow algorithm stops increasing the width at this value.
     */
    maxWidth?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * The x coordinate of the node. This value must be set after the layout algorithm has finished arranging
     * the graph. It may come from the input data but is not required for most layout algorithms.
     * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
     * property. However, you can still change it using an `afterLayouting` event.
     */
    x?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * The y coordinate of the node. This value must be set after the layout algorithm has finished arranging
     * the graph. It may come from the input data but is not required for most layout algorithms.
     * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
     * property. However, you can still change it using an `afterLayouting` event.
     */
    y?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Determines if the expand button is visible.
     */
    showExpandButton?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Determines if the links button is visible.
     */
    showActionLinksButton?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Determines if the details button is visible.
     */
    showDetailButton?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Determines the maximum number of lines allowed for the node's label. If set to 0, the label may have
     * an unlimited number of lines.
     */
    titleLineSize?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Determines the maximum number of lines allowed to be displayed in the node's description. If you want
     * to hide the description, set this property to `-1` (default). To display an unlimited number of lines,
     * set this property to `0`. This property does not affect the description that appears in the tooltip,
     * which is always fully rendered.
     */
    descriptionLineSize?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Determines the size of the node's icon. This property can be applied only to circular nodes.
     */
    iconSize?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Determines the size of a custom node, which can be useful for nodes that have text or other content outside
     * of its shape.
     * This property is available for custom nodes only.
     */
    coreNodeSize?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Whether the control should be visible on the screen. Node is still used for layouter.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.112
     *
     * In the absence of a title, alternate texts can be used to identify the nodes.
     */
    altText?: string | PropertyBindingInfo;

    /**
     * A list of links to be shown in the links area. A link may point to any UI5 control. It's up to the caller
     * to set up all necessary callback functions.
     */
    actionLinks?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * A list of custom action buttons. These buttons are displayed in the button area for each node. A node
     * may have up to 4 buttons. The default 3 buttons (collapse/expand, details, and links) have priority over
     * any other custom buttons that you add. If you want all 4 of your custom buttons to be displayed, set
     * the visibility of the default buttons to false.
     */
    actionButtons?:
      | ActionButton[]
      | ActionButton
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * The image that is displayed in the node's header instead of the icon.
     */
    image?: NodeImage;

    /**
     * Custom content rendered with the node. Available only for rectangular nodes with HTML rendering type.
     * When this aggregation is used, the description and attributes of {@link sap.suite.ui.commons.networkgraph.ElementBase }
     * are ignored.
     */
    content?: Control;

    /**
     * This event is fired when the user selects or clears the Header checkbox.
     */
    headerCheckBoxPress?: (
      oEvent: Event<$NodeHeaderCheckBoxPressEventParameters>
    ) => void;

    /**
     * This event is fired when the user clicks or taps the node.
     */
    press?: (oEvent: Event) => void;

    /**
     * This event is fired when the user moves the mouse pointer over the node.
     */
    hover?: (oEvent: Event) => void;

    /**
     * This event is fired when the user clicks the node's collapse/expand button.
     */
    collapseExpand?: (oEvent: Event) => void;
  }

  export interface $NodeCollapseExpandEventParameters {}

  export interface $NodeHeaderCheckBoxPressEventParameters {
    /**
     * Indicates whether checkbox is selected.
     */
    checked?: boolean;
  }

  export interface $NodeHoverEventParameters {}

  export interface $NodePressEventParameters {}
}

declare module "sap/suite/ui/commons/networkgraph/NodeImage" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { URI } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Holds information about node image.
   */
  class NodeImage extends UI5Element {
    /**
     * Constructor for a new Node Image.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.NodeImage with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NodeImage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.NodeImage.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the image.
     *
     * @returns Value of property `height`
     */
    getHeight(): int;
    /**
     * Gets current value of property {@link #getSrc src}.
     *
     * Relative or absolute path to the image file.
     *
     * @returns Value of property `src`
     */
    getSrc(): URI;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the image.
     *
     * @returns Value of property `width`
     */
    getWidth(): int;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      iHeight?: int
    ): this;
    /**
     * Sets a new value for property {@link #getSrc src}.
     *
     * Relative or absolute path to the image file.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSrc(
      /**
       * New value for property `src`
       */
      sSrc?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      iWidth?: int
    ): this;
  }
  export default NodeImage;

  export interface $NodeImageSettings extends $ElementSettings {
    /**
     * Relative or absolute path to the image file.
     */
    src?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Width of the image.
     */
    width?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the image.
     */
    height?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/networkgraph/Status" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * The status element holds information about a custom status that can be applied to nodes, lines, and groups
   * of nodes.
   *
   *  You can create multiple custom statuses and assign them to your graph using the `statuses` aggregation
   * of the {@link sap.suite.ui.commons.networkgraph.Graph} control.
   *
   *  Alternatively, you can use default statuses provided by the {@link sap.suite.ui.commons.networkgraph.ElementStatus }
   * element.
   */
  class Status extends UI5Element {
    /**
     * Constructor for a new Status.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Status with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Status>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Status.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Fill color.
     *  The fill color that is applied to elements and lines that are in this custom status.
     *
     * @returns Value of property `backgroundColor`
     */
    getBackgroundColor(): string;
    /**
     * Gets current value of property {@link #getBorderColor borderColor}.
     *
     * Border color.
     *  The border color that is applied to elements in this custom status.
     *
     * @returns Value of property `borderColor`
     */
    getBorderColor(): string;
    /**
     * Gets current value of property {@link #getBorderStyle borderStyle}.
     *
     * Style of the border. For {@link sap.suite.ui.commons.networkgraph.Line} elements use this value as parameter
     * for `stroke-dasharray`.
     *
     * @returns Value of property `borderStyle`
     */
    getBorderStyle(): string;
    /**
     * Gets current value of property {@link #getBorderWidth borderWidth}.
     *
     * Border width of the element in specific units (for example 2px).
     *
     * @returns Value of property `borderWidth`
     */
    getBorderWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getContentColor contentColor}.
     *
     * Color of the content (text or icon) inside the node.
     *  The color is applied to a node's content when it enters this custom status.
     *
     * @returns Value of property `contentColor`
     */
    getContentColor(): string;
    /**
     * Gets current value of property {@link #getHeaderContentColor headerContentColor}.
     *
     * Color of the header content (title and icon) of the node.
     *  Applicable only to the rectangular nodes.
     *
     * @returns Value of property `headerContentColor`
     */
    getHeaderContentColor(): string;
    /**
     * Gets current value of property {@link #getHoverBackgroundColor hoverBackgroundColor}.
     *
     * Fill color on hover.
     *  The fill color of a custom status element, line, or group when you hover over it.
     *
     * @returns Value of property `hoverBackgroundColor`
     */
    getHoverBackgroundColor(): string;
    /**
     * Gets current value of property {@link #getHoverBorderColor hoverBorderColor}.
     *
     * Border color on hover.
     *  The border color of a custom status element when you hover over it.
     *
     * @returns Value of property `hoverBorderColor`
     */
    getHoverBorderColor(): string;
    /**
     * Gets current value of property {@link #getHoverContentColor hoverContentColor}.
     *
     * Content color on hover. Color of the content (text or icon) inside the custom status element when you
     * hover over it.
     *
     * @returns Value of property `hoverContentColor`
     */
    getHoverContentColor(): string;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getLegendColor legendColor}.
     *
     * Color displayed in the graph's legend.
     *  If not set, the fill color defined in the `backgroundColor` property is used.
     *
     * @returns Value of property `legendColor`
     */
    getLegendColor(): string;
    /**
     * Gets current value of property {@link #getSelectedBackgroundColor selectedBackgroundColor}.
     *
     * Fill color when selected.
     *  The fill color of a custom status element when you select it.
     *
     * @returns Value of property `selectedBackgroundColor`
     */
    getSelectedBackgroundColor(): string;
    /**
     * Gets current value of property {@link #getSelectedBorderColor selectedBorderColor}.
     *
     * Border color when selected. The border color of a custom status element when you select it.
     *
     * @returns Value of property `selectedBorderColor`
     */
    getSelectedBorderColor(): string;
    /**
     * Gets current value of property {@link #getSelectedContentColor selectedContentColor}.
     *
     * Content color when selected. Color of the content (text or icon) inside the custom status node when you
     * select it.
     *
     * @returns Value of property `selectedContentColor`
     */
    getSelectedContentColor(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title of the node.
     *  The title that is applied to elements that are in this custom status. The title is displayed in the
     * legend.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getUseFocusColorAsContentColor useFocusColorAsContentColor}.
     *
     * Defines whether the focus border should match the color of the content in focus. If false, the focus
     * border has the default color.
     * This property can be used only for nodes and groups of nodes.
     *
     * Default value is `false`.
     *
     * @returns Value of property `useFocusColorAsContentColor`
     */
    getUseFocusColorAsContentColor(): boolean;
    /**
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Fill color.
     *  The fill color that is applied to elements and lines that are in this custom status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBorderColor borderColor}.
     *
     * Border color.
     *  The border color that is applied to elements in this custom status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorderColor(
      /**
       * New value for property `borderColor`
       */
      sBorderColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBorderStyle borderStyle}.
     *
     * Style of the border. For {@link sap.suite.ui.commons.networkgraph.Line} elements use this value as parameter
     * for `stroke-dasharray`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorderStyle(
      /**
       * New value for property `borderStyle`
       */
      sBorderStyle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBorderWidth borderWidth}.
     *
     * Border width of the element in specific units (for example 2px).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBorderWidth(
      /**
       * New value for property `borderWidth`
       */
      sBorderWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getContentColor contentColor}.
     *
     * Color of the content (text or icon) inside the node.
     *  The color is applied to a node's content when it enters this custom status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContentColor(
      /**
       * New value for property `contentColor`
       */
      sContentColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderContentColor headerContentColor}.
     *
     * Color of the header content (title and icon) of the node.
     *  Applicable only to the rectangular nodes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeaderContentColor(
      /**
       * New value for property `headerContentColor`
       */
      sHeaderContentColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHoverBackgroundColor hoverBackgroundColor}.
     *
     * Fill color on hover.
     *  The fill color of a custom status element, line, or group when you hover over it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverBackgroundColor(
      /**
       * New value for property `hoverBackgroundColor`
       */
      sHoverBackgroundColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHoverBorderColor hoverBorderColor}.
     *
     * Border color on hover.
     *  The border color of a custom status element when you hover over it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverBorderColor(
      /**
       * New value for property `hoverBorderColor`
       */
      sHoverBorderColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHoverContentColor hoverContentColor}.
     *
     * Content color on hover. Color of the content (text or icon) inside the custom status element when you
     * hover over it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverContentColor(
      /**
       * New value for property `hoverContentColor`
       */
      sHoverContentColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLegendColor legendColor}.
     *
     * Color displayed in the graph's legend.
     *  If not set, the fill color defined in the `backgroundColor` property is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLegendColor(
      /**
       * New value for property `legendColor`
       */
      sLegendColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelectedBackgroundColor selectedBackgroundColor}.
     *
     * Fill color when selected.
     *  The fill color of a custom status element when you select it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelectedBackgroundColor(
      /**
       * New value for property `selectedBackgroundColor`
       */
      sSelectedBackgroundColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelectedBorderColor selectedBorderColor}.
     *
     * Border color when selected. The border color of a custom status element when you select it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelectedBorderColor(
      /**
       * New value for property `selectedBorderColor`
       */
      sSelectedBorderColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelectedContentColor selectedContentColor}.
     *
     * Content color when selected. Color of the content (text or icon) inside the custom status node when you
     * select it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelectedContentColor(
      /**
       * New value for property `selectedContentColor`
       */
      sSelectedContentColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title of the node.
     *  The title that is applied to elements that are in this custom status. The title is displayed in the
     * legend.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUseFocusColorAsContentColor useFocusColorAsContentColor}.
     *
     * Defines whether the focus border should match the color of the content in focus. If false, the focus
     * border has the default color.
     * This property can be used only for nodes and groups of nodes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUseFocusColorAsContentColor(
      /**
       * New value for property `useFocusColorAsContentColor`
       */
      bUseFocusColorAsContentColor?: boolean
    ): this;
  }
  export default Status;

  export interface $StatusSettings extends $ElementSettings {
    key?: string | PropertyBindingInfo;

    /**
     * Title of the node.
     *  The title that is applied to elements that are in this custom status. The title is displayed in the
     * legend.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Border color.
     *  The border color that is applied to elements in this custom status.
     */
    borderColor?: string | PropertyBindingInfo;

    /**
     * Fill color.
     *  The fill color that is applied to elements and lines that are in this custom status.
     */
    backgroundColor?: string | PropertyBindingInfo;

    /**
     * Color of the content (text or icon) inside the node.
     *  The color is applied to a node's content when it enters this custom status.
     */
    contentColor?: string | PropertyBindingInfo;

    /**
     * Color of the header content (title and icon) of the node.
     *  Applicable only to the rectangular nodes.
     */
    headerContentColor?: string | PropertyBindingInfo;

    /**
     * Fill color on hover.
     *  The fill color of a custom status element, line, or group when you hover over it.
     */
    hoverBackgroundColor?: string | PropertyBindingInfo;

    /**
     * Border color on hover.
     *  The border color of a custom status element when you hover over it.
     */
    hoverBorderColor?: string | PropertyBindingInfo;

    /**
     * Content color on hover. Color of the content (text or icon) inside the custom status element when you
     * hover over it.
     */
    hoverContentColor?: string | PropertyBindingInfo;

    /**
     * Fill color when selected.
     *  The fill color of a custom status element when you select it.
     */
    selectedBackgroundColor?: string | PropertyBindingInfo;

    /**
     * Border color when selected. The border color of a custom status element when you select it.
     */
    selectedBorderColor?: string | PropertyBindingInfo;

    /**
     * Content color when selected. Color of the content (text or icon) inside the custom status node when you
     * select it.
     */
    selectedContentColor?: string | PropertyBindingInfo;

    /**
     * Color displayed in the graph's legend.
     *  If not set, the fill color defined in the `backgroundColor` property is used.
     */
    legendColor?: string | PropertyBindingInfo;

    /**
     * Defines whether the focus border should match the color of the content in focus. If false, the focus
     * border has the default color.
     * This property can be used only for nodes and groups of nodes.
     */
    useFocusColorAsContentColor?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Border width of the element in specific units (for example 2px).
     */
    borderWidth?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Style of the border. For {@link sap.suite.ui.commons.networkgraph.Line} elements use this value as parameter
     * for `stroke-dasharray`.
     */
    borderStyle?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/networkgraph/SvgBase" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.50
   *
   * SvgBase class
   */
  class SvgBase extends Control {
    /**
     * Constructor for a new ElementBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.suite.ui.commons.networkgraph.SvgBase with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SvgBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.networkgraph.SvgBase.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default SvgBase;

  export interface $SvgBaseSettings extends $ControlSettings {}
}

declare module "sap/suite/ui/commons/networkgraph/util/Dijkstra" {
  import Graph from "sap/suite/ui/commons/networkgraph/Graph";

  import Node from "sap/suite/ui/commons/networkgraph/Node";

  import Line from "sap/suite/ui/commons/networkgraph/Line";

  /**
   * @SINCE 1.58
   *
   * This algorithm uses Dijkstra's algorithm to compute the shortest possible paths from the starting point
   * node to all other nodes in the graph and arrange them accordingly.
   */
  class Dijkstra {
    /**
     * Constructor for a new Dijkstra's algorithm. The constructor computes the shortest paths to all nodes
     * in the network graph from given starting point node.
     */
    constructor(
      /**
       * Graph to compute the paths in.
       */
      oGraph: Graph,
      /**
       * Node that serves as the starting point for computing the paths.
       */
      oSourceNode: Node,
      /**
       * Settings for the algorithm.
       */
      oSettings?: {
        /**
         * Evaluation function for determining the value of a line. The function will receive the line to be evaluated
         * as a parameter and must return a positive number representing its value (note that Dijkstra's algorithm
         * cannot be used on negative values of lines). If this function is not passed as a parameter, the algorithm
         * will consider the value of each line to be 1.
         */
        fnLineValue?: (p1: Line) => void;
        /**
         * Makes the algorithm ignore line directions and treat the graph as non-oriented.
         */
        bIgnoreDirections?: boolean;
        /**
         * Makes the algorithm ignore collapsed and hidden nodes.
         */
        bIgnoreCollapsed?: boolean;
      }
    );

    /**
     * Retrieves the shortest path to the given node. Due to the nature of the algorithm, the path is returned
     * in reversed order. In most cases, each line has to be processed anyway, so the order is not important.
     * However, if you need to retrieve lines in the direct order, you can use the `Array.reverse()` method.
     *
     * @returns Lines representing the shortest path.
     */
    getShortestPathTo(
      /**
       * Node to find shortest path to.
       */
      oToNode: Node
    ): Line[];
  }
  export default Dijkstra;
}

declare module "sap/suite/ui/commons/NewsContent" {
  import {
    default as NewsContent1,
    $NewsContentSettings as $NewsContentSettings1,
  } from "sap/m/NewsContent";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.m.NewsContent.
   *
   * This control displays the news content text and subheader in a tile.
   */
  class NewsContent extends NewsContent1 {
    /**
     * Constructor for a new NewsContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.NewsContent#constructor sap.m.NewsContent }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NewsContentSettings
    );
    /**
     * Constructor for a new NewsContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.NewsContent#constructor sap.m.NewsContent }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NewsContentSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.NewsContent with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.NewsContent.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NewsContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.NewsContent.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default NewsContent;

  export interface $NewsContentSettings extends $NewsContentSettings1 {}
}

declare module "sap/suite/ui/commons/NoteTaker" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import NoteTakerCard from "sap/suite/ui/commons/NoteTakerCard";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
   *
   * This control allows you to create and store your notes for further reference.
   */
  class NoteTaker extends Control {
    /**
     * Constructor for a new NoteTaker.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NoteTakerSettings
    );
    /**
     * Constructor for a new NoteTaker.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NoteTakerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.NoteTaker with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NoteTaker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.NoteTaker.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some card to the aggregation {@link #getCards cards}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCard(
      /**
       * The card to add; if empty, nothing is inserted
       */
      oCard: NoteTakerCard
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addCard addCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a new card is added if no data binding is available. If data binding is available,
     * the event is fired to notify a developer to add an element to the model.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAddCard(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerAddCardEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addCard addCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a new card is added if no data binding is available. If data binding is available,
     * the event is fired to notify a developer to add an element to the model.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAddCard(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerAddCardEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
     * `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a user presses the attachment link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerAttachmentClickEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
     * `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a user presses the attachment link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerAttachmentClickEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
     * this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired, when user deletes the attached file.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentDeleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
     * this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired, when user deletes the attached file.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentDeleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
     * this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when the value of attached file has been changed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentSelectEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
     * this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when the value of attached file has been changed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentSelectEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete }
     * event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * Fire event uploadComplete to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentUploadComplete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentUploadCompleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete }
     * event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * Fire event uploadComplete to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentUploadComplete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentUploadCompleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deleteCard deleteCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a new card is deleted if no data binding is available. If data binding is available,
     * the event is fired to notify a developer to delete the element from the model.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeleteCard(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerDeleteCardEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deleteCard deleteCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a new card is deleted if no data binding is available. If data binding is available,
     * the event is fired to notify a developer to delete the element from the model.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeleteCard(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerDeleteCardEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:editCard editCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a new card has been edited.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachEditCard(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerEditCardEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:editCard editCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
     *
     * The event is fired when a new card has been edited.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachEditCard(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerEditCardEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the cards in the aggregation {@link #getCards cards}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCards(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:addCard addCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAddCard(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerAddCardEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentClick attachmentClick} event of
     * this `sap.suite.ui.commons.NoteTaker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerAttachmentClickEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentDelete attachmentDelete} event of
     * this `sap.suite.ui.commons.NoteTaker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentDeleteEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentSelect attachmentSelect} event of
     * this `sap.suite.ui.commons.NoteTaker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentSelectEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentUploadComplete attachmentUploadComplete }
     * event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentUploadComplete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerAttachmentUploadCompleteEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deleteCard deleteCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeleteCard(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerDeleteCardEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:editCard editCard} event of this `sap.suite.ui.commons.NoteTaker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachEditCard(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerEditCardEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:addCard addCard} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAddCard(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerAddCardEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentClick attachmentClick} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerAttachmentClickEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentDelete attachmentDelete} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerAttachmentDeleteEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentSelect attachmentSelect} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerAttachmentSelectEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentUploadComplete attachmentUploadComplete} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentUploadComplete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerAttachmentUploadCompleteEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:deleteCard deleteCard} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeleteCard(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerDeleteCardEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:editCard editCard} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireEditCard(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerEditCardEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getAttachmentName attachmentName}.
     *
     * The attachment property name for identification on the server side after sending data to the server.
     *
     * Default value is `'attachment'`.
     *
     * @returns Value of property `attachmentName`
     */
    getAttachmentName(): string;
    /**
     * Gets current value of property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
     *
     * Defines a path on the server where the attached files are uploaded.
     *
     * @returns Value of property `attachmentUploadUrl`
     */
    getAttachmentUploadUrl(): string;
    /**
     * Gets content of aggregation {@link #getCards cards}.
     *
     * This aggregation allows you to add note cards to the Note Taker and remove them from the Note Taker.
     */
    getCards(): NoteTakerCard[];
    /**
     * Gets current value of property {@link #getCardViewAllTrigger cardViewAllTrigger}.
     *
     * The View All link appears in the Note Taker card when length of a card body text exceeds the specified
     * value. The updated value of this property is not applied to the existing cards.
     *
     * Default value is `1800`.
     *
     * @returns Value of property `cardViewAllTrigger`
     */
    getCardViewAllTrigger(): int;
    /**
     * Gets current value of property {@link #getFilterCriteria filterCriteria}.
     *
     * A composite object containing criteria for filtering cards in the Note Taker.
     *
     * @returns Value of property `filterCriteria`
     */
    getFilterCriteria(): object;
    /**
     * Gets current value of property {@link #getVisibleNotes visibleNotes}.
     *
     * Number of notes to display.
     *
     * Default value is `2`.
     *
     * @returns Value of property `visibleNotes`
     */
    getVisibleNotes(): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.NoteTakerCard` in the aggregation {@link #getCards cards}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCard(
      /**
       * The card whose index is looked for
       */
      oCard: NoteTakerCard
    ): int;
    /**
     * Inserts a card into the aggregation {@link #getCards cards}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCard(
      /**
       * The card to insert; if empty, nothing is inserted
       */
      oCard: NoteTakerCard,
      /**
       * The `0`-based index the card should be inserted at; for a negative value of `iIndex`, the card is inserted
       * at position 0; for a value greater than the current size of the aggregation, the card is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCards cards}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCards(): NoteTakerCard[];
    /**
     * Removes a card from the aggregation {@link #getCards cards}.
     *
     * @returns The removed card or `null`
     */
    removeCard(
      /**
       * The card to remove or its index or id
       */
      vCard: int | string | NoteTakerCard
    ): NoteTakerCard | null;
    /**
     * Sets a new value for property {@link #getAttachmentName attachmentName}.
     *
     * The attachment property name for identification on the server side after sending data to the server.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'attachment'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAttachmentName(
      /**
       * New value for property `attachmentName`
       */
      sAttachmentName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
     *
     * Defines a path on the server where the attached files are uploaded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAttachmentUploadUrl(
      /**
       * New value for property `attachmentUploadUrl`
       */
      sAttachmentUploadUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getCardViewAllTrigger cardViewAllTrigger}.
     *
     * The View All link appears in the Note Taker card when length of a card body text exceeds the specified
     * value. The updated value of this property is not applied to the existing cards.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1800`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCardViewAllTrigger(
      /**
       * New value for property `cardViewAllTrigger`
       */
      iCardViewAllTrigger?: int
    ): this;
    /**
     * Sets a new value for property {@link #getFilterCriteria filterCriteria}.
     *
     * A composite object containing criteria for filtering cards in the Note Taker.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFilterCriteria(
      /**
       * New value for property `filterCriteria`
       */
      oFilterCriteria?: object
    ): this;
    /**
     * Sets a new value for property {@link #getVisibleNotes visibleNotes}.
     *
     * Number of notes to display.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisibleNotes(
      /**
       * New value for property `visibleNotes`
       */
      iVisibleNotes?: int
    ): this;
  }
  export default NoteTaker;

  export interface $NoteTakerSettings extends $ControlSettings {
    /**
     * Number of notes to display.
     */
    visibleNotes?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * The View All link appears in the Note Taker card when length of a card body text exceeds the specified
     * value. The updated value of this property is not applied to the existing cards.
     */
    cardViewAllTrigger?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * A composite object containing criteria for filtering cards in the Note Taker.
     */
    filterCriteria?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines a path on the server where the attached files are uploaded.
     */
    attachmentUploadUrl?: string | PropertyBindingInfo;

    /**
     * The attachment property name for identification on the server side after sending data to the server.
     */
    attachmentName?: string | PropertyBindingInfo;

    /**
     * This aggregation allows you to add note cards to the Note Taker and remove them from the Note Taker.
     */
    cards?:
      | NoteTakerCard[]
      | NoteTakerCard
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * The event is fired when a new card is added if no data binding is available. If data binding is available,
     * the event is fired to notify a developer to add an element to the model.
     */
    addCard?: (oEvent: Event<$NoteTakerAddCardEventParameters>) => void;

    /**
     * The event is fired when a new card is deleted if no data binding is available. If data binding is available,
     * the event is fired to notify a developer to delete the element from the model.
     */
    deleteCard?: (oEvent: Event<$NoteTakerDeleteCardEventParameters>) => void;

    /**
     * The event is fired when a new card has been edited.
     */
    editCard?: (oEvent: Event<$NoteTakerEditCardEventParameters>) => void;

    /**
     * The event is fired when the value of attached file has been changed.
     */
    attachmentSelect?: (
      oEvent: Event<$NoteTakerAttachmentSelectEventParameters>
    ) => void;

    /**
     * Fire event uploadComplete to attached listeners.
     */
    attachmentUploadComplete?: (
      oEvent: Event<$NoteTakerAttachmentUploadCompleteEventParameters>
    ) => void;

    /**
     * The event is fired, when user deletes the attached file.
     */
    attachmentDelete?: (
      oEvent: Event<$NoteTakerAttachmentDeleteEventParameters>
    ) => void;

    /**
     * The event is fired when a user presses the attachment link.
     */
    attachmentClick?: (
      oEvent: Event<$NoteTakerAttachmentClickEventParameters>
    ) => void;
  }

  export interface $NoteTakerAddCardEventParameters {
    /**
     * The title of the note to be added.
     */
    title?: string;

    /**
     * The text of the note to be added.
     */
    body?: string;

    /**
     * The timestamp of the note to be added.
     */
    timestamp?: object;

    /**
     * The View All link appears in the Note Taker card when length of a body text exceeds the specified value.
     */
    viewAllTrigger?: int;

    /**
     * Indicates positive information for a new card.
     */
    thumbUp?: boolean;

    /**
     * Indicates negative information for a new card.
     */
    thumbDown?: boolean;

    /**
     * Stores the name of the file attached to the card.
     */
    attachmentFilename?: string;

    /**
     * The unique ID if available.
     */
    uid?: string;

    /**
     * Stores the URL of the file attached to the card.
     */
    attachmentUrl?: string;

    /**
     * A newly created card if no data binding is available. If data binding is available, this parameter is
     * empty.
     */
    card?: NoteTakerCard;
  }

  export interface $NoteTakerAttachmentClickEventParameters {
    /**
     * The unique ID of the card.
     */
    uid?: string;

    /**
     * If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the
     * Feeder card.
     */
    isCardAttachment?: string;

    /**
     * A name of the attached file.
     */
    filename?: string;
  }

  export interface $NoteTakerAttachmentDeleteEventParameters {
    /**
     * A name of the attached file.
     */
    filename?: string;

    /**
     * The unique ID of the card.
     */
    uid?: string;
  }

  export interface $NoteTakerAttachmentSelectEventParameters {
    /**
     * A name of the attached file.
     */
    filename?: string;
  }

  export interface $NoteTakerAttachmentUploadCompleteEventParameters {
    /**
     * The response message of the String type that comes from the server. On the server side this response
     * has to be put within the "body" tags of the response document of the iFrame. It can consist of a return
     * code and an optional message. This does not work in cross-domain scenarios.
     */
    response?: string;

    /**
     * The unique ID of the card.
     */
    uid?: string;
  }

  export interface $NoteTakerDeleteCardEventParameters {
    /**
     * The title of the card to be deleted.
     */
    title?: string;

    /**
     * The text of the card to be deleted.
     */
    body?: string;

    /**
     * The timestamp of the card to be deleted.
     */
    timestamp?: string;

    /**
     * The unique ID that was set by an application developer.
     */
    uid?: string;

    /**
     * Indicates positive information for the deleted card.
     */
    thumbUp?: boolean;

    /**
     * Indicates negative information for the deleted card.
     */
    thumbDown?: boolean;
  }

  export interface $NoteTakerEditCardEventParameters {
    /**
     * The title of the edited card.
     */
    title?: string;

    /**
     * A new text of the edited card.
     */
    body?: string;

    /**
     * A new timestamp of the edited card.
     */
    timestamp?: string;

    /**
     * A unique ID that was set by an application developer.
     */
    uid?: string;

    /**
     * Indicates positive information for the edited card.
     */
    thumbUp?: boolean;

    /**
     * Indicates negative information for the edited card.
     */
    thumbDown?: boolean;

    /**
     * Updated array of the String type tags applied to the card during editing.
     */
    tags?: object;
  }
}

declare module "sap/suite/ui/commons/NoteTakerCard" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
   *
   * This control allows you to store Note Taker card header and body text.
   */
  class NoteTakerCard extends Control {
    /**
     * Constructor for a new NoteTakerCard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NoteTakerCardSettings
    );
    /**
     * Constructor for a new NoteTakerCard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NoteTakerCardSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.NoteTakerCard with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NoteTakerCard>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.NoteTakerCard.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
     * `sap.suite.ui.commons.NoteTakerCard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
     *
     * The event is fired when a user chooses the attachment download link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerCardAttachmentClickEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
     * `sap.suite.ui.commons.NoteTakerCard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
     *
     * The event is fired when a user chooses the attachment download link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerCardAttachmentClickEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deleteNote deleteNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
     *
     * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeleteNote(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerCardDeleteNoteEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deleteNote deleteNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
     *
     * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDeleteNote(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerCardDeleteNoteEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:editNote editNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
     *
     * The event is fired when a user chooses the Edit button in the note card.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachEditNote(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerCardEditNoteEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:editNote editNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
     *
     * The event is fired when a user chooses the Edit button in the note card.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachEditNote(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerCardEditNoteEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentClick attachmentClick} event of
     * this `sap.suite.ui.commons.NoteTakerCard`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerCardAttachmentClickEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deleteNote deleteNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDeleteNote(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerCardDeleteNoteEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:editNote editNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachEditNote(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerCardEditNoteEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentClick attachmentClick} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerCardAttachmentClickEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:deleteNote deleteNote} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDeleteNote(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerCardDeleteNoteEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:editNote editNote} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireEditNote(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerCardEditNoteEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getAllTags allTags}.
     *
     * Contains an array of the String type tags available for selection during the card update.
     *
     * Default value is `[]`.
     *
     * @returns Value of property `allTags`
     */
    getAllTags(): object;
    /**
     * Gets current value of property {@link #getAttachmentFilename attachmentFilename}.
     *
     * Stores the name of the file attached to the card.
     *
     * @returns Value of property `attachmentFilename`
     */
    getAttachmentFilename(): string;
    /**
     * Gets current value of property {@link #getAttachmentUrl attachmentUrl}.
     *
     * Stores the address of the file attached to the card.
     *
     * @returns Value of property `attachmentUrl`
     */
    getAttachmentUrl(): string;
    /**
     * Gets current value of property {@link #getBody body}.
     *
     * Stores the Note Taker card body text.
     *
     * @returns Value of property `body`
     */
    getBody(): string;
    /**
     * Gets current value of property {@link #getHeader header}.
     *
     * Stores the Note Taker card header.
     *
     * @returns Value of property `header`
     */
    getHeader(): string;
    /**
     * Gets current value of property {@link #getIsFiltered isFiltered}.
     *
     * Shows whether the note card is hidden by the applied filter.
     *
     * Default value is `false`.
     *
     * @returns Value of property `isFiltered`
     */
    getIsFiltered(): boolean;
    /**
     * Gets current value of property {@link #getTags tags}.
     *
     * Contains an array of the String type tags applied to the current card.
     *
     * Default value is `[]`.
     *
     * @returns Value of property `tags`
     */
    getTags(): object;
    /**
     * Gets current value of property {@link #getThumbDown thumbDown}.
     *
     * Indicates negative information for the card.
     *
     * @returns Value of property `thumbDown`
     */
    getThumbDown(): boolean;
    /**
     * Gets current value of property {@link #getThumbUp thumbUp}.
     *
     * Indicates positive information for the card.
     *
     * @returns Value of property `thumbUp`
     */
    getThumbUp(): boolean;
    /**
     * Gets current value of property {@link #getTimestamp timestamp}.
     *
     * Stores a timestamp of the Note Taker card.
     *
     * Default value is `...see text or source`.
     *
     * @returns Value of property `timestamp`
     */
    getTimestamp(): object;
    /**
     * Gets current value of property {@link #getUid uid}.
     *
     * The card ID. This property should be set by an application developer.
     *
     * @returns Value of property `uid`
     */
    getUid(): string;
    /**
     * Gets current value of property {@link #getViewAllTrigger viewAllTrigger}.
     *
     * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
     *
     * Default value is `1800`.
     *
     * @returns Value of property `viewAllTrigger`
     */
    getViewAllTrigger(): int;
    /**
     * Sets a new value for property {@link #getAllTags allTags}.
     *
     * Contains an array of the String type tags available for selection during the card update.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAllTags(
      /**
       * New value for property `allTags`
       */
      oAllTags?: object
    ): this;
    /**
     * Sets a new value for property {@link #getAttachmentFilename attachmentFilename}.
     *
     * Stores the name of the file attached to the card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAttachmentFilename(
      /**
       * New value for property `attachmentFilename`
       */
      sAttachmentFilename?: string
    ): this;
    /**
     * Sets a new value for property {@link #getAttachmentUrl attachmentUrl}.
     *
     * Stores the address of the file attached to the card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAttachmentUrl(
      /**
       * New value for property `attachmentUrl`
       */
      sAttachmentUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBody body}.
     *
     * Stores the Note Taker card body text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBody(
      /**
       * New value for property `body`
       */
      sBody?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeader header}.
     *
     * Stores the Note Taker card header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeader(
      /**
       * New value for property `header`
       */
      sHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIsFiltered isFiltered}.
     *
     * Shows whether the note card is hidden by the applied filter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsFiltered(
      /**
       * New value for property `isFiltered`
       */
      bIsFiltered?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTags tags}.
     *
     * Contains an array of the String type tags applied to the current card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTags(
      /**
       * New value for property `tags`
       */
      oTags?: object
    ): this;
    /**
     * Sets a new value for property {@link #getThumbDown thumbDown}.
     *
     * Indicates negative information for the card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setThumbDown(
      /**
       * New value for property `thumbDown`
       */
      bThumbDown?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getThumbUp thumbUp}.
     *
     * Indicates positive information for the card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setThumbUp(
      /**
       * New value for property `thumbUp`
       */
      bThumbUp?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTimestamp timestamp}.
     *
     * Stores a timestamp of the Note Taker card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `...see text or source`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTimestamp(
      /**
       * New value for property `timestamp`
       */
      oTimestamp?: object
    ): this;
    /**
     * Sets a new value for property {@link #getUid uid}.
     *
     * The card ID. This property should be set by an application developer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUid(
      /**
       * New value for property `uid`
       */
      sUid?: string
    ): this;
    /**
     * Sets a new value for property {@link #getViewAllTrigger viewAllTrigger}.
     *
     * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1800`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setViewAllTrigger(
      /**
       * New value for property `viewAllTrigger`
       */
      iViewAllTrigger?: int
    ): this;
  }
  export default NoteTakerCard;

  export interface $NoteTakerCardSettings extends $ControlSettings {
    /**
     * Stores the Note Taker card header.
     */
    header?: string | PropertyBindingInfo;

    /**
     * Stores the Note Taker card body text.
     */
    body?: string | PropertyBindingInfo;

    /**
     * Stores a timestamp of the Note Taker card.
     */
    timestamp?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Contains an array of the String type tags applied to the current card.
     */
    tags?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
     */
    viewAllTrigger?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * The card ID. This property should be set by an application developer.
     */
    uid?: string | PropertyBindingInfo;

    /**
     * Shows whether the note card is hidden by the applied filter.
     */
    isFiltered?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates positive information for the card.
     */
    thumbUp?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates negative information for the card.
     */
    thumbDown?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Contains an array of the String type tags available for selection during the card update.
     */
    allTags?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Stores the name of the file attached to the card.
     */
    attachmentFilename?: string | PropertyBindingInfo;

    /**
     * Stores the address of the file attached to the card.
     */
    attachmentUrl?: string | PropertyBindingInfo;

    /**
     * The event is fired when a user chooses the Edit button in the note card.
     */
    editNote?: (oEvent: Event<$NoteTakerCardEditNoteEventParameters>) => void;

    /**
     * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
     */
    deleteNote?: (
      oEvent: Event<$NoteTakerCardDeleteNoteEventParameters>
    ) => void;

    /**
     * The event is fired when a user chooses the attachment download link.
     */
    attachmentClick?: (
      oEvent: Event<$NoteTakerCardAttachmentClickEventParameters>
    ) => void;
  }

  export interface $NoteTakerCardAttachmentClickEventParameters {
    /**
     * A unique ID that was set by an application developer.
     */
    uid?: string;

    /**
     * The address of the file attached to the card.
     */
    url?: string;

    /**
     * The name of the file attached to the card.
     */
    filename?: string;
  }

  export interface $NoteTakerCardDeleteNoteEventParameters {
    /**
     * The HTML ID of a card that needs to be deleted.
     */
    cardId?: string;

    /**
     * The title of the card to be deleted.
     */
    title?: string;

    /**
     * The text of the card to be deleted.
     */
    body?: string;

    /**
     * The timestamp of the card to be deleted.
     */
    timestamp?: string;

    /**
     * A unique ID that was set by an application developer.
     */
    uid?: string;

    /**
     * Indicates positive information for the deleted card.
     */
    thumbUp?: boolean;

    /**
     * Indicates negative information for the deleted card.
     */
    thumbDown?: boolean;
  }

  export interface $NoteTakerCardEditNoteEventParameters {
    /**
     * The title of edited card.
     */
    title?: string;

    /**
     * A new text of the edited card.
     */
    body?: string;

    /**
     * A new timestamp of the edited card.
     */
    timestamp?: string;

    /**
     * A unique ID that was set by an application developer.
     */
    uid?: string;

    /**
     * Indicates positive information for the edited card.
     */
    thumbUp?: boolean;

    /**
     * Indicates negative information for the edited card.
     */
    thumbDown?: boolean;

    /**
     * Updated array of the String type tags applied to the card during editing.
     */
    tags?: object;
  }
}

declare module "sap/suite/ui/commons/NoteTakerFeeder" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
   *
   * This control allows you to enter a quick note and N note cards.
   */
  class NoteTakerFeeder extends Control {
    /**
     * Constructor for a new NoteTakerFeeder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $NoteTakerFeederSettings
    );
    /**
     * Constructor for a new NoteTakerFeeder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $NoteTakerFeederSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.NoteTakerFeeder with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NoteTakerFeeder>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.NoteTakerFeeder.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addNote addNote} event of this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when a user chooses the Add button in the control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAddNote(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerFeederAddNoteEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addNote addNote} event of this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when a user chooses the Add button in the control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAddNote(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerFeederAddNoteEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
     * `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when a user presses the attachment link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentClickEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
     * `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when a user presses the attachment link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentClickEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
     * this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when a user presses the Delete button in the Feeder card.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentDeleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
     * this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when a user presses the Delete button in the Feeder card.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentDeleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
     * this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when the value of attached file has been changed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentSelectEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
     * this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when the value of attached file has been changed.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentSelectEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete }
     * event of this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when the upload of the file is completed. However this covers only the client side
     * of the Upload process and does not give any success status from the server.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentUploadComplete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentUploadCompleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete }
     * event of this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
     *
     * The event is fired when the upload of the file is completed. However this covers only the client side
     * of the Upload process and does not give any success status from the server.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAttachmentUploadComplete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentUploadCompleteEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:addNote addNote} event of this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAddNote(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$NoteTakerFeederAddNoteEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentClick attachmentClick} event of
     * this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentClickEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentDelete attachmentDelete} event of
     * this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentDeleteEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentSelect attachmentSelect} event of
     * this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentSelectEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:attachmentUploadComplete attachmentUploadComplete }
     * event of this `sap.suite.ui.commons.NoteTakerFeeder`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAttachmentUploadComplete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$NoteTakerFeederAttachmentUploadCompleteEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:addNote addNote} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAddNote(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerFeederAddNoteEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentClick attachmentClick} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerFeederAttachmentClickEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentDelete attachmentDelete} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerFeederAttachmentDeleteEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentSelect attachmentSelect} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerFeederAttachmentSelectEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:attachmentUploadComplete attachmentUploadComplete} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAttachmentUploadComplete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $NoteTakerFeederAttachmentUploadCompleteEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getAttachmentName attachmentName}.
     *
     * The attachment property name for identification on the server side after sending data to the server.
     *
     * Default value is `'attachment'`.
     *
     * @returns Value of property `attachmentName`
     */
    getAttachmentName(): string;
    /**
     * Gets current value of property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
     *
     * Sets the upload attachment URL for a new card.
     *
     * @returns Value of property `attachmentUploadUrl`
     */
    getAttachmentUploadUrl(): string;
    /**
     * Gets current value of property {@link #getBody body}.
     *
     * The text inside the note card.
     *
     * @returns Value of property `body`
     */
    getBody(): string;
    /**
     * Gets current value of property {@link #getTags tags}.
     *
     * The list of tags selected for addition to a new note card.
     *
     * Default value is `[]`.
     *
     * @returns Value of property `tags`
     */
    getTags(): object;
    /**
     * Gets current value of property {@link #getThumbDown thumbDown}.
     *
     * Sets negative indication for a new note.
     *
     * @returns Value of property `thumbDown`
     */
    getThumbDown(): boolean;
    /**
     * Gets current value of property {@link #getThumbUp thumbUp}.
     *
     * Sets positive indication for a new note.
     *
     * @returns Value of property `thumbUp`
     */
    getThumbUp(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * This text is the header of a new note.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getAttachmentName attachmentName}.
     *
     * The attachment property name for identification on the server side after sending data to the server.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'attachment'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAttachmentName(
      /**
       * New value for property `attachmentName`
       */
      sAttachmentName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
     *
     * Sets the upload attachment URL for a new card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAttachmentUploadUrl(
      /**
       * New value for property `attachmentUploadUrl`
       */
      sAttachmentUploadUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBody body}.
     *
     * The text inside the note card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBody(
      /**
       * New value for property `body`
       */
      sBody?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTags tags}.
     *
     * The list of tags selected for addition to a new note card.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTags(
      /**
       * New value for property `tags`
       */
      oTags?: object
    ): this;
    /**
     * Sets a new value for property {@link #getThumbDown thumbDown}.
     *
     * Sets negative indication for a new note.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setThumbDown(
      /**
       * New value for property `thumbDown`
       */
      bThumbDown?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getThumbUp thumbUp}.
     *
     * Sets positive indication for a new note.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setThumbUp(
      /**
       * New value for property `thumbUp`
       */
      bThumbUp?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * This text is the header of a new note.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default NoteTakerFeeder;

  export interface $NoteTakerFeederSettings extends $ControlSettings {
    /**
     * The text inside the note card.
     */
    body?: string | PropertyBindingInfo;

    /**
     * This text is the header of a new note.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The list of tags selected for addition to a new note card.
     */
    tags?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets positive indication for a new note.
     */
    thumbUp?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets negative indication for a new note.
     */
    thumbDown?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets the upload attachment URL for a new card.
     */
    attachmentUploadUrl?: string | PropertyBindingInfo;

    /**
     * The attachment property name for identification on the server side after sending data to the server.
     */
    attachmentName?: string | PropertyBindingInfo;

    /**
     * The event is fired when a user chooses the Add button in the control.
     */
    addNote?: (oEvent: Event<$NoteTakerFeederAddNoteEventParameters>) => void;

    /**
     * The event is fired when the value of attached file has been changed.
     */
    attachmentSelect?: (
      oEvent: Event<$NoteTakerFeederAttachmentSelectEventParameters>
    ) => void;

    /**
     * The event is fired when the upload of the file is completed. However this covers only the client side
     * of the Upload process and does not give any success status from the server.
     */
    attachmentUploadComplete?: (
      oEvent: Event<$NoteTakerFeederAttachmentUploadCompleteEventParameters>
    ) => void;

    /**
     * The event is fired when a user presses the Delete button in the Feeder card.
     */
    attachmentDelete?: (
      oEvent: Event<$NoteTakerFeederAttachmentDeleteEventParameters>
    ) => void;

    /**
     * The event is fired when a user presses the attachment link.
     */
    attachmentClick?: (
      oEvent: Event<$NoteTakerFeederAttachmentClickEventParameters>
    ) => void;
  }

  export interface $NoteTakerFeederAddNoteEventParameters {
    /**
     * The title of the note to be added.
     */
    title?: string;

    /**
     * The text of the note to be added.
     */
    body?: string;

    /**
     * The timestamp of the note to be added.
     */
    timestamp?: object;

    /**
     * If set to true, a new card should be marked as positive one.
     */
    thumbUp?: boolean;

    /**
     * If set to true, a new card should be marked as negative one.
     */
    thumbDown?: boolean;

    /**
     * Stores the attachment file name for a new card.
     */
    attachmentFilename?: string;
  }

  export interface $NoteTakerFeederAttachmentClickEventParameters {
    /**
     * A name of the attached file.
     */
    filename?: string;
  }

  export interface $NoteTakerFeederAttachmentDeleteEventParameters {
    /**
     * A name of the attached file.
     */
    filename?: string;
  }

  export interface $NoteTakerFeederAttachmentSelectEventParameters {
    /**
     * A name of the attached file.
     */
    filename?: string;
  }

  export interface $NoteTakerFeederAttachmentUploadCompleteEventParameters {
    /**
     * The response message that comes from the server. On the server side this response has to be put within
     * the "body" tags of the response document of the iFrame. It can consist of a return code and an optional
     * message. This does not work in cross-domain scenarios.
     */
    response?: string;
  }
}

declare module "sap/suite/ui/commons/NumericTile" {
  import {
    default as InfoTile,
    $InfoTileSettings,
  } from "sap/suite/ui/commons/InfoTile";

  import {
    DeviationIndicator,
    InfoTileValueColor,
  } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
   *
   * This control is the implementation of the InfoTile to show a numeric value.
   */
  class NumericTile extends InfoTile {
    /**
     * Constructor for a new NumericTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $NumericTileSettings
    );
    /**
     * Constructor for a new NumericTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $NumericTileSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.NumericTile with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.InfoTile.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NumericTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.NumericTile.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getIndicator indicator}.
     *
     * The indicator arrow that shows value deviation.
     *
     * Default value is `"None"`.
     *
     * @returns Value of property `indicator`
     */
    getIndicator(): DeviationIndicator | keyof typeof DeviationIndicator;
    /**
     * Gets current value of property {@link #getScale scale}.
     *
     * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
     * be used for units.
     *
     * @returns Value of property `scale`
     */
    getScale(): string;
    /**
     * Gets current value of property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     *
     * @returns Value of property `unit`
     */
    getUnit(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The actual value.
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueColor valueColor}.
     *
     * The semantic color of the value.
     *
     * @returns Value of property `valueColor`
     */
    getValueColor(): InfoTileValueColor | keyof typeof InfoTileValueColor;
    /**
     * Sets a new value for property {@link #getIndicator indicator}.
     *
     * The indicator arrow that shows value deviation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIndicator(
      /**
       * New value for property `indicator`
       */
      sIndicator?: DeviationIndicator | keyof typeof DeviationIndicator
    ): this;
    /**
     * Sets a new value for property {@link #getScale scale}.
     *
     * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
     * be used for units.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScale(
      /**
       * New value for property `scale`
       */
      sScale?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUnit(
      /**
       * New value for property `unit`
       */
      sUnit?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The actual value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueColor valueColor}.
     *
     * The semantic color of the value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueColor(
      /**
       * New value for property `valueColor`
       */
      sValueColor?: InfoTileValueColor | keyof typeof InfoTileValueColor
    ): this;
  }
  export default NumericTile;

  export interface $NumericTileSettings extends $InfoTileSettings {
    /**
     * The actual value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
     * be used for units.
     */
    scale?: string | PropertyBindingInfo;

    /**
     * The percent sign, the currency symbol, or the unit of measure.
     */
    unit?: string | PropertyBindingInfo;

    /**
     * The semantic color of the value.
     */
    valueColor?:
      | (InfoTileValueColor | keyof typeof InfoTileValueColor)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The indicator arrow that shows value deviation.
     */
    indicator?:
      | (DeviationIndicator | keyof typeof DeviationIndicator)
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/PictureZoomIn" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated. Not Fiori.
   *
   * Shows picture in fullscreen.
   */
  class PictureZoomIn extends Control {
    /**
     * Constructor for a new PictureZoomIn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PictureZoomInSettings
    );
    /**
     * Constructor for a new PictureZoomIn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PictureZoomInSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.PictureZoomIn with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PictureZoomIn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.PictureZoomIn.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the busyIndicator in the aggregation {@link #getBusyIndicator busyIndicator}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyBusyIndicator(): this;
    /**
     * Gets content of aggregation {@link #getBusyIndicator busyIndicator}.
     *
     * Custom busy indicator.
     */
    getBusyIndicator(): Control;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Description is shown under image.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getImageSrc imageSrc}.
     *
     * Source for image.
     *
     * @returns Value of property `imageSrc`
     */
    getImageSrc(): URI;
    /**
     * Sets the aggregated {@link #getBusyIndicator busyIndicator}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBusyIndicator(
      /**
       * The busyIndicator to set
       */
      oBusyIndicator: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Description is shown under image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getImageSrc imageSrc}.
     *
     * Source for image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImageSrc(
      /**
       * New value for property `imageSrc`
       */
      sImageSrc?: URI
    ): this;
  }
  export default PictureZoomIn;

  export interface $PictureZoomInSettings extends $ControlSettings {
    /**
     * Description is shown under image.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Source for image.
     */
    imageSrc?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Custom busy indicator.
     */
    busyIndicator?: Control;
  }
}

declare module "sap/suite/ui/commons/ProcessFlow" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ProcessFlowLaneHeader from "sap/suite/ui/commons/ProcessFlowLaneHeader";

  import Event from "sap/ui/base/Event";

  import AriaProperties from "sap/suite/ui/commons/AriaProperties";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import ProcessFlowNode from "sap/suite/ui/commons/ProcessFlowNode";

  import ProcessFlowConnectionLabel from "sap/suite/ui/commons/ProcessFlowConnectionLabel";

  import { ProcessFlowZoomLevel } from "sap/suite/ui/commons/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Complex control that enables you to display documents or other items in their flow.
   */
  class ProcessFlow extends Control {
    /**
     * Constructor for a new ProcessFlow.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProcessFlowSettings
    );
    /**
     * Constructor for a new ProcessFlow.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProcessFlowSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ProcessFlow with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ProcessFlow>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ProcessFlow.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some lane to the aggregation {@link #getLanes lanes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addLane(
      /**
       * The lane to add; if empty, nothing is inserted
       */
      oLane: ProcessFlowLaneHeader
    ): this;
    /**
     * Function applies the changes to the display state based on the requirements. If any node is in the highlighted
     * state all others are set to the dimmed state.
     */
    applyNodeDisplayState(): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerPress headerPress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when the header column is clicked. This event is available only in header mode, i.e.
     * when no nodes are defined.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeaderPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowHeaderPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerPress headerPress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when the header column is clicked. This event is available only in header mode, i.e.
     * when no nodes are defined.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachHeaderPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowHeaderPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:labelPress labelPress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when a process flow connection label was clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLabelPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowLabelPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:labelPress labelPress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when a process flow connection label was clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLabelPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowLabelPressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:nodePress nodePress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when a process flow node was clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachNodePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowNodePressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:nodePress nodePress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when a process flow node was clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachNodePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowNodePressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
     * node)
     *
     * Attaches event handler `fnFunction` to the {@link #event:nodeTitlePress nodeTitlePress} event of this
     * `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when a process flow node title was clicked. The user can access the clicked process
     * flow node control object which is the only argument of the event handler.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachNodeTitlePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowNodeTitlePressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
     * node)
     *
     * Attaches event handler `fnFunction` to the {@link #event:nodeTitlePress nodeTitlePress} event of this
     * `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when a process flow node title was clicked. The user can access the clicked process
     * flow node control object which is the only argument of the event handler.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachNodeTitlePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowNodeTitlePressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:onError onError} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when an issue occurs with the process flow calculation. In most cases, there is an
     * issue with the data. The console contains the detailed error description with the errors.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachOnError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowOnErrorEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:onError onError} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
     *
     * This event is fired when an issue occurs with the process flow calculation. In most cases, there is an
     * issue with the data. The console contains the detailed error description with the errors.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachOnError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowOnErrorEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the ariaProperties in the aggregation {@link #getAriaProperties ariaProperties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAriaProperties(): this;
    /**
     * Destroys all the lanes in the aggregation {@link #getTokens lanes}.
     */
    destroyLanes(): void;
    /**
     * Destroys all the nodes in the aggregation {@link #getNodes nodes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyNodes(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:headerPress headerPress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachHeaderPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowHeaderPressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:labelPress labelPress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachLabelPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowLabelPressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:nodePress nodePress} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachNodePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowNodePressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
     * node)
     *
     * Detaches event handler `fnFunction` from the {@link #event:nodeTitlePress nodeTitlePress} event of this
     * `sap.suite.ui.commons.ProcessFlow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachNodeTitlePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowNodeTitlePressEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:onError onError} event of this `sap.suite.ui.commons.ProcessFlow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachOnError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowOnErrorEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:headerPress headerPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireHeaderPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowHeaderPressEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:labelPress labelPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireLabelPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowLabelPressEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:nodePress nodePress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireNodePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowNodePressEventParameters
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
     * node)
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:nodeTitlePress nodeTitlePress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireNodeTitlePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowNodeTitlePressEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:onError onError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireOnError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowOnErrorEventParameters
    ): this;
    /**
     * Gets content of aggregation {@link #getAriaProperties ariaProperties}.
     *
     * ARIA-compliant properties to be added to the control.
     */
    getAriaProperties(): AriaProperties;
    /**
     * Function returns the nodeId of the node which is focused.
     *
     * @returns The id of focused node
     */
    getFocusedNode(): string;
    /**
     * Gets current value of property {@link #getFoldedCorners foldedCorners}.
     *
     * This property defines the folded corners for the single node control. The following values exist: - true:
     * means folded corner - false/null/undefined: means normal corner
     *
     * Default value is `false`.
     *
     * @returns Value of property `foldedCorners`
     */
    getFoldedCorners(): boolean;
    /**
     * @SINCE 1.46.0
     *
     * Returns a lane from the aggregation named 'lanes' by comparing the laneId property of lane.
     *
     * @returns the requested lane or null
     */
    getLane(
      /**
       * ID of the lane to return
       */
      sLaneId: string
    ): ProcessFlowLaneHeader;
    /**
     * Gets content of aggregation {@link #getLanes lanes}.
     *
     * This is a header of the table for the process flow control.
     */
    getLanes(): ProcessFlowLaneHeader[];
    /**
     * @SINCE 1.46.0
     *
     * Returns a node from the aggregation named 'nodes' by comparing the nodeId property of node.
     *
     * @returns the requested node or null
     */
    getNode(
      /**
       * ID of node to return
       */
      sNodeId: string
    ): ProcessFlowNode;
    /**
     * Gets content of aggregation {@link #getNodes nodes}.
     *
     * This is the aggregation of nodes in the process flow control.
     */
    getNodes(): ProcessFlowNode[];
    /**
     * Gets current value of property {@link #getScrollable scrollable}.
     *
     * By default, the control body is embedded into a scroll container of fixed size, so the user can put the
     * control into a fixed size layout. When the control body (the graph) gets larger, the container cuts the
     * overflowing parts of the graph and the cut parts can be displayed by scrolling the control body. When
     * the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
     *
     * The scrolling feature can be turned off by setting this property value to false, so the width/height
     * of the whole control will change as the flow graph gets smaller/larger. In this case the control body
     * could not be scrolled, as the control body size matches the control container size.
     *
     * Default value is `true`.
     *
     * @returns Value of property `scrollable`
     */
    getScrollable(): boolean;
    /**
     * Gets current value of property {@link #getShowLabels showLabels}.
     *
     * Defines if the connection labels are shown or not.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showLabels`
     */
    getShowLabels(): boolean;
    /**
     * Gets current value of property {@link #getWheelZoomable wheelZoomable}.
     *
     * Defines if semantic zooming by mouse wheel events on desktop browsers is enabled.
     *
     * Default value is `true`.
     *
     * @returns Value of property `wheelZoomable`
     */
    getWheelZoomable(): boolean;
    /**
     * Function returns current zoom level.
     *
     * @returns The zoomLevel
     */
    getZoomLevel(): string;
    /**
     * Checks for the provided `sap.suite.ui.commons.ProcessFlowLaneHeader` in the aggregation {@link #getLanes lanes}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfLane(
      /**
       * The lane whose index is looked for
       */
      oLane: ProcessFlowLaneHeader
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.ProcessFlowNode` in the aggregation {@link #getNodes nodes}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfNode(
      /**
       * The node whose index is looked for
       */
      oNode: ProcessFlowNode
    ): int;
    /**
     * Inserts a lane into the aggregation {@link #getLanes lanes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertLane(
      /**
       * The lane to insert; if empty, nothing is inserted
       */
      oLane: ProcessFlowLaneHeader,
      /**
       * The `0`-based index the lane should be inserted at; for a negative value of `iIndex`, the lane is inserted
       * at position 0; for a value greater than the current size of the aggregation, the lane is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a node into the aggregation {@link #getNodes nodes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertNode(
      /**
       * The node to insert; if empty, nothing is inserted
       */
      oNode: ProcessFlowNode,
      /**
       * The `0`-based index the node should be inserted at; for a negative value of `iIndex`, the node is inserted
       * at position 0; for a value greater than the current size of the aggregation, the node is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.44
     *
     * Optimizes the layout and updates the model. To be used carefully because of its possible side effects
     * on the performance.
     *
     * @returns this to allow method chaining
     */
    optimizeLayout(
      /**
       * True if the layout should be optimized; false if the layout should be brought to the initial state.
       */
      isOptimized: boolean
    ): ProcessFlow;
    /**
     * Removes all the controls from the aggregation {@link #getTokens lanes}. Additionally, it unregisters
     * them from the hosting UIArea.
     */
    removeAllLanes(): void;
    /**
     * Removes all the controls from the aggregation {@link #getNodes nodes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllNodes(): ProcessFlowNode[];
    /**
     * Removes a lane from the aggregation {@link #getLanes lanes}.
     *
     * @returns The removed lane or `null`
     */
    removeLane(
      /**
       * The lane to remove or its index or id
       */
      vLane: int | string | ProcessFlowLaneHeader
    ): ProcessFlowLaneHeader | null;
    /**
     * Removes a node from the aggregation {@link #getNodes nodes}.
     *
     * @returns The removed node or `null`
     */
    removeNode(
      /**
       * The node to remove or its index or id
       */
      vNode: int | string | ProcessFlowNode
    ): ProcessFlowNode | null;
    /**
     * Sets the aggregated {@link #getAriaProperties ariaProperties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAriaProperties(
      /**
       * The ariaProperties to set
       */
      oAriaProperties: AriaProperties
    ): this;
    /**
     * @SINCE 1.32
     *
     * Sets the focus to the given Label
     */
    setFocusToLabel(
      /**
       * Label to focus
       */
      label: ProcessFlowConnectionLabel
    ): void;
    /**
     * Sets a new value for property {@link #getFoldedCorners foldedCorners}.
     *
     * This property defines the folded corners for the single node control. The following values exist: - true:
     * means folded corner - false/null/undefined: means normal corner
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFoldedCorners(
      /**
       * New value for property `foldedCorners`
       */
      bFoldedCorners?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getScrollable scrollable}.
     *
     * By default, the control body is embedded into a scroll container of fixed size, so the user can put the
     * control into a fixed size layout. When the control body (the graph) gets larger, the container cuts the
     * overflowing parts of the graph and the cut parts can be displayed by scrolling the control body. When
     * the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
     *
     * The scrolling feature can be turned off by setting this property value to false, so the width/height
     * of the whole control will change as the flow graph gets smaller/larger. In this case the control body
     * could not be scrolled, as the control body size matches the control container size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScrollable(
      /**
       * New value for property `scrollable`
       */
      bScrollable?: boolean
    ): this;
    /**
     * @SINCE 1.32
     *
     * Sets the path between source and target node to selected status and rerenders the control. If parameters
     * are null, sets all nodes to normal status.
     */
    setSelectedPath(
      /**
       * of the path or null
       */
      sourceNodeId: string,
      /**
       * of the path or null
       */
      targetNodeId: string
    ): void;
    /**
     * Overwrites setShowLabels of ProcessFlow control to apply additional functionality.
     */
    setShowLabels(
      /**
       * New value for showLabels
       */
      value: boolean
    ): void;
    /**
     * Sets a new value for property {@link #getWheelZoomable wheelZoomable}.
     *
     * Defines if semantic zooming by mouse wheel events on desktop browsers is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWheelZoomable(
      /**
       * New value for property `wheelZoomable`
       */
      bWheelZoomable?: boolean
    ): this;
    /**
     * Function sets the zoom level.
     */
    setZoomLevel(
      /**
       * The new zoom level.
       */
      zoomLevel: ProcessFlowZoomLevel | keyof typeof ProcessFlowZoomLevel
    ): void;
    /**
     * Updates the model and rerenders the control.
     */
    updateModel(): void;
    /**
     * Updates the nodes and rerenders the control.
     */
    updateNodesOnly(): void;
    /**
     * Function sets new zoom level with higher level of details. Having max details it stays as it is.
     *
     * @returns The updated zoomLevel
     */
    zoomIn(): string;
    /**
     * Function sets new zoom level with smaller level of details. Having the least detail view it stays as
     * it is.
     *
     * @returns The updated zoomLevel
     */
    zoomOut(): string;
  }
  export default ProcessFlow;

  export interface $ProcessFlowSettings extends $ControlSettings {
    /**
     * This property defines the folded corners for the single node control. The following values exist: - true:
     * means folded corner - false/null/undefined: means normal corner
     */
    foldedCorners?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * By default, the control body is embedded into a scroll container of fixed size, so the user can put the
     * control into a fixed size layout. When the control body (the graph) gets larger, the container cuts the
     * overflowing parts of the graph and the cut parts can be displayed by scrolling the control body. When
     * the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
     *
     * The scrolling feature can be turned off by setting this property value to false, so the width/height
     * of the whole control will change as the flow graph gets smaller/larger. In this case the control body
     * could not be scrolled, as the control body size matches the control container size.
     */
    scrollable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines if semantic zooming by mouse wheel events on desktop browsers is enabled.
     */
    wheelZoomable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines if the connection labels are shown or not.
     */
    showLabels?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * This is the aggregation of nodes in the process flow control.
     */
    nodes?:
      | ProcessFlowNode[]
      | ProcessFlowNode
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * This is a header of the table for the process flow control.
     */
    lanes?:
      | ProcessFlowLaneHeader[]
      | ProcessFlowLaneHeader
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * ARIA-compliant properties to be added to the control.
     */
    ariaProperties?: AriaProperties;

    /**
     * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
     * node)
     *
     * This event is fired when a process flow node title was clicked. The user can access the clicked process
     * flow node control object which is the only argument of the event handler.
     */
    nodeTitlePress?: (
      oEvent: Event<$ProcessFlowNodeTitlePressEventParameters>
    ) => void;

    /**
     * This event is fired when a process flow node was clicked.
     */
    nodePress?: (oEvent: Event<$ProcessFlowNodePressEventParameters>) => void;

    /**
     * This event is fired when a process flow connection label was clicked.
     */
    labelPress?: (oEvent: Event<$ProcessFlowLabelPressEventParameters>) => void;

    /**
     * This event is fired when the header column is clicked. This event is available only in header mode, i.e.
     * when no nodes are defined.
     */
    headerPress?: (
      oEvent: Event<$ProcessFlowHeaderPressEventParameters>
    ) => void;

    /**
     * This event is fired when an issue occurs with the process flow calculation. In most cases, there is an
     * issue with the data. The console contains the detailed error description with the errors.
     */
    onError?: (oEvent: Event<$ProcessFlowOnErrorEventParameters>) => void;
  }

  export interface $ProcessFlowHeaderPressEventParameters {
    /**
     * This object represents the wrapped process flow lane header object.
     */
    oEvent?: object;
  }

  export interface $ProcessFlowLabelPressEventParameters {
    /**
     * This object represents the label information.
     */
    oEvent?: object;
  }

  export interface $ProcessFlowNodePressEventParameters {
    /**
     * This object represents the wrapped process flow node object.
     */
    oEvent?: object;
  }

  export interface $ProcessFlowNodeTitlePressEventParameters {
    /**
     * This object represents the wrapped process flow node object.
     */
    oEvent?: object;
  }

  export interface $ProcessFlowOnErrorEventParameters {
    /**
     * This parameters contains the localized string with error message.
     */
    oEvent?: object;
  }
}

declare module "sap/suite/ui/commons/ProcessFlowConnection" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    ProcessFlowConnectionState,
    ProcessFlowConnectionType,
    ProcessFlowZoomLevel,
  } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * This control is used inside the ProcessFlow control to connect process flow node A with process flow
   * node B in respect to the style(x) chosen by the application.
   */
  class ProcessFlowConnection extends Control {
    /**
     * Constructor for a new ProcessFlowConnection.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProcessFlowConnectionSettings
    );
    /**
     * Constructor for a new ProcessFlowConnection.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProcessFlowConnectionSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowConnection with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ProcessFlowConnection>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowConnection.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDrawData drawData}.
     *
     * This is an array of the following attributes for one element: 1. flowLine (string) - A connection definition
     * where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection
     * between nodes in a process flow control. The string can contain the following characters: - "r" for right,
     * - "t" for top, - "l" for left, - "b" for bottom. 2. targetNodeState (ProcessFlowNodeState) - A copy of
     * the target node status. If the target node is created, the line is solid. If the target node is planned,
     * the line is dashed. 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property
     * defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual
     * style of the control. 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
     *
     * @returns Value of property `drawData`
     */
    getDrawData(): object[];
    /**
     * @deprecated (since 1.32) - State is deprecated because of no usages. There will be no replacement.
     *
     * Gets current value of property {@link #getState state}.
     *
     * State of the connection.
     *
     * Default value is `"Regular"`.
     *
     * @returns Value of property `state`
     */
    getState():
      | ProcessFlowConnectionState
      | keyof typeof ProcessFlowConnectionState;
    /**
     * @deprecated (since 1.32) - Type is deprecated because of no usages. There will be no replacement.
     *
     * Gets current value of property {@link #getType type}.
     *
     * Type of the connection.
     *
     * Default value is `"Normal"`.
     *
     * @returns Value of property `type`
     */
    getType():
      | ProcessFlowConnectionType
      | keyof typeof ProcessFlowConnectionType;
    /**
     * Gets current value of property {@link #getZoomLevel zoomLevel}.
     *
     * This is a current zoom level for the connection. The point of connection to the node is derived from
     * zoom level.
     *
     * Default value is `"Two"`.
     *
     * @returns Value of property `zoomLevel`
     */
    getZoomLevel(): ProcessFlowZoomLevel | keyof typeof ProcessFlowZoomLevel;
    /**
     * Sets a new value for property {@link #getDrawData drawData}.
     *
     * This is an array of the following attributes for one element: 1. flowLine (string) - A connection definition
     * where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection
     * between nodes in a process flow control. The string can contain the following characters: - "r" for right,
     * - "t" for top, - "l" for left, - "b" for bottom. 2. targetNodeState (ProcessFlowNodeState) - A copy of
     * the target node status. If the target node is created, the line is solid. If the target node is planned,
     * the line is dashed. 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property
     * defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual
     * style of the control. 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDrawData(
      /**
       * New value for property `drawData`
       */
      sDrawData?: object[]
    ): this;
    /**
     * @deprecated (since 1.32) - State is deprecated because of no usages. There will be no replacement.
     *
     * Sets a new value for property {@link #getState state}.
     *
     * State of the connection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Regular"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?:
        | ProcessFlowConnectionState
        | keyof typeof ProcessFlowConnectionState
    ): this;
    /**
     * @deprecated (since 1.32) - Type is deprecated because of no usages. There will be no replacement.
     *
     * Sets a new value for property {@link #getType type}.
     *
     * Type of the connection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Normal"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ProcessFlowConnectionType | keyof typeof ProcessFlowConnectionType
    ): this;
    /**
     * Sets a new value for property {@link #getZoomLevel zoomLevel}.
     *
     * This is a current zoom level for the connection. The point of connection to the node is derived from
     * zoom level.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Two"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setZoomLevel(
      /**
       * New value for property `zoomLevel`
       */
      sZoomLevel?: ProcessFlowZoomLevel | keyof typeof ProcessFlowZoomLevel
    ): this;
  }
  export default ProcessFlowConnection;

  export interface $ProcessFlowConnectionSettings extends $ControlSettings {
    /**
     * This is an array of the following attributes for one element: 1. flowLine (string) - A connection definition
     * where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection
     * between nodes in a process flow control. The string can contain the following characters: - "r" for right,
     * - "t" for top, - "l" for left, - "b" for bottom. 2. targetNodeState (ProcessFlowNodeState) - A copy of
     * the target node status. If the target node is created, the line is solid. If the target node is planned,
     * the line is dashed. 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property
     * defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual
     * style of the control. 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
     */
    drawData?: object[] | PropertyBindingInfo | `{${string}}`;

    /**
     * This is a current zoom level for the connection. The point of connection to the node is derived from
     * zoom level.
     */
    zoomLevel?:
      | (ProcessFlowZoomLevel | keyof typeof ProcessFlowZoomLevel)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @deprecated (since 1.32) - Type is deprecated because of no usages. There will be no replacement.
     *
     * Type of the connection.
     */
    type?:
      | (ProcessFlowConnectionType | keyof typeof ProcessFlowConnectionType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @deprecated (since 1.32) - State is deprecated because of no usages. There will be no replacement.
     *
     * State of the connection.
     */
    state?:
      | (ProcessFlowConnectionState | keyof typeof ProcessFlowConnectionState)
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/ProcessFlowConnectionLabel" {
  import { default as Button, $ButtonSettings } from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ProcessFlowConnectionLabelState } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * This control is used inside the ProcessFlow control providing information on connections. Using this
   * control, you need to take care of the lifetime handling instance as instances of this control are not
   * destroyed automatically.
   */
  class ProcessFlowConnectionLabel extends Button {
    /**
     * Constructor for a new ProcessFlowConnectionLabel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ProcessFlowConnectionLabelSettings
    );
    /**
     * Constructor for a new ProcessFlowConnectionLabel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ProcessFlowConnectionLabelSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowConnectionLabel with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Button.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ProcessFlowConnectionLabel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowConnectionLabel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPriority priority}.
     *
     * Priority is used to define which label is visible if the state of multiple labels is equal. Assuming
     * there are multiple labels with equal state (e.g. Negative state appears twice), the priority decides
     * which one needs to be selected.
     *
     * Default value is `0`.
     *
     * @returns Value of property `priority`
     */
    getPriority(): int;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Specifies the state of the connection label. If multiple labels are available for one connection, the
     * label will be selected by state based on the following order: Neutral -> Positive -> Critical -> Negative.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Value of property `state`
     */
    getState():
      | ProcessFlowConnectionLabelState
      | keyof typeof ProcessFlowConnectionLabelState;
    /**
     * Sets a new value for property {@link #getPriority priority}.
     *
     * Priority is used to define which label is visible if the state of multiple labels is equal. Assuming
     * there are multiple labels with equal state (e.g. Negative state appears twice), the priority decides
     * which one needs to be selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPriority(
      /**
       * New value for property `priority`
       */
      iPriority?: int
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * Specifies the state of the connection label. If multiple labels are available for one connection, the
     * label will be selected by state based on the following order: Neutral -> Positive -> Critical -> Negative.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?:
        | ProcessFlowConnectionLabelState
        | keyof typeof ProcessFlowConnectionLabelState
    ): this;
  }
  export default ProcessFlowConnectionLabel;

  export interface $ProcessFlowConnectionLabelSettings extends $ButtonSettings {
    /**
     * Priority is used to define which label is visible if the state of multiple labels is equal. Assuming
     * there are multiple labels with equal state (e.g. Negative state appears twice), the priority decides
     * which one needs to be selected.
     */
    priority?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies the state of the connection label. If multiple labels are available for one connection, the
     * label will be selected by state based on the following order: Neutral -> Positive -> Critical -> Negative.
     */
    state?:
      | (
          | ProcessFlowConnectionLabelState
          | keyof typeof ProcessFlowConnectionLabelState
        )
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/ProcessFlowLaneHeader" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ProcessFlowZoomLevel } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * This control gives you an overview of documents or items used in a process flow. The process flow is
   * represented by donut chart sections that are colored according to the status of documents. This control
   * can be used in two different ways. If you use it standalone, an event is triggered and can be caught
   * to display the node map. If you use it with nodes or documents, it gives you an overview of the documents
   * or items used in the process flow, which is represented by the donut chart sections.
   */
  class ProcessFlowLaneHeader extends Control {
    /**
     * Constructor for a new ProcessFlowLaneHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ProcessFlowLaneHeaderSettings
    );
    /**
     * Constructor for a new ProcessFlowLaneHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ProcessFlowLaneHeaderSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowLaneHeader with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ProcessFlowLaneHeader>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowLaneHeader.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowLaneHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowLaneHeader` itself.
     *
     * This event is fired when the header is clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowLaneHeaderPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowLaneHeader`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowLaneHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowLaneHeader` itself.
     *
     * This event is fired when the header is clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowLaneHeaderPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowLaneHeader`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowLaneHeader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowLaneHeaderPressEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowLaneHeaderPressEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getIconSrc iconSrc}.
     *
     * Icon to be displayed in the middle of the control.
     *
     * @returns Value of property `iconSrc`
     */
    getIconSrc(): URI;
    /**
     * Gets current value of property {@link #getLaneId laneId}.
     *
     * Internal identification of the header.
     *
     * @returns Value of property `laneId`
     */
    getLaneId(): string;
    /**
     * Overrides the getter method for property position. It returns the position that was changed due to the
     * artificial merged lanes. Otherwise it returns the position set as a property.
     *
     * @returns Lane position
     */
    getPosition(): int;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state
     * and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value:
     * 20]. Possible states are states are positive, negative, neutral, and planned.
     *
     * @returns Value of property `state`
     */
    getState(): object;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Text information that is displayed in the control.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getZoomLevel zoomLevel}.
     *
     * Current zoom level for the lane header.
     *
     * @returns Value of property `zoomLevel`
     */
    getZoomLevel(): ProcessFlowZoomLevel | keyof typeof ProcessFlowZoomLevel;
    /**
     * Sets a new value for property {@link #getIconSrc iconSrc}.
     *
     * Icon to be displayed in the middle of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSrc(
      /**
       * New value for property `iconSrc`
       */
      sIconSrc?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getLaneId laneId}.
     *
     * Internal identification of the header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLaneId(
      /**
       * New value for property `laneId`
       */
      sLaneId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * Position of the lane in the process flow control. Numbering of the position has to be sequential and
     * needs to start from 0.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPosition(
      /**
       * New value for property `position`
       */
      iPosition?: int
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state
     * and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value:
     * 20]. Possible states are states are positive, negative, neutral, and planned.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      oState?: object
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Text information that is displayed in the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getZoomLevel zoomLevel}.
     *
     * Current zoom level for the lane header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setZoomLevel(
      /**
       * New value for property `zoomLevel`
       */
      sZoomLevel?: ProcessFlowZoomLevel | keyof typeof ProcessFlowZoomLevel
    ): this;
  }
  export default ProcessFlowLaneHeader;

  export interface $ProcessFlowLaneHeaderSettings extends $ControlSettings {
    /**
     * Text information that is displayed in the control.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Icon to be displayed in the middle of the control.
     */
    iconSrc?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Position of the lane in the process flow control. Numbering of the position has to be sequential and
     * needs to start from 0.
     */
    position?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Internal identification of the header.
     */
    laneId?: string | PropertyBindingInfo;

    /**
     * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state
     * and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value:
     * 20]. Possible states are states are positive, negative, neutral, and planned.
     */
    state?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Current zoom level for the lane header.
     */
    zoomLevel?:
      | (ProcessFlowZoomLevel | keyof typeof ProcessFlowZoomLevel)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * This event is fired when the header is clicked.
     */
    press?: (oEvent: Event<$ProcessFlowLaneHeaderPressEventParameters>) => void;
  }

  export interface $ProcessFlowLaneHeaderPressEventParameters {
    /**
     * tbd
     */
    oEvent?: object;
  }
}

declare module "sap/suite/ui/commons/ProcessFlowNode" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import AriaProperties from "sap/suite/ui/commons/AriaProperties";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    ProcessFlowNodeState,
    ProcessFlowNodeType,
  } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * This control enables you to see documents (or other items) in respect to their statuses – positive, negative,
   * neutral, planned, planned negative. In addition to the node title (which can be optionally a hyperlink)
   * also two other text fields are provided and can be filled. The process flow nodes consider all styles
   * depending on the status they are in. The user can update or change the content of the node. The content
   * of the node can be also filtered according to updated data and specific parameters set. This means that
   * also the node’s style is affected.
   */
  class ProcessFlowNode extends Control {
    /**
     * Constructor for a new ProcessFlowNode.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ProcessFlowNodeSettings
    );
    /**
     * Constructor for a new ProcessFlowNode.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ProcessFlowNodeSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowNode with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ProcessFlowNode>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowNode.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some parent into the association {@link #getParents parents}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addParent(
      /**
       * The parents to add; if empty, nothing is inserted
       */
      vParent: ID | ProcessFlowNode
    ): this;
    /**
     * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
     * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowNode`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
     *
     * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress
     * event has been fired.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowNodePressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
     * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowNode`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
     *
     * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress
     * event has been fired.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowNodePressEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
     *
     * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.suite.ui.commons.ProcessFlowNode`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
     *
     * This event handler is executed when the user clicks the node title. This event is fired only when the
     * title is clickable (isTitleClickable equals true).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTitlePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowNodeTitlePressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
     *
     * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.suite.ui.commons.ProcessFlowNode`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
     *
     * This event handler is executed when the user clicks the node title. This event is fired only when the
     * title is clickable (isTitleClickable equals true).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTitlePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowNodeTitlePressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the ariaProperties in the aggregation {@link #getAriaProperties ariaProperties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAriaProperties(): this;
    /**
     * @SINCE 1.50
     *
     * Destroys the zoomLevelFourContent in the aggregation {@link #getZoomLevelFourContent zoomLevelFourContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyZoomLevelFourContent(): this;
    /**
     * @SINCE 1.50
     *
     * Destroys the zoomLevelOneContent in the aggregation {@link #getZoomLevelOneContent zoomLevelOneContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyZoomLevelOneContent(): this;
    /**
     * @SINCE 1.50
     *
     * Destroys the zoomLevelThreeContent in the aggregation {@link #getZoomLevelThreeContent zoomLevelThreeContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyZoomLevelThreeContent(): this;
    /**
     * @SINCE 1.50
     *
     * Destroys the zoomLevelTwoContent in the aggregation {@link #getZoomLevelTwoContent zoomLevelTwoContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyZoomLevelTwoContent(): this;
    /**
     * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
     * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
     *
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowNode`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ProcessFlowNodePressEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
     *
     * Detaches event handler `fnFunction` from the {@link #event:titlePress titlePress} event of this `sap.suite.ui.commons.ProcessFlowNode`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachTitlePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$ProcessFlowNodeTitlePressEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
     * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowNodePressEventParameters
    ): this;
    /**
     * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:titlePress titlePress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireTitlePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ProcessFlowNodeTitlePressEventParameters
    ): this;
    /**
     * Gets content of aggregation {@link #getAriaProperties ariaProperties}.
     *
     * ARIA-compliant properties to be added to the control.
     */
    getAriaProperties(): AriaProperties;
    /**
     * Gets current value of property {@link #getChildren children}.
     *
     * Defines an array of children of the node.
     *
     * @returns Value of property `children`
     */
    getChildren(): any[];
    /**
     * Gets current value of property {@link #getFocused focused}.
     *
     * The parameter defines if the node should be displayed in focus state.
     *
     * Default value is `false`.
     *
     * @returns Value of property `focused`
     */
    getFocused(): boolean;
    /**
     * Gets current value of property {@link #getHighlighted highlighted}.
     *
     * The parameter defines if the node should be displayed in highlighted state.
     *
     * Default value is `false`.
     *
     * @returns Value of property `highlighted`
     */
    getHighlighted(): boolean;
    /**
     * @deprecated (since 1.26) - According to the new requirement there should be only one click event for
     * each node (click on the whole node – see Press event) that is why titlePress event should not be used
     * any longer. Hence isTitleClickable should not be used either.
     *
     * Gets current value of property {@link #getIsTitleClickable isTitleClickable}.
     *
     * Specifies if the node title is clickable.
     *
     * Default value is `false`.
     *
     * @returns Value of property `isTitleClickable`
     */
    getIsTitleClickable(): boolean;
    /**
     * Gets current value of property {@link #getLaneId laneId}.
     *
     * Specifies the assignment of the node to the respective lane.
     *
     * @returns Value of property `laneId`
     */
    getLaneId(): string;
    /**
     * Gets current value of property {@link #getNodeId nodeId}.
     *
     * Node identifier.
     *
     * @returns Value of property `nodeId`
     */
    getNodeId(): string;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getParents parents}.
     */
    getParents(): ID[];
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * The parameter defines if the node should be displayed in selected state.
     *
     * Default value is `false`.
     *
     * @returns Value of property `selected`
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * State of the node.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Value of property `state`
     */
    getState(): ProcessFlowNodeState | keyof typeof ProcessFlowNodeState;
    /**
     * Gets current value of property {@link #getStateText stateText}.
     *
     * Description of the state, for example "Status OK".
     *
     * @returns Value of property `stateText`
     */
    getStateText(): string;
    /**
     * Gets current value of property {@link #getTag tag}.
     *
     * The user-defined object which is returned back to the user by a node click event.
     *
     * @returns Value of property `tag`
     */
    getTag(): object;
    /**
     * Gets current value of property {@link #getTexts texts}.
     *
     * The property contains the additional texts on the node. The expected type is array of strings. One array
     * must not contain more than two strings. Additional strings in the array will be ignored.
     *
     * @returns Value of property `texts`
     */
    getTexts(): string[];
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The node title.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getTitleAbbreviation titleAbbreviation}.
     *
     * Title abbreviation is used in zoom level 'Three'.
     *
     * @returns Value of property `titleAbbreviation`
     */
    getTitleAbbreviation(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Type of the node.
     *
     * Default value is `"Single"`.
     *
     * @returns Value of property `type`
     */
    getType(): ProcessFlowNodeType | keyof typeof ProcessFlowNodeType;
    /**
     * @SINCE 1.50
     *
     * Gets content of aggregation {@link #getZoomLevelFourContent zoomLevelFourContent}.
     *
     * The node's content used for zoom level 4. If this aggregation is set, no default content like title and
     * texts is used.
     */
    getZoomLevelFourContent(): Control;
    /**
     * @SINCE 1.50
     *
     * Gets content of aggregation {@link #getZoomLevelOneContent zoomLevelOneContent}.
     *
     * The node's content used for zoom level 1. If this aggregation is set, no default content like title and
     * texts is used.
     */
    getZoomLevelOneContent(): Control;
    /**
     * @SINCE 1.50
     *
     * Gets content of aggregation {@link #getZoomLevelThreeContent zoomLevelThreeContent}.
     *
     * The node's content used for zoom level 3. If this aggregation is set, no default content like title and
     * texts is used.
     */
    getZoomLevelThreeContent(): Control;
    /**
     * @SINCE 1.50
     *
     * Gets content of aggregation {@link #getZoomLevelTwoContent zoomLevelTwoContent}.
     *
     * The node's content used for zoom level 2. If this aggregation is set, no default content like title and
     * texts is used.
     */
    getZoomLevelTwoContent(): Control;
    /**
     * Removes all the controls in the association named {@link #getParents parents}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllParents(): ID[];
    /**
     * Removes an parent from the association named {@link #getParents parents}.
     *
     * @returns The removed parent or `null`
     */
    removeParent(
      /**
       * The parent to be removed or its index or ID
       */
      vParent: int | ID | ProcessFlowNode
    ): ID | null;
    /**
     * Sets the aggregated {@link #getAriaProperties ariaProperties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAriaProperties(
      /**
       * The ariaProperties to set
       */
      oAriaProperties: AriaProperties
    ): this;
    /**
     * Sets a new value for property {@link #getChildren children}.
     *
     * Defines an array of children of the node.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setChildren(
      /**
       * New value for property `children`
       */
      sChildren?: any[]
    ): this;
    /**
     * Sets a new value for property {@link #getFocused focused}.
     *
     * The parameter defines if the node should be displayed in focus state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFocused(
      /**
       * New value for property `focused`
       */
      bFocused?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHighlighted highlighted}.
     *
     * The parameter defines if the node should be displayed in highlighted state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHighlighted(
      /**
       * New value for property `highlighted`
       */
      bHighlighted?: boolean
    ): this;
    /**
     * @deprecated (since 1.26) - According to the new requirement there should be only one click event for
     * each node (click on the whole node – see Press event) that is why titlePress event should not be used
     * any longer. Hence isTitleClickable should not be used either.
     *
     * Sets a new value for property {@link #getIsTitleClickable isTitleClickable}.
     *
     * Specifies if the node title is clickable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIsTitleClickable(
      /**
       * New value for property `isTitleClickable`
       */
      bIsTitleClickable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLaneId laneId}.
     *
     * Specifies the assignment of the node to the respective lane.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLaneId(
      /**
       * New value for property `laneId`
       */
      sLaneId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNodeId nodeId}.
     *
     * Node identifier.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNodeId(
      /**
       * New value for property `nodeId`
       */
      sNodeId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * The parameter defines if the node should be displayed in selected state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * State of the node.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: ProcessFlowNodeState | keyof typeof ProcessFlowNodeState
    ): this;
    /**
     * Sets a new value for property {@link #getStateText stateText}.
     *
     * Description of the state, for example "Status OK".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStateText(
      /**
       * New value for property `stateText`
       */
      sStateText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTag tag}.
     *
     * The user-defined object which is returned back to the user by a node click event.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTag(
      /**
       * New value for property `tag`
       */
      oTag?: object
    ): this;
    /**
     * Sets a new value for property {@link #getTexts texts}.
     *
     * The property contains the additional texts on the node. The expected type is array of strings. One array
     * must not contain more than two strings. Additional strings in the array will be ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTexts(
      /**
       * New value for property `texts`
       */
      sTexts?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The node title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleAbbreviation titleAbbreviation}.
     *
     * Title abbreviation is used in zoom level 'Three'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitleAbbreviation(
      /**
       * New value for property `titleAbbreviation`
       */
      sTitleAbbreviation?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Type of the node.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Single"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ProcessFlowNodeType | keyof typeof ProcessFlowNodeType
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets the aggregated {@link #getZoomLevelFourContent zoomLevelFourContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setZoomLevelFourContent(
      /**
       * The zoomLevelFourContent to set
       */
      oZoomLevelFourContent: Control
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets the aggregated {@link #getZoomLevelOneContent zoomLevelOneContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setZoomLevelOneContent(
      /**
       * The zoomLevelOneContent to set
       */
      oZoomLevelOneContent: Control
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets the aggregated {@link #getZoomLevelThreeContent zoomLevelThreeContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setZoomLevelThreeContent(
      /**
       * The zoomLevelThreeContent to set
       */
      oZoomLevelThreeContent: Control
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets the aggregated {@link #getZoomLevelTwoContent zoomLevelTwoContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setZoomLevelTwoContent(
      /**
       * The zoomLevelTwoContent to set
       */
      oZoomLevelTwoContent: Control
    ): this;
  }
  export default ProcessFlowNode;

  export interface $ProcessFlowNodeSettings extends $ControlSettings {
    /**
     * The node title.
     */
    title?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.26) - According to the new requirement there should be only one click event for
     * each node (click on the whole node – see Press event) that is why titlePress event should not be used
     * any longer. Hence isTitleClickable should not be used either.
     *
     * Specifies if the node title is clickable.
     */
    isTitleClickable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies the assignment of the node to the respective lane.
     */
    laneId?: string | PropertyBindingInfo;

    /**
     * Node identifier.
     */
    nodeId?: string | PropertyBindingInfo;

    /**
     * State of the node.
     */
    state?:
      | (ProcessFlowNodeState | keyof typeof ProcessFlowNodeState)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Type of the node.
     */
    type?:
      | (ProcessFlowNodeType | keyof typeof ProcessFlowNodeType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines an array of children of the node.
     */
    children?: any[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Title abbreviation is used in zoom level 'Three'.
     */
    titleAbbreviation?: string | PropertyBindingInfo;

    /**
     * Description of the state, for example "Status OK".
     */
    stateText?: string | PropertyBindingInfo;

    /**
     * The property contains the additional texts on the node. The expected type is array of strings. One array
     * must not contain more than two strings. Additional strings in the array will be ignored.
     */
    texts?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * The parameter defines if the node should be displayed in highlighted state.
     */
    highlighted?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The parameter defines if the node should be displayed in focus state.
     */
    focused?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The user-defined object which is returned back to the user by a node click event.
     */
    tag?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * The parameter defines if the node should be displayed in selected state.
     */
    selected?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.50
     *
     * The node's content used for zoom level 1. If this aggregation is set, no default content like title and
     * texts is used.
     */
    zoomLevelOneContent?: Control;

    /**
     * @SINCE 1.50
     *
     * The node's content used for zoom level 2. If this aggregation is set, no default content like title and
     * texts is used.
     */
    zoomLevelTwoContent?: Control;

    /**
     * @SINCE 1.50
     *
     * The node's content used for zoom level 3. If this aggregation is set, no default content like title and
     * texts is used.
     */
    zoomLevelThreeContent?: Control;

    /**
     * @SINCE 1.50
     *
     * The node's content used for zoom level 4. If this aggregation is set, no default content like title and
     * texts is used.
     */
    zoomLevelFourContent?: Control;

    /**
     * ARIA-compliant properties to be added to the control.
     */
    ariaProperties?: AriaProperties;

    /**
     * Reference to ProcessFlowNodes which appears before this ProcessFlowNode.
     */
    parents?: Array<ProcessFlowNode | string>;

    /**
     * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
     *
     * This event handler is executed when the user clicks the node title. This event is fired only when the
     * title is clickable (isTitleClickable equals true).
     */
    titlePress?: (
      oEvent: Event<$ProcessFlowNodeTitlePressEventParameters>
    ) => void;

    /**
     * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
     * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
     *
     * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress
     * event has been fired.
     */
    press?: (oEvent: Event<$ProcessFlowNodePressEventParameters>) => void;
  }

  export interface $ProcessFlowNodePressEventParameters {
    /**
     * The node identification.
     */
    oEvent?: object;
  }

  export interface $ProcessFlowNodeTitlePressEventParameters {
    /**
     * The node identification.
     */
    oEvent?: object;
  }
}

declare module "sap/suite/ui/commons/RepeaterViewConfiguration" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
   *
   * A configuration control defining how the content of the sap.suite.ui.commons.ViewRepeater control is
   * displayed and what data is bound.
   */
  class RepeaterViewConfiguration extends Control {
    /**
     * Constructor for a new RepeaterViewConfiguration.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $RepeaterViewConfigurationSettings
    );
    /**
     * Constructor for a new RepeaterViewConfiguration.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $RepeaterViewConfigurationSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.RepeaterViewConfiguration with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RepeaterViewConfiguration>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.RepeaterViewConfiguration.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the externalRepresentation in the aggregation {@link #getExternalRepresentation externalRepresentation}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyExternalRepresentation(): this;
    /**
     * Destroys the template in the aggregation {@link #getTemplate template}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTemplate(): this;
    /**
     * Gets current value of property {@link #getExternal external}.
     *
     * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
     *
     * Default value is `false`.
     *
     * @returns Value of property `external`
     */
    getExternal(): boolean;
    /**
     * Gets content of aggregation {@link #getExternalRepresentation externalRepresentation}.
     *
     * The control to be rendered instead of sap.suite.ui.commons.ViewRepeater's own content. Only used if the
     * "external" property is set to true. This allows you to create custom views, for example, Table views.
     * The sap.suite.ui.commons.ViewRepeater control will share its model with this control if the control does
     * not have its own model.
     */
    getExternalRepresentation(): Control;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconHovered iconHovered}.
     *
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
     * regular icon is hovered.
     *
     * @returns Value of property `iconHovered`
     */
    getIconHovered(): URI;
    /**
     * Gets current value of property {@link #getIconSelected iconSelected}.
     *
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
     * regular icon is selected.
     *
     * @returns Value of property `iconSelected`
     */
    getIconSelected(): URI;
    /**
     * Gets current value of property {@link #getItemHeight itemHeight}.
     *
     * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true.
     * This value is used for calculating the number of tile rows.
     *
     * @returns Value of property `itemHeight`
     */
    getItemHeight(): int;
    /**
     * Gets current value of property {@link #getItemMinWidth itemMinWidth}.
     *
     * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
     *
     * Default value is `-1`.
     *
     * @returns Value of property `itemMinWidth`
     */
    getItemMinWidth(): int;
    /**
     * Gets current value of property {@link #getNumberOfTiles numberOfTiles}.
     *
     * The number of tiles/rows that will be shown on a single page in this view.
     *
     * Default value is `-1`.
     *
     * @returns Value of property `numberOfTiles`
     */
    getNumberOfTiles(): int;
    /**
     * Gets current value of property {@link #getPath path}.
     *
     * A path used for rows/titles data binding.
     *
     * @returns Value of property `path`
     */
    getPath(): string;
    /**
     * Gets current value of property {@link #getResponsive responsive}.
     *
     * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
     * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
     * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
     * of columns depends on the parent control's width. If you resize the control, the number of columns may
     * change respectively so that the content tiles can fill the entire space of a row.
     *
     * Default value is `false`.
     *
     * @returns Value of property `responsive`
     */
    getResponsive(): any;
    /**
     * Gets content of aggregation {@link #getTemplate template}.
     *
     * The control used as a template while displaying rows/tiles in this view. It should not have fixed width
     * wider than defined by the "itemMinWidth" property, otherwise some content may appear cropped.
     */
    getTemplate(): Control;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither
     * this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index
     * number of the view in View Repeater starting from 1.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getExternal external}.
     *
     * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExternal(
      /**
       * New value for property `external`
       */
      bExternal?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getExternalRepresentation externalRepresentation}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExternalRepresentation(
      /**
       * The externalRepresentation to set
       */
      oExternalRepresentation: Control
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconHovered iconHovered}.
     *
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
     * regular icon is hovered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconHovered(
      /**
       * New value for property `iconHovered`
       */
      sIconHovered?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconSelected iconSelected}.
     *
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
     * regular icon is selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSelected(
      /**
       * New value for property `iconSelected`
       */
      sIconSelected?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getItemHeight itemHeight}.
     *
     * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true.
     * This value is used for calculating the number of tile rows.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setItemHeight(
      /**
       * New value for property `itemHeight`
       */
      iItemHeight?: int
    ): this;
    /**
     * Sets a new value for property {@link #getItemMinWidth itemMinWidth}.
     *
     * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setItemMinWidth(
      /**
       * New value for property `itemMinWidth`
       */
      iItemMinWidth?: int
    ): this;
    /**
     * Sets a new value for property {@link #getNumberOfTiles numberOfTiles}.
     *
     * The number of tiles/rows that will be shown on a single page in this view.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNumberOfTiles(
      /**
       * New value for property `numberOfTiles`
       */
      iNumberOfTiles?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPath path}.
     *
     * A path used for rows/titles data binding.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPath(
      /**
       * New value for property `path`
       */
      sPath?: string
    ): this;
    /**
     * Sets a new value for property {@link #getResponsive responsive}.
     *
     * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
     * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
     * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
     * of columns depends on the parent control's width. If you resize the control, the number of columns may
     * change respectively so that the content tiles can fill the entire space of a row.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResponsive(
      /**
       * New value for property `responsive`
       */
      oResponsive?: any
    ): this;
    /**
     * Sets the aggregated {@link #getTemplate template}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTemplate(
      /**
       * The template to set
       */
      oTemplate: Control
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither
     * this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index
     * number of the view in View Repeater starting from 1.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default RepeaterViewConfiguration;

  export interface $RepeaterViewConfigurationSettings extends $ControlSettings {
    /**
     * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither
     * this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index
     * number of the view in View Repeater starting from 1.
     */
    title?: string | PropertyBindingInfo;

    /**
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
     * regular icon is hovered.
     */
    iconHovered?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * A path used for rows/titles data binding.
     */
    path?: string | PropertyBindingInfo;

    /**
     * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
     */
    itemMinWidth?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * The number of tiles/rows that will be shown on a single page in this view.
     */
    numberOfTiles?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
     * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
     * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
     * of columns depends on the parent control's width. If you resize the control, the number of columns may
     * change respectively so that the content tiles can fill the entire space of a row.
     */
    responsive?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
     */
    external?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
     * regular icon is selected.
     */
    iconSelected?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true.
     * This value is used for calculating the number of tile rows.
     */
    itemHeight?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * The control used as a template while displaying rows/tiles in this view. It should not have fixed width
     * wider than defined by the "itemMinWidth" property, otherwise some content may appear cropped.
     */
    template?: Control;

    /**
     * The control to be rendered instead of sap.suite.ui.commons.ViewRepeater's own content. Only used if the
     * "external" property is set to true. This allows you to create custom views, for example, Table views.
     * The sap.suite.ui.commons.ViewRepeater control will share its model with this control if the control does
     * not have its own model.
     */
    externalRepresentation?: Control;
  }
}

declare module "sap/suite/ui/commons/SplitButton" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  import Menu from "sap/ui/commons/Menu";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ButtonStyle } from "sap/ui/commons/library";

  import MenuItem from "sap/ui/commons/MenuItem";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated. Not Fiori.
   *
   * The Split Button Control is a composite control that consists of a default-action Button and a Menu Button
   * control. The default-action button control represents a simple push button. It is used for initiating
   * actions, such as save or print. It can contain some text, an icon, or both; the order of the two can
   * be configured. The action initiated by this button is considered to be the default action for the control,
   * and it must be one of the selections defined in the Menu Button menu. The Menu Button control is a button
   * that opens a menu upon user's click. MenuButton is a composition of the Menu control and the Button control
   * and thus inheriting all features. When a menu item is selected by the user, MenuButton throws an event
   * called itemSelected. The event transfers the itemId of the selected item. As an alternative, the button
   * press event can be used which has a similar behavior.
   */
  class SplitButton extends Control {
    /**
     * Constructor for a new SplitButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SplitButtonSettings
    );
    /**
     * Constructor for a new SplitButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SplitButtonSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.SplitButton with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SplitButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.SplitButton.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the menu in the aggregation {@link #getMenu menu}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMenu(): this;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Boolean property to enable the control (default is true). Buttons that are disabled have other colors
     * than enabled ones, depending on custom settings.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon to be displayed as graphical element within the action button.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconFirst iconFirst}.
     *
     * If set to true (default), the display sequence is 1. icon 2. control text .
     *
     * Default value is `true`.
     *
     * @returns Value of property `iconFirst`
     */
    getIconFirst(): boolean;
    /**
     * Gets current value of property {@link #getLite lite}.
     *
     * The split button is rendered as lite split button.
     *
     * Default value is `false`.
     *
     * @returns Value of property `lite`
     */
    getLite(): boolean;
    /**
     * Gets content of aggregation {@link #getMenu menu}.
     *
     * Menu that shall be opened when the menu part of the button is clicked
     */
    getMenu(): Menu;
    /**
     * Gets current value of property {@link #getStyle style}.
     *
     * Style of the control (e.g. emphasized, accept)
     *
     * Default value is `"Default"`.
     *
     * @returns Value of property `style`
     */
    getStyle(): ButtonStyle | keyof typeof ButtonStyle;
    /**
     * Gets current value of property {@link #getStyled styled}.
     *
     * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom
     * styling can be added usig addStyleClass.
     *
     * Default value is `true`.
     *
     * @returns Value of property `styled`
     */
    getStyled(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Text to be displayed for the action button.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Invisible split buttons are not rendered
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Boolean property to enable the control (default is true). Buttons that are disabled have other colors
     * than enabled ones, depending on custom settings.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon to be displayed as graphical element within the action button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconFirst iconFirst}.
     *
     * If set to true (default), the display sequence is 1. icon 2. control text .
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconFirst(
      /**
       * New value for property `iconFirst`
       */
      bIconFirst?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLite lite}.
     *
     * The split button is rendered as lite split button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLite(
      /**
       * New value for property `lite`
       */
      bLite?: boolean
    ): this;
    /**
     * Set the menu to the button and set menu item for the action button. The menu item for action button must
     * exist in the menu. If it doesn't exist the first menu item is set by default.
     *
     * @returns `this` to allow method chaining
     */
    setMenu(
      /**
       * Menu
       */
      oMenu: Menu,
      /**
       * Item of menu
       */
      oMenuItem: MenuItem
    ): SplitButton;
    /**
     * Sets a new value for property {@link #getStyle style}.
     *
     * Style of the control (e.g. emphasized, accept)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Default"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStyle(
      /**
       * New value for property `style`
       */
      sStyle?: ButtonStyle | keyof typeof ButtonStyle
    ): this;
    /**
     * Sets a new value for property {@link #getStyled styled}.
     *
     * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom
     * styling can be added usig addStyleClass.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStyled(
      /**
       * New value for property `styled`
       */
      bStyled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Text to be displayed for the action button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Invisible split buttons are not rendered
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  export default SplitButton;

  export interface $SplitButtonSettings extends $ControlSettings {
    /**
     * Invisible split buttons are not rendered
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Boolean property to enable the control (default is true). Buttons that are disabled have other colors
     * than enabled ones, depending on custom settings.
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The split button is rendered as lite split button.
     */
    lite?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Style of the control (e.g. emphasized, accept)
     */
    style?:
      | (ButtonStyle | keyof typeof ButtonStyle)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom
     * styling can be added usig addStyleClass.
     */
    styled?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to true (default), the display sequence is 1. icon 2. control text .
     */
    iconFirst?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Text to be displayed for the action button.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Icon to be displayed as graphical element within the action button.
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Menu that shall be opened when the menu part of the button is clicked
     */
    menu?: Menu;
  }
}

declare module "sap/suite/ui/commons/statusindicator/Circle" {
  import {
    default as SimpleShape,
    $SimpleShapeSettings,
  } from "sap/suite/ui/commons/statusindicator/SimpleShape";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Status indicator shape in the form of a circle.
   */
  class Circle extends SimpleShape {
    /**
     * Constructor for a new Circle.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CircleSettings
    );
    /**
     * Constructor for a new Circle.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CircleSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Circle with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.SimpleShape.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Circle>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Circle.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getCx cx}.
     *
     * Defines the x coordinate of the center of the circle with respect to its parent status indicator.
     *
     * Default value is `0`.
     *
     * @returns Value of property `cx`
     */
    getCx(): float;
    /**
     * Gets current value of property {@link #getCy cy}.
     *
     * Defines the y coordinate of the center of the circle with respect to its parent status indicator.
     *
     * Default value is `0`.
     *
     * @returns Value of property `cy`
     */
    getCy(): float;
    /**
     * Gets current value of property {@link #getR r}.
     *
     * Defines the radius of the circle.
     *
     * Default value is `0`.
     *
     * @returns Value of property `r`
     */
    getR(): float;
    /**
     * Sets a new value for property {@link #getCx cx}.
     *
     * Defines the x coordinate of the center of the circle with respect to its parent status indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCx(
      /**
       * New value for property `cx`
       */
      fCx?: float
    ): this;
    /**
     * Sets a new value for property {@link #getCy cy}.
     *
     * Defines the y coordinate of the center of the circle with respect to its parent status indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCy(
      /**
       * New value for property `cy`
       */
      fCy?: float
    ): this;
    /**
     * Sets a new value for property {@link #getR r}.
     *
     * Defines the radius of the circle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setR(
      /**
       * New value for property `r`
       */
      fR?: float
    ): this;
  }
  export default Circle;

  export interface $CircleSettings extends $SimpleShapeSettings {
    /**
     * Defines the x coordinate of the center of the circle with respect to its parent status indicator.
     */
    cx?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the y coordinate of the center of the circle with respect to its parent status indicator.
     */
    cy?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the radius of the circle.
     */
    r?: float | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/statusindicator/CustomShape" {
  import {
    default as Shape,
    $ShapeSettings,
  } from "sap/suite/ui/commons/statusindicator/Shape";

  import FillingOption from "sap/suite/ui/commons/statusindicator/FillingOption";

  import SimpleShape from "sap/suite/ui/commons/statusindicator/SimpleShape";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ValueCSSColor } from "sap/m/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Custom shape that is defined directly as SVG.
   */
  class CustomShape extends Shape {
    /**
     * Constructor for a new CustomShape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $CustomShapeSettings
    );
    /**
     * Constructor for a new CustomShape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $CustomShapeSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.CustomShape with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.Shape.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomShape>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.CustomShape.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some fillingOption to the aggregation {@link #getFillingOptions fillingOptions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFillingOption(
      /**
       * The fillingOption to add; if empty, nothing is inserted
       */
      oFillingOption: FillingOption
    ): this;
    /**
     * Adds some shape to the aggregation {@link #getShapes shapes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addShape(
      /**
       * The shape to add; if empty, nothing is inserted
       */
      oShape: SimpleShape
    ): this;
    /**
     * Destroys all the fillingOptions in the aggregation {@link #getFillingOptions fillingOptions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFillingOptions(): this;
    /**
     * Destroys all the shapes in the aggregation {@link #getShapes shapes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyShapes(): this;
    /**
     * Gets current value of property {@link #getDefinition definition}.
     *
     * A valid XML fragment that contains an <svg> element that complies with the following requirements:
     *
     * 	 - It includes no SVG groups (<g> elements).
     * 	 - It includes no <defs> elements.  The SVG element is transformed into a status indicator
     *     shape in the following way:
     * 	 - The `viewBox` attribute of the root SVG element is respected and kept after the transformation.
     * 	 - The inline styles of SVG shapes are respected, and shapes with such inline styles are not considered
     *     to be fillable.
     * 	 - The SVG shapes without classes are considered fillable.
     * 	 - If there are multiple fillable shapes, each shape element must have a `data-shape-id` attribute that
     *     is set to a unique value.  Example:
     * ```javascript
     *
     *   <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 30 30" xml:space="preserve">
     *      <path style="fill:blue;" d="M14.664,29...." />
     *      <path style="fill:blue;" d="M13.626,25...." />
     *      <path data-shape-id="fill-1" d="M15.337,21...." />
     *      <path data-shape-id="fill-2" d="M13.626,17...." />
     *      <path data-shape-id="fill-3" d="M15.337,14...." />
     *      <path data-shape-id="fill-4" d="M13.107,10...." />
     *   </svg>
     * ```
     *  The first two paths in this example are filled with blue color. The last four shape elements are filled
     * gradually, as the status indicator's value changes.
     *
     * Please note that the SVG element must be escaped when used directly as an attribute in the XML view.
     *
     * @returns Value of property `definition`
     */
    getDefinition(): string;
    /**
     * Gets content of aggregation {@link #getFillingOptions fillingOptions}.
     *
     * Defines the order and weight of fillable shapes based on the status indicator value distribution. If
     * this aggregation is not used, the shapes are filled in the order they are specified in the SVG definition.
     */
    getFillingOptions(): FillingOption[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the bounding rectangle.
     *
     * Default value is `"100%"`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets content of aggregation {@link #getShapes shapes}.
     *
     * Read-only aggregation that contains simple shapes transformed from the SVG definition.
     */
    getShapes(): SimpleShape[];
    /**
     * Gets current value of property {@link #getStrokeColor strokeColor}.
     *
     * Specifies the color of the shape's outline.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Value of property `strokeColor`
     */
    getStrokeColor(): ValueCSSColor;
    /**
     * Gets current value of property {@link #getStrokeWidth strokeWidth}.
     *
     * Specifies the width of the shape's outline.
     *
     * Default value is `0.25`.
     *
     * @returns Value of property `strokeWidth`
     */
    getStrokeWidth(): float;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the bounding rectangle.
     *
     * Default value is `"100%"`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getX x}.
     *
     * Defines the x coordinate of the upper-left corner of the bounding rectangle.
     *
     * Default value is `0`.
     *
     * @returns Value of property `x`
     */
    getX(): int;
    /**
     * Gets current value of property {@link #getY y}.
     *
     * Defines the y coordinate of the upper-left corner of the bounding rectangle.
     *
     * Default value is `0`.
     *
     * @returns Value of property `y`
     */
    getY(): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.statusindicator.FillingOption` in the aggregation {@link #getFillingOptions fillingOptions}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFillingOption(
      /**
       * The fillingOption whose index is looked for
       */
      oFillingOption: FillingOption
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.statusindicator.SimpleShape` in the aggregation {@link #getShapes shapes}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfShape(
      /**
       * The shape whose index is looked for
       */
      oShape: SimpleShape
    ): int;
    /**
     * Inserts a fillingOption into the aggregation {@link #getFillingOptions fillingOptions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFillingOption(
      /**
       * The fillingOption to insert; if empty, nothing is inserted
       */
      oFillingOption: FillingOption,
      /**
       * The `0`-based index the fillingOption should be inserted at; for a negative value of `iIndex`, the fillingOption
       * is inserted at position 0; for a value greater than the current size of the aggregation, the fillingOption
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a shape into the aggregation {@link #getShapes shapes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertShape(
      /**
       * The shape to insert; if empty, nothing is inserted
       */
      oShape: SimpleShape,
      /**
       * The `0`-based index the shape should be inserted at; for a negative value of `iIndex`, the shape is inserted
       * at position 0; for a value greater than the current size of the aggregation, the shape is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getFillingOptions fillingOptions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFillingOptions(): FillingOption[];
    /**
     * Removes all the controls from the aggregation {@link #getShapes shapes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllShapes(): SimpleShape[];
    /**
     * Removes a fillingOption from the aggregation {@link #getFillingOptions fillingOptions}.
     *
     * @returns The removed fillingOption or `null`
     */
    removeFillingOption(
      /**
       * The fillingOption to remove or its index or id
       */
      vFillingOption: int | string | FillingOption
    ): FillingOption | null;
    /**
     * Removes a shape from the aggregation {@link #getShapes shapes}.
     *
     * @returns The removed shape or `null`
     */
    removeShape(
      /**
       * The shape to remove or its index or id
       */
      vShape: int | string | SimpleShape
    ): SimpleShape | null;
    /**
     * Sets a new value for property {@link #getDefinition definition}.
     *
     * A valid XML fragment that contains an <svg> element that complies with the following requirements:
     *
     * 	 - It includes no SVG groups (<g> elements).
     * 	 - It includes no <defs> elements.  The SVG element is transformed into a status indicator
     *     shape in the following way:
     * 	 - The `viewBox` attribute of the root SVG element is respected and kept after the transformation.
     * 	 - The inline styles of SVG shapes are respected, and shapes with such inline styles are not considered
     *     to be fillable.
     * 	 - The SVG shapes without classes are considered fillable.
     * 	 - If there are multiple fillable shapes, each shape element must have a `data-shape-id` attribute that
     *     is set to a unique value.  Example:
     * ```javascript
     *
     *   <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 30 30" xml:space="preserve">
     *      <path style="fill:blue;" d="M14.664,29...." />
     *      <path style="fill:blue;" d="M13.626,25...." />
     *      <path data-shape-id="fill-1" d="M15.337,21...." />
     *      <path data-shape-id="fill-2" d="M13.626,17...." />
     *      <path data-shape-id="fill-3" d="M15.337,14...." />
     *      <path data-shape-id="fill-4" d="M13.107,10...." />
     *   </svg>
     * ```
     *  The first two paths in this example are filled with blue color. The last four shape elements are filled
     * gradually, as the status indicator's value changes.
     *
     * Please note that the SVG element must be escaped when used directly as an attribute in the XML view.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDefinition(
      /**
       * New value for property `definition`
       */
      sDefinition?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the bounding rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getStrokeColor strokeColor}.
     *
     * Specifies the color of the shape's outline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStrokeColor(
      /**
       * New value for property `strokeColor`
       */
      sStrokeColor?: ValueCSSColor
    ): this;
    /**
     * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
     *
     * Specifies the width of the shape's outline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0.25`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStrokeWidth(
      /**
       * New value for property `strokeWidth`
       */
      fStrokeWidth?: float
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the bounding rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getX x}.
     *
     * Defines the x coordinate of the upper-left corner of the bounding rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setX(
      /**
       * New value for property `x`
       */
      iX?: int
    ): this;
    /**
     * Sets a new value for property {@link #getY y}.
     *
     * Defines the y coordinate of the upper-left corner of the bounding rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setY(
      /**
       * New value for property `y`
       */
      iY?: int
    ): this;
  }
  export default CustomShape;

  export interface $CustomShapeSettings extends $ShapeSettings {
    /**
     * Defines the x coordinate of the upper-left corner of the bounding rectangle.
     */
    x?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the y coordinate of the upper-left corner of the bounding rectangle.
     */
    y?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the width of the bounding rectangle.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the height of the bounding rectangle.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies the color of the shape's outline.
     */
    strokeColor?: ValueCSSColor | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies the width of the shape's outline.
     */
    strokeWidth?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * A valid XML fragment that contains an <svg> element that complies with the following requirements:
     *
     * 	 - It includes no SVG groups (<g> elements).
     * 	 - It includes no <defs> elements.  The SVG element is transformed into a status indicator
     *     shape in the following way:
     * 	 - The `viewBox` attribute of the root SVG element is respected and kept after the transformation.
     * 	 - The inline styles of SVG shapes are respected, and shapes with such inline styles are not considered
     *     to be fillable.
     * 	 - The SVG shapes without classes are considered fillable.
     * 	 - If there are multiple fillable shapes, each shape element must have a `data-shape-id` attribute that
     *     is set to a unique value.  Example:
     * ```javascript
     *
     *   <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 30 30" xml:space="preserve">
     *      <path style="fill:blue;" d="M14.664,29...." />
     *      <path style="fill:blue;" d="M13.626,25...." />
     *      <path data-shape-id="fill-1" d="M15.337,21...." />
     *      <path data-shape-id="fill-2" d="M13.626,17...." />
     *      <path data-shape-id="fill-3" d="M15.337,14...." />
     *      <path data-shape-id="fill-4" d="M13.107,10...." />
     *   </svg>
     * ```
     *  The first two paths in this example are filled with blue color. The last four shape elements are filled
     * gradually, as the status indicator's value changes.
     *
     * Please note that the SVG element must be escaped when used directly as an attribute in the XML view.
     */
    definition?: string | PropertyBindingInfo;

    /**
     * Read-only aggregation that contains simple shapes transformed from the SVG definition.
     */
    shapes?:
      | SimpleShape[]
      | SimpleShape
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Defines the order and weight of fillable shapes based on the status indicator value distribution. If
     * this aggregation is not used, the shapes are filled in the order they are specified in the SVG definition.
     */
    fillingOptions?:
      | FillingOption[]
      | FillingOption
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/statusindicator/DiscreteThreshold" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Discrete threshold specifies which values should be displayed by the status indicator.
   */
  class DiscreteThreshold extends Control {
    /**
     * Constructor for a new DiscreteThreshold.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DiscreteThresholdSettings
    );
    /**
     * Constructor for a new DiscreteThreshold.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DiscreteThresholdSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.DiscreteThreshold with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DiscreteThreshold>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.DiscreteThreshold.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this threshold to be used by screen reader software.
     *
     * @returns Value of property `ariaLabel`
     */
    getAriaLabel(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value threshold. This value is displayed when the status indicator's percentage value is
     * above or equal to this value but below the value of the next threshold.
     *
     * Default value is `0`.
     *
     * @returns Value of property `value`
     */
    getValue(): int;
    /**
     * Sets a new value for property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this threshold to be used by screen reader software.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAriaLabel(
      /**
       * New value for property `ariaLabel`
       */
      sAriaLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value threshold. This value is displayed when the status indicator's percentage value is
     * above or equal to this value but below the value of the next threshold.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      iValue?: int
    ): this;
  }
  export default DiscreteThreshold;

  export interface $DiscreteThresholdSettings extends $ControlSettings {
    /**
     * Defines the value threshold. This value is displayed when the status indicator's percentage value is
     * above or equal to this value but below the value of the next threshold.
     */
    value?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * ARIA label for this threshold to be used by screen reader software.
     */
    ariaLabel?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/statusindicator/FillingOption" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Filling options for an SVG shape included in a custom shape.
   */
  class FillingOption extends Control {
    /**
     * Constructor for a new FillingOption.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FillingOptionSettings
    );
    /**
     * Constructor for a new FillingOption.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FillingOptionSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.FillingOption with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FillingOption>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.FillingOption.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getOrder order}.
     *
     * Order in which this fillable SVG shape must be filled, relative to other SVG shapes included in the custom
     * shape. For example, if you have three SVG shapes with order values 1, 2, and 4 assigned, the first shape
     * will be filled first, then the second shape, and, finally, the third shape, regardless of their order
     * in the SVG definition. The value of this property must be unique.
     *
     * @returns Value of property `order`
     */
    getOrder(): int;
    /**
     * Gets current value of property {@link #getShapeId shapeId}.
     *
     * ID of the fillable SVG shape included in a custom shape.
     *
     * @returns Value of property `shapeId`
     */
    getShapeId(): string;
    /**
     * Gets current value of property {@link #getWeight weight}.
     *
     * Weight of the fillable shape, relative to other fillable shapes included in this custom shape. This property
     * allows you to distribute the status indicator's value between distinct SVG shapes included in the custom
     * shape. For example, for four SVG shapes with weights 1, 2, 3, and 4 (total weight 10), the status indicator's
     * value is distributed in the following way:
     * 	 - If the status indicator's value is below 10% (1 out of 10), the first SVG shape (weight 1) is partially
     *     filled, depending on the percentage value. For example, if the percentage value of the status indicator
     *     is 5, the first SVG shape appears half-full. The rest of the SVG shapes appear empty.
     * 	 - If the status indicator's value is at least 10% but below 30%, the first SVG shape (weight 1) is
     *     filled, and the second shape (weight 2) is filled only partially, depending on the percentage value.
     *     The rest of the SVG shapes in this custom shape appear empty.
     * 	 - If the status indicator's value is at least 30% but below 60%, the first two SVG shapes (weight 1
     *     and 2) are filled, and the third SVG shape (weight 3) is filled only partially. The fourth SVG shape
     *     (weight 4) appears empty.
     * 	 - If the status indicator's value is at least 60% but below 100%, the first three SVG shapes (weight
     *     1, 2, and 3) are filled, but the fourth SVG shape is filled only partially, depending on the percentage
     *     value.
     * 	 - If the status indicator's value is 100, all four SVG shapes appear filled.
     *
     * Default value is `1`.
     *
     * @returns Value of property `weight`
     */
    getWeight(): int;
    /**
     * Sets a new value for property {@link #getOrder order}.
     *
     * Order in which this fillable SVG shape must be filled, relative to other SVG shapes included in the custom
     * shape. For example, if you have three SVG shapes with order values 1, 2, and 4 assigned, the first shape
     * will be filled first, then the second shape, and, finally, the third shape, regardless of their order
     * in the SVG definition. The value of this property must be unique.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrder(
      /**
       * New value for property `order`
       */
      iOrder: int
    ): this;
    /**
     * Sets a new value for property {@link #getShapeId shapeId}.
     *
     * ID of the fillable SVG shape included in a custom shape.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShapeId(
      /**
       * New value for property `shapeId`
       */
      sShapeId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWeight weight}.
     *
     * Weight of the fillable shape, relative to other fillable shapes included in this custom shape. This property
     * allows you to distribute the status indicator's value between distinct SVG shapes included in the custom
     * shape. For example, for four SVG shapes with weights 1, 2, 3, and 4 (total weight 10), the status indicator's
     * value is distributed in the following way:
     * 	 - If the status indicator's value is below 10% (1 out of 10), the first SVG shape (weight 1) is partially
     *     filled, depending on the percentage value. For example, if the percentage value of the status indicator
     *     is 5, the first SVG shape appears half-full. The rest of the SVG shapes appear empty.
     * 	 - If the status indicator's value is at least 10% but below 30%, the first SVG shape (weight 1) is
     *     filled, and the second shape (weight 2) is filled only partially, depending on the percentage value.
     *     The rest of the SVG shapes in this custom shape appear empty.
     * 	 - If the status indicator's value is at least 30% but below 60%, the first two SVG shapes (weight 1
     *     and 2) are filled, and the third SVG shape (weight 3) is filled only partially. The fourth SVG shape
     *     (weight 4) appears empty.
     * 	 - If the status indicator's value is at least 60% but below 100%, the first three SVG shapes (weight
     *     1, 2, and 3) are filled, but the fourth SVG shape is filled only partially, depending on the percentage
     *     value.
     * 	 - If the status indicator's value is 100, all four SVG shapes appear filled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWeight(
      /**
       * New value for property `weight`
       */
      iWeight?: int
    ): this;
  }
  export default FillingOption;

  export interface $FillingOptionSettings extends $ControlSettings {
    /**
     * ID of the fillable SVG shape included in a custom shape.
     */
    shapeId?: string | PropertyBindingInfo;

    /**
     * Weight of the fillable shape, relative to other fillable shapes included in this custom shape. This property
     * allows you to distribute the status indicator's value between distinct SVG shapes included in the custom
     * shape. For example, for four SVG shapes with weights 1, 2, 3, and 4 (total weight 10), the status indicator's
     * value is distributed in the following way:
     * 	 - If the status indicator's value is below 10% (1 out of 10), the first SVG shape (weight 1) is partially
     *     filled, depending on the percentage value. For example, if the percentage value of the status indicator
     *     is 5, the first SVG shape appears half-full. The rest of the SVG shapes appear empty.
     * 	 - If the status indicator's value is at least 10% but below 30%, the first SVG shape (weight 1) is
     *     filled, and the second shape (weight 2) is filled only partially, depending on the percentage value.
     *     The rest of the SVG shapes in this custom shape appear empty.
     * 	 - If the status indicator's value is at least 30% but below 60%, the first two SVG shapes (weight 1
     *     and 2) are filled, and the third SVG shape (weight 3) is filled only partially. The fourth SVG shape
     *     (weight 4) appears empty.
     * 	 - If the status indicator's value is at least 60% but below 100%, the first three SVG shapes (weight
     *     1, 2, and 3) are filled, but the fourth SVG shape is filled only partially, depending on the percentage
     *     value.
     * 	 - If the status indicator's value is 100, all four SVG shapes appear filled.
     */
    weight?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Order in which this fillable SVG shape must be filled, relative to other SVG shapes included in the custom
     * shape. For example, if you have three SVG shapes with order values 1, 2, and 4 assigned, the first shape
     * will be filled first, then the second shape, and, finally, the third shape, regardless of their order
     * in the SVG definition. The value of this property must be unique.
     */
    order?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/statusindicator/LibraryShape" {
  import {
    default as CustomShape,
    $CustomShapeSettings,
  } from "sap/suite/ui/commons/statusindicator/CustomShape";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.60.0
   *
   * Custom shape that is selected by `shapeId` from the shapes library.
   */
  class LibraryShape extends CustomShape {
    /**
     * Constructor for a new Library Shape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LibraryShapeSettings
    );
    /**
     * Constructor for a new Library Shape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LibraryShapeSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.LibraryShape with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.CustomShape.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LibraryShape>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.LibraryShape.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterShapeLoaded afterShapeLoaded} event of
     * this `sap.suite.ui.commons.statusindicator.LibraryShape`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.LibraryShape` itself.
     *
     * This event is fired when the definition of shape is loaded.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterShapeLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.LibraryShape`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterShapeLoaded afterShapeLoaded} event of
     * this `sap.suite.ui.commons.statusindicator.LibraryShape`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.LibraryShape` itself.
     *
     * This event is fired when the definition of shape is loaded.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterShapeLoaded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.LibraryShape`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterShapeLoaded afterShapeLoaded} event of
     * this `sap.suite.ui.commons.statusindicator.LibraryShape`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterShapeLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterShapeLoaded afterShapeLoaded} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterShapeLoaded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getShapeId shapeId}.
     *
     * An ID associated with a specific shape from the shape library.
     *
     * @returns Value of property `shapeId`
     */
    getShapeId(): string;
    /**
     * Sets a new value for property {@link #getShapeId shapeId}.
     *
     * An ID associated with a specific shape from the shape library.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShapeId(
      /**
       * New value for property `shapeId`
       */
      sShapeId?: string
    ): this;
  }
  export default LibraryShape;

  export interface $LibraryShapeSettings extends $CustomShapeSettings {
    /**
     * An ID associated with a specific shape from the shape library.
     */
    shapeId?: string | PropertyBindingInfo;

    /**
     * This event is fired when the definition of shape is loaded.
     */
    afterShapeLoaded?: (oEvent: Event) => void;
  }

  export interface $LibraryShapeAfterShapeLoadedEventParameters {}
}

declare module "sap/suite/ui/commons/statusindicator/Path" {
  import {
    default as SimpleShape,
    $SimpleShapeSettings,
  } from "sap/suite/ui/commons/statusindicator/SimpleShape";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Shape that consists of a single SVG path element.
   */
  class Path extends SimpleShape {
    /**
     * Constructor for a new Path.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PathSettings
    );
    /**
     * Constructor for a new Path.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PathSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Path with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.SimpleShape.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Path>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Path.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getD d}.
     *
     * Specifies the path that outlines the shape. The format is identical to the `d` attribute of the `<path>`
     * SVG element.
     *
     * @returns Value of property `d`
     */
    getD(): string;
    /**
     * Sets a new value for property {@link #getD d}.
     *
     * Specifies the path that outlines the shape. The format is identical to the `d` attribute of the `<path>`
     * SVG element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setD(
      /**
       * New value for property `d`
       */
      sD?: string
    ): this;
  }
  export default Path;

  export interface $PathSettings extends $SimpleShapeSettings {
    /**
     * Specifies the path that outlines the shape. The format is identical to the `d` attribute of the `<path>`
     * SVG element.
     */
    d?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/statusindicator/PropertyThreshold" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ValueCSSColor } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Property threshold defines how the shapes included in the status indicator should be filled when the
   * status indicator's percentage value is below the given threshold.
   */
  class PropertyThreshold extends Control {
    /**
     * Constructor for a new PropertyThreshold.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PropertyThresholdSettings
    );
    /**
     * Constructor for a new PropertyThreshold.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is provided
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PropertyThresholdSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.PropertyThreshold with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PropertyThreshold>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.PropertyThreshold.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this threshold to be used by screen reader software.
     *
     * @returns Value of property `ariaLabel`
     */
    getAriaLabel(): string;
    /**
     * Gets current value of property {@link #getFillColor fillColor}.
     *
     * Defines the color used to fill the shapes included in the status indicator.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Value of property `fillColor`
     */
    getFillColor(): ValueCSSColor;
    /**
     * Gets current value of property {@link #getToValue toValue}.
     *
     * Defines the maximum value up to which the threshold setting should apply.
     *
     * Default value is `0`.
     *
     * @returns Value of property `toValue`
     */
    getToValue(): int;
    /**
     * Sets a new value for property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this threshold to be used by screen reader software.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAriaLabel(
      /**
       * New value for property `ariaLabel`
       */
      sAriaLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFillColor fillColor}.
     *
     * Defines the color used to fill the shapes included in the status indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFillColor(
      /**
       * New value for property `fillColor`
       */
      sFillColor?: ValueCSSColor
    ): this;
    /**
     * Sets a new value for property {@link #getToValue toValue}.
     *
     * Defines the maximum value up to which the threshold setting should apply.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setToValue(
      /**
       * New value for property `toValue`
       */
      iToValue?: int
    ): this;
  }
  export default PropertyThreshold;

  export interface $PropertyThresholdSettings extends $ControlSettings {
    /**
     * Defines the color used to fill the shapes included in the status indicator.
     */
    fillColor?: ValueCSSColor | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the maximum value up to which the threshold setting should apply.
     */
    toValue?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * ARIA label for this threshold to be used by screen reader software.
     */
    ariaLabel?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/statusindicator/Rectangle" {
  import {
    default as SimpleShape,
    $SimpleShapeSettings,
  } from "sap/suite/ui/commons/statusindicator/SimpleShape";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Status indicator shape in the form of a rectangle.
   */
  class Rectangle extends SimpleShape {
    /**
     * Constructor for a new Rectangle.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $RectangleSettings
    );
    /**
     * Constructor for a new Rectangle.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $RectangleSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Rectangle with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.SimpleShape.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Rectangle>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Rectangle.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the rectangle.
     *
     * Default value is `0`.
     *
     * @returns Value of property `height`
     */
    getHeight(): int;
    /**
     * Gets current value of property {@link #getRx rx}.
     *
     * Defines the horizontal corner radius of the rectangle. If set to 0, the corners are not rounded.
     *
     * Default value is `0`.
     *
     * @returns Value of property `rx`
     */
    getRx(): int;
    /**
     * Gets current value of property {@link #getRy ry}.
     *
     * Defines the vertical corner radius of the rectangle. If set to 0, the corners are not rounded.
     *
     * Default value is `0`.
     *
     * @returns Value of property `ry`
     */
    getRy(): int;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the rectangle.
     *
     * Default value is `0`.
     *
     * @returns Value of property `width`
     */
    getWidth(): int;
    /**
     * Gets current value of property {@link #getX x}.
     *
     * Defines the x coordinate of the upper-left corner of the rectangle.
     *
     * Default value is `0`.
     *
     * @returns Value of property `x`
     */
    getX(): int;
    /**
     * Gets current value of property {@link #getY y}.
     *
     * Defines the y coordinate of the upper-left corner of the rectangle.
     *
     * Default value is `0`.
     *
     * @returns Value of property `y`
     */
    getY(): int;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      iHeight?: int
    ): this;
    /**
     * Sets a new value for property {@link #getRx rx}.
     *
     * Defines the horizontal corner radius of the rectangle. If set to 0, the corners are not rounded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRx(
      /**
       * New value for property `rx`
       */
      iRx?: int
    ): this;
    /**
     * Sets a new value for property {@link #getRy ry}.
     *
     * Defines the vertical corner radius of the rectangle. If set to 0, the corners are not rounded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRy(
      /**
       * New value for property `ry`
       */
      iRy?: int
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      iWidth?: int
    ): this;
    /**
     * Sets a new value for property {@link #getX x}.
     *
     * Defines the x coordinate of the upper-left corner of the rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setX(
      /**
       * New value for property `x`
       */
      iX?: int
    ): this;
    /**
     * Sets a new value for property {@link #getY y}.
     *
     * Defines the y coordinate of the upper-left corner of the rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setY(
      /**
       * New value for property `y`
       */
      iY?: int
    ): this;
  }
  export default Rectangle;

  export interface $RectangleSettings extends $SimpleShapeSettings {
    /**
     * Defines the x coordinate of the upper-left corner of the rectangle.
     */
    x?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the y coordinate of the upper-left corner of the rectangle.
     */
    y?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the horizontal corner radius of the rectangle. If set to 0, the corners are not rounded.
     */
    rx?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the vertical corner radius of the rectangle. If set to 0, the corners are not rounded.
     */
    ry?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the width of the rectangle.
     */
    width?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the height of the rectangle.
     */
    height?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/statusindicator/Shape" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ValueCSSColor } from "sap/m/library";

  import { statusindicator } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Abstract shape that displays the value of the status indicator. The shape reflects the status indicator's
   * percentage value by filling one or more of its parts (SVG shapes) with the specified color.
   */
  class Shape extends Control {
    /**
     * Constructor for a new Shape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ShapeSettings
    );
    /**
     * Constructor for a new Shape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is provided
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ShapeSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Shape with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Shape>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Shape.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAnimationOnChange animationOnChange}.
     *
     * Defines if the change in the status indicator value should be animated or not.
     *  When set to `true`, the change in value is animated.
     *
     * Default value is `true`.
     *
     * @returns Value of property `animationOnChange`
     */
    getAnimationOnChange(): boolean;
    /**
     * @deprecated (since 1.54.1) - Use the animationOnChange property instead.
     *
     * Gets current value of property {@link #getAnimationOnStartup animationOnStartup}.
     *
     * Defines if the initial value of the status indicator should be animated or directly displayed on startup.
     * By default, it's displayed on startup without any animation.
     *
     * Default value is `false`.
     *
     * @returns Value of property `animationOnStartup`
     */
    getAnimationOnStartup(): boolean;
    /**
     * @deprecated (since 1.54.1)
     *
     * Gets current value of property {@link #getAnimationOnStartupDelay animationOnStartupDelay}.
     *
     * Specifies the delay of the initial value animation. Only applicable if the `animationOnStartup` property
     * is set to `true`.
     *
     * Default value is `0`.
     *
     * @returns Value of property `animationOnStartupDelay`
     */
    getAnimationOnStartupDelay(): int;
    /**
     * Returns the currently displayed value This method must be overridden by a child class
     */
    getDisplayedValue(): number;
    /**
     * Gets current value of property {@link #getFillColor fillColor}.
     *
     * Defines the color of the shape's fill.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Value of property `fillColor`
     */
    getFillColor(): ValueCSSColor;
    /**
     * Gets current value of property {@link #getFillingAngle fillingAngle}.
     *
     * Defines the angle at which the shape is filled. This property overrides the `fillingDirection` property.
     *  Accepted values include `0` through `360` degrees.
     *  For example, if you set the filling angle to `45`, the shape will be filled diagonally from the lower
     * right part of the shape to its upper left part.
     *  This property can be used only when {@link sap.suite.ui.commons.statusindicator.FillingType} is set
     * to `Linear`.
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `fillingAngle`
     */
    getFillingAngle(): int;
    /**
     * Gets current value of property {@link #getFillingDirection fillingDirection}.
     *
     * Defines the direction in which the shape is filled.
     *
     * Default value is `Up`.
     *
     * @returns Value of property `fillingDirection`
     */
    getFillingDirection():
      | statusindicator.FillingDirectionType
      | keyof typeof statusindicator.FillingDirectionType;
    /**
     * Gets current value of property {@link #getFillingType fillingType}.
     *
     * Defines the type of the shape's fill.
     *
     * Default value is `Linear`.
     *
     * @returns Value of property `fillingType`
     */
    getFillingType():
      | statusindicator.FillingType
      | keyof typeof statusindicator.FillingType;
    /**
     * @deprecated (since 1.54.1) - All animations are now limited to 250 ms.
     *
     * Gets current value of property {@link #getFullAnimationDuration fullAnimationDuration}.
     *
     * Specifies the duration, in milliseconds, of the animation that would fill an empty shape to the full.
     * The actual time it takes to change the shape's filling is proportional to the difference between the
     * initial and the target status indicator's value. For example, a change from 20 percent to 70 percent
     * takes only half of the time specified in the `fullAnimationDuration` property. If this property is set
     * to `0`, changes are applied instantly without any animation.
     *
     * Default value is `0`.
     *
     * @returns Value of property `fullAnimationDuration`
     */
    getFullAnimationDuration(): int;
    /**
     * Gets current value of property {@link #getHorizontalAlignment horizontalAlignment}.
     *
     * Defines the horizontal alignment of the shape within its parent container.
     *
     * Default value is `Middle`.
     *
     * @returns Value of property `horizontalAlignment`
     */
    getHorizontalAlignment():
      | statusindicator.HorizontalAlignmentType
      | keyof typeof statusindicator.HorizontalAlignmentType;
    /**
     * Gets current value of property {@link #getVerticalAlignment verticalAlignment}.
     *
     * Defines the vertical alignment of the shape within its parent container.
     *
     * Default value is `Middle`.
     *
     * @returns Value of property `verticalAlignment`
     */
    getVerticalAlignment():
      | statusindicator.VerticalAlignmentType
      | keyof typeof statusindicator.VerticalAlignmentType;
    /**
     * Sets a new value for property {@link #getAnimationOnChange animationOnChange}.
     *
     * Defines if the change in the status indicator value should be animated or not.
     *  When set to `true`, the change in value is animated.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimationOnChange(
      /**
       * New value for property `animationOnChange`
       */
      bAnimationOnChange?: boolean
    ): this;
    /**
     * @deprecated (since 1.54.1) - Use the animationOnChange property instead.
     *
     * Sets a new value for property {@link #getAnimationOnStartup animationOnStartup}.
     *
     * Defines if the initial value of the status indicator should be animated or directly displayed on startup.
     * By default, it's displayed on startup without any animation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimationOnStartup(
      /**
       * New value for property `animationOnStartup`
       */
      bAnimationOnStartup?: boolean
    ): this;
    /**
     * @deprecated (since 1.54.1)
     *
     * Sets a new value for property {@link #getAnimationOnStartupDelay animationOnStartupDelay}.
     *
     * Specifies the delay of the initial value animation. Only applicable if the `animationOnStartup` property
     * is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAnimationOnStartupDelay(
      /**
       * New value for property `animationOnStartupDelay`
       */
      iAnimationOnStartupDelay?: int
    ): this;
    /**
     * Sets a new value for property {@link #getFillColor fillColor}.
     *
     * Defines the color of the shape's fill.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFillColor(
      /**
       * New value for property `fillColor`
       */
      sFillColor?: ValueCSSColor
    ): this;
    /**
     * Sets a new value for property {@link #getFillingAngle fillingAngle}.
     *
     * Defines the angle at which the shape is filled. This property overrides the `fillingDirection` property.
     *  Accepted values include `0` through `360` degrees.
     *  For example, if you set the filling angle to `45`, the shape will be filled diagonally from the lower
     * right part of the shape to its upper left part.
     *  This property can be used only when {@link sap.suite.ui.commons.statusindicator.FillingType} is set
     * to `Linear`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFillingAngle(
      /**
       * New value for property `fillingAngle`
       */
      iFillingAngle?: int
    ): this;
    /**
     * Sets a new value for property {@link #getFillingDirection fillingDirection}.
     *
     * Defines the direction in which the shape is filled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Up`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFillingDirection(
      /**
       * New value for property `fillingDirection`
       */
      sFillingDirection?:
        | statusindicator.FillingDirectionType
        | keyof typeof statusindicator.FillingDirectionType
    ): this;
    /**
     * Sets a new value for property {@link #getFillingType fillingType}.
     *
     * Defines the type of the shape's fill.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Linear`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFillingType(
      /**
       * New value for property `fillingType`
       */
      sFillingType?:
        | statusindicator.FillingType
        | keyof typeof statusindicator.FillingType
    ): this;
    /**
     * @deprecated (since 1.54.1) - All animations are now limited to 250 ms.
     *
     * Sets a new value for property {@link #getFullAnimationDuration fullAnimationDuration}.
     *
     * Specifies the duration, in milliseconds, of the animation that would fill an empty shape to the full.
     * The actual time it takes to change the shape's filling is proportional to the difference between the
     * initial and the target status indicator's value. For example, a change from 20 percent to 70 percent
     * takes only half of the time specified in the `fullAnimationDuration` property. If this property is set
     * to `0`, changes are applied instantly without any animation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFullAnimationDuration(
      /**
       * New value for property `fullAnimationDuration`
       */
      iFullAnimationDuration?: int
    ): this;
    /**
     * Sets a new value for property {@link #getHorizontalAlignment horizontalAlignment}.
     *
     * Defines the horizontal alignment of the shape within its parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Middle`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHorizontalAlignment(
      /**
       * New value for property `horizontalAlignment`
       */
      sHorizontalAlignment?:
        | statusindicator.HorizontalAlignmentType
        | keyof typeof statusindicator.HorizontalAlignmentType
    ): this;
    /**
     * Sets a new value for property {@link #getVerticalAlignment verticalAlignment}.
     *
     * Defines the vertical alignment of the shape within its parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Middle`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVerticalAlignment(
      /**
       * New value for property `verticalAlignment`
       */
      sVerticalAlignment?:
        | statusindicator.VerticalAlignmentType
        | keyof typeof statusindicator.VerticalAlignmentType
    ): this;
  }
  export default Shape;

  export interface $ShapeSettings extends $ControlSettings {
    /**
     * @deprecated (since 1.54.1) - All animations are now limited to 250 ms.
     *
     * Specifies the duration, in milliseconds, of the animation that would fill an empty shape to the full.
     * The actual time it takes to change the shape's filling is proportional to the difference between the
     * initial and the target status indicator's value. For example, a change from 20 percent to 70 percent
     * takes only half of the time specified in the `fullAnimationDuration` property. If this property is set
     * to `0`, changes are applied instantly without any animation.
     */
    fullAnimationDuration?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the color of the shape's fill.
     */
    fillColor?: ValueCSSColor | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.54.1) - Use the animationOnChange property instead.
     *
     * Defines if the initial value of the status indicator should be animated or directly displayed on startup.
     * By default, it's displayed on startup without any animation.
     */
    animationOnStartup?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines if the change in the status indicator value should be animated or not.
     *  When set to `true`, the change in value is animated.
     */
    animationOnChange?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.54.1)
     *
     * Specifies the delay of the initial value animation. Only applicable if the `animationOnStartup` property
     * is set to `true`.
     */
    animationOnStartupDelay?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the direction in which the shape is filled.
     */
    fillingDirection?:
      | (
          | statusindicator.FillingDirectionType
          | keyof typeof statusindicator.FillingDirectionType
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines the type of the shape's fill.
     */
    fillingType?:
      | (statusindicator.FillingType | keyof typeof statusindicator.FillingType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines the angle at which the shape is filled. This property overrides the `fillingDirection` property.
     *  Accepted values include `0` through `360` degrees.
     *  For example, if you set the filling angle to `45`, the shape will be filled diagonally from the lower
     * right part of the shape to its upper left part.
     *  This property can be used only when {@link sap.suite.ui.commons.statusindicator.FillingType} is set
     * to `Linear`.
     */
    fillingAngle?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the vertical alignment of the shape within its parent container.
     */
    verticalAlignment?:
      | (
          | statusindicator.VerticalAlignmentType
          | keyof typeof statusindicator.VerticalAlignmentType
        )
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines the horizontal alignment of the shape within its parent container.
     */
    horizontalAlignment?:
      | (
          | statusindicator.HorizontalAlignmentType
          | keyof typeof statusindicator.HorizontalAlignmentType
        )
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/statusindicator/ShapeGroup" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Shape from "sap/suite/ui/commons/statusindicator/Shape";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * Group of shapes that display status indicator value. Shapes in the group are filled in parallel, actual
   * animation might depend on particular shape setting.
   */
  class ShapeGroup extends Control {
    /**
     * Constructor for a new ShapeGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ShapeGroupSettings
    );
    /**
     * Constructor for a new ShapeGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ShapeGroupSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.ShapeGroup with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ShapeGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.ShapeGroup.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some shape to the aggregation {@link #getShapes shapes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addShape(
      /**
       * The shape to add; if empty, nothing is inserted
       */
      oShape: Shape
    ): this;
    /**
     * Destroys all the shapes in the aggregation {@link #getShapes shapes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyShapes(): this;
    /**
     * Gets content of aggregation {@link #getShapes shapes}.
     *
     * List of shapes that belong to this group.
     */
    getShapes(): Shape[];
    /**
     * Gets current value of property {@link #getWeight weight}.
     *
     * Weight of the group, relative to other groups in the status indicator. This property allows you to distribute
     * the status indicator's value between groups of shapes that it contains. For example, for three groups
     * with weights 10, 10, and 20 (total weight 40), the status indicator's value is distributed in the following
     * way:
     * 	 - If the status indicator's value is below 25% (10 out of 40), the first group of shapes (weight 10)
     *     is partially filled, depending on the percentage value. For example, if the percentage value is 5, the
     *     first group of shapes is 1/5-full. The second and the third groups are empty.
     * 	 - If the status indicator's value is at least 25% but below 50%, the first group of shapes (weight
     *     10) is filled, the second group (also weight 10) is partially filled, and the third group (weight 20)
     *     appears empty.
     * 	 - If the status indicator's value is at least 50% but below 100%, the first two groups of shapes (weight
     *     10 each) are filled, but the third group (weight 20) is only partially filled.
     * 	 - If the status indicator's value is 100, all three groups of shapes are filled.
     *
     * Default value is `10`.
     *
     * @returns Value of property `weight`
     */
    getWeight(): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.statusindicator.Shape` in the aggregation {@link #getShapes shapes}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfShape(
      /**
       * The shape whose index is looked for
       */
      oShape: Shape
    ): int;
    /**
     * Inserts a shape into the aggregation {@link #getShapes shapes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertShape(
      /**
       * The shape to insert; if empty, nothing is inserted
       */
      oShape: Shape,
      /**
       * The `0`-based index the shape should be inserted at; for a negative value of `iIndex`, the shape is inserted
       * at position 0; for a value greater than the current size of the aggregation, the shape is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getShapes shapes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllShapes(): Shape[];
    /**
     * Removes a shape from the aggregation {@link #getShapes shapes}.
     *
     * @returns The removed shape or `null`
     */
    removeShape(
      /**
       * The shape to remove or its index or id
       */
      vShape: int | string | Shape
    ): Shape | null;
    /**
     * Sets a new value for property {@link #getWeight weight}.
     *
     * Weight of the group, relative to other groups in the status indicator. This property allows you to distribute
     * the status indicator's value between groups of shapes that it contains. For example, for three groups
     * with weights 10, 10, and 20 (total weight 40), the status indicator's value is distributed in the following
     * way:
     * 	 - If the status indicator's value is below 25% (10 out of 40), the first group of shapes (weight 10)
     *     is partially filled, depending on the percentage value. For example, if the percentage value is 5, the
     *     first group of shapes is 1/5-full. The second and the third groups are empty.
     * 	 - If the status indicator's value is at least 25% but below 50%, the first group of shapes (weight
     *     10) is filled, the second group (also weight 10) is partially filled, and the third group (weight 20)
     *     appears empty.
     * 	 - If the status indicator's value is at least 50% but below 100%, the first two groups of shapes (weight
     *     10 each) are filled, but the third group (weight 20) is only partially filled.
     * 	 - If the status indicator's value is 100, all three groups of shapes are filled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `10`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWeight(
      /**
       * New value for property `weight`
       */
      iWeight?: int
    ): this;
  }
  export default ShapeGroup;

  export interface $ShapeGroupSettings extends $ControlSettings {
    /**
     * Weight of the group, relative to other groups in the status indicator. This property allows you to distribute
     * the status indicator's value between groups of shapes that it contains. For example, for three groups
     * with weights 10, 10, and 20 (total weight 40), the status indicator's value is distributed in the following
     * way:
     * 	 - If the status indicator's value is below 25% (10 out of 40), the first group of shapes (weight 10)
     *     is partially filled, depending on the percentage value. For example, if the percentage value is 5, the
     *     first group of shapes is 1/5-full. The second and the third groups are empty.
     * 	 - If the status indicator's value is at least 25% but below 50%, the first group of shapes (weight
     *     10) is filled, the second group (also weight 10) is partially filled, and the third group (weight 20)
     *     appears empty.
     * 	 - If the status indicator's value is at least 50% but below 100%, the first two groups of shapes (weight
     *     10 each) are filled, but the third group (weight 20) is only partially filled.
     * 	 - If the status indicator's value is 100, all three groups of shapes are filled.
     */
    weight?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * List of shapes that belong to this group.
     */
    shapes?: Shape[] | Shape | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/statusindicator/SimpleShape" {
  import {
    default as Shape,
    $ShapeSettings,
  } from "sap/suite/ui/commons/statusindicator/Shape";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ValueCSSColor } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * A simple shape that consists of a single SVG shape.
   */
  class SimpleShape extends Shape {
    /**
     * Constructor for a new SimpleShape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SimpleShapeSettings
    );
    /**
     * Constructor for a new SimpleShape.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SimpleShapeSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.SimpleShape with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.Shape.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SimpleShape>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.SimpleShape.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Returns currently displayed value.
     *
     * @returns currently displayed value
     */
    getDisplayedValue(): number;
    /**
     * Gets current value of property {@link #getStrokeColor strokeColor}.
     *
     * Specifies the color of the shape's outline.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Value of property `strokeColor`
     */
    getStrokeColor(): ValueCSSColor;
    /**
     * Gets current value of property {@link #getStrokeWidth strokeWidth}.
     *
     * Specifies the width of the shape's outline.
     *
     * Default value is `0.25`.
     *
     * @returns Value of property `strokeWidth`
     */
    getStrokeWidth(): float;
    /**
     * Sets a new value for property {@link #getStrokeColor strokeColor}.
     *
     * Specifies the color of the shape's outline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStrokeColor(
      /**
       * New value for property `strokeColor`
       */
      sStrokeColor?: ValueCSSColor
    ): this;
    /**
     * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
     *
     * Specifies the width of the shape's outline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0.25`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStrokeWidth(
      /**
       * New value for property `strokeWidth`
       */
      fStrokeWidth?: float
    ): this;
  }
  export default SimpleShape;

  export interface $SimpleShapeSettings extends $ShapeSettings {
    /**
     * Specifies the width of the shape's outline.
     */
    strokeWidth?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies the color of the shape's outline.
     */
    strokeColor?: ValueCSSColor | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/statusindicator/StatusIndicator" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, CSSSize } from "sap/ui/core/library";

  import DiscreteThreshold from "sap/suite/ui/commons/statusindicator/DiscreteThreshold";

  import ShapeGroup from "sap/suite/ui/commons/statusindicator/ShapeGroup";

  import PropertyThreshold from "sap/suite/ui/commons/statusindicator/PropertyThreshold";

  import Event from "sap/ui/base/Event";

  import Text from "sap/m/Text";

  import { statusindicator } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * The status indicator control displays a value between 0 and 100.
   *
   * A status indicator may consist of multiple groups that gradually display the value. The shapes in the
   * first group are filled first, the shapes in the second group second, and so on.
   *
   * The value of the status indicator is distributed between the groups depending on their weight.
   *
   * The filling of the shapes in the groups can be proportional to the value of the status indicator or can
   * be based on thresholds specified in the `discreteThresholds` aggregation.
   */
  class StatusIndicator extends Control {
    /**
     * Constructor for a new StatusIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $StatusIndicatorSettings
    );
    /**
     * Constructor for a new StatusIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $StatusIndicatorSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.statusindicator.StatusIndicator with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StatusIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.statusindicator.StatusIndicator.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some discreteThreshold to the aggregation {@link #getDiscreteThresholds discreteThresholds}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDiscreteThreshold(
      /**
       * The discreteThreshold to add; if empty, nothing is inserted
       */
      oDiscreteThreshold: DiscreteThreshold
    ): this;
    /**
     * Adds some group to the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addGroup(
      /**
       * The group to add; if empty, nothing is inserted
       */
      oGroup: ShapeGroup
    ): this;
    /**
     * Adds some propertyThreshold to the aggregation {@link #getPropertyThresholds propertyThresholds}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addPropertyThreshold(
      /**
       * The propertyThreshold to add; if empty, nothing is inserted
       */
      oPropertyThreshold: PropertyThreshold
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.statusindicator.StatusIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.StatusIndicator` itself.
     *
     * This event is fired when the user clicks or taps the status indicator.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.StatusIndicator`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.statusindicator.StatusIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.StatusIndicator` itself.
     *
     * This event is fired when the user clicks or taps the status indicator.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.StatusIndicator`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the discreteThresholds in the aggregation {@link #getDiscreteThresholds discreteThresholds}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDiscreteThresholds(): this;
    /**
     * Destroys all the groups in the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyGroups(): this;
    /**
     * Destroys the label in the aggregation {@link #getLabel label}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLabel(): this;
    /**
     * Destroys all the propertyThresholds in the aggregation {@link #getPropertyThresholds propertyThresholds}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPropertyThresholds(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.statusindicator.StatusIndicator`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Gets current value of property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this control to be used by screen reader software.
     *
     * @returns Value of property `ariaLabel`
     */
    getAriaLabel(): string;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets content of aggregation {@link #getDiscreteThresholds discreteThresholds}.
     *
     * Specifies discrete thresholds for the status indicator. If discrete thresholds are set, the status indicator
     * adjusts its appearance to the closest threshold value that is not greater than the actual percentage
     * value of the status indicator. For example, if the following discrete thresholds are specified:
     *
     * 	 - `value = "20"`
     * 	 - `value = "60"`
     * 	 - `value = "100"`  The status indicator displays the following percentage values:
     * 	 - `0` if the actual value is 15
     * 	 - `20` if the actual value is 20
     * 	 - `20` if the actual value is 55
     * 	 - `60` if the actual value is 60
     * 	 - `60` if the actual value is 79
     * 	 - `100` if the actual value is 100  Please note that these thresholds affect only the appearance
     *     of the status inicator, not its stored value.
     */
    getDiscreteThresholds(): DiscreteThreshold[];
    /**
     * Gets content of aggregation {@link #getGroups groups}.
     *
     * Groups of shapes that display the status indicator's percentage value. A status indicator must always
     * include at least one group.
     */
    getGroups(): ShapeGroup[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the status indicator. Only sets the height of the image part of the status indicator, potential
     * label is not included.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets content of aggregation {@link #getLabel label}.
     */
    getLabel(): Text;
    /**
     * Gets current value of property {@link #getLabelPosition labelPosition}.
     *
     * Default value is `Left`.
     *
     * @returns Value of property `labelPosition`
     */
    getLabelPosition():
      | statusindicator.LabelPositionType
      | keyof typeof statusindicator.LabelPositionType;
    /**
     * Gets content of aggregation {@link #getPropertyThresholds propertyThresholds}.
     *
     * Defines how shapes are filled based on the status indicator's percentage value.
     */
    getPropertyThresholds(): PropertyThreshold[];
    /**
     * Gets current value of property {@link #getShowLabel showLabel}.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showLabel`
     */
    getShowLabel(): boolean;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Predefined sizes for the status indicator.
     *
     * Default value is `None`.
     *
     * @returns Value of property `size`
     */
    getSize(): statusindicator.SizeType | keyof typeof statusindicator.SizeType;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Percentage value, between 0 and 100, that the status indicator reflects.
     *
     * Default value is `0`.
     *
     * @returns Value of property `value`
     */
    getValue(): int;
    /**
     * Gets current value of property {@link #getViewBox viewBox}.
     *
     * Defines the view box surrounding the shapes included in the status indicator.
     *
     * @returns Value of property `viewBox`
     */
    getViewBox(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the status indicator. Only sets the width of the image part of the status indicator, potential
     * label is not included. The root div of the status indicator is set as display: "block" and so takes up
     * the whole space available. Wrap status indicator in {@link sap.m.FlexBox} control if you wish to control
     * width of the whole status indicator.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.suite.ui.commons.statusindicator.DiscreteThreshold` in the aggregation {@link #getDiscreteThresholds discreteThresholds}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDiscreteThreshold(
      /**
       * The discreteThreshold whose index is looked for
       */
      oDiscreteThreshold: DiscreteThreshold
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.statusindicator.ShapeGroup` in the aggregation {@link #getGroups groups}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfGroup(
      /**
       * The group whose index is looked for
       */
      oGroup: ShapeGroup
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.statusindicator.PropertyThreshold` in the aggregation {@link #getPropertyThresholds propertyThresholds}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfPropertyThreshold(
      /**
       * The propertyThreshold whose index is looked for
       */
      oPropertyThreshold: PropertyThreshold
    ): int;
    /**
     * Inserts a discreteThreshold into the aggregation {@link #getDiscreteThresholds discreteThresholds}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDiscreteThreshold(
      /**
       * The discreteThreshold to insert; if empty, nothing is inserted
       */
      oDiscreteThreshold: DiscreteThreshold,
      /**
       * The `0`-based index the discreteThreshold should be inserted at; for a negative value of `iIndex`, the
       * discreteThreshold is inserted at position 0; for a value greater than the current size of the aggregation,
       * the discreteThreshold is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a group into the aggregation {@link #getGroups groups}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertGroup(
      /**
       * The group to insert; if empty, nothing is inserted
       */
      oGroup: ShapeGroup,
      /**
       * The `0`-based index the group should be inserted at; for a negative value of `iIndex`, the group is inserted
       * at position 0; for a value greater than the current size of the aggregation, the group is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a propertyThreshold into the aggregation {@link #getPropertyThresholds propertyThresholds}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertPropertyThreshold(
      /**
       * The propertyThreshold to insert; if empty, nothing is inserted
       */
      oPropertyThreshold: PropertyThreshold,
      /**
       * The `0`-based index the propertyThreshold should be inserted at; for a negative value of `iIndex`, the
       * propertyThreshold is inserted at position 0; for a value greater than the current size of the aggregation,
       * the propertyThreshold is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getDiscreteThresholds discreteThresholds}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDiscreteThresholds(): DiscreteThreshold[];
    /**
     * Removes all the controls from the aggregation {@link #getGroups groups}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllGroups(): ShapeGroup[];
    /**
     * Removes all the controls from the aggregation {@link #getPropertyThresholds propertyThresholds}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllPropertyThresholds(): PropertyThreshold[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     *
     * @returns The removed ariaDescribedBy or `null`
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID | null;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns The removed ariaLabelledBy or `null`
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID | null;
    /**
     * Removes a discreteThreshold from the aggregation {@link #getDiscreteThresholds discreteThresholds}.
     *
     * @returns The removed discreteThreshold or `null`
     */
    removeDiscreteThreshold(
      /**
       * The discreteThreshold to remove or its index or id
       */
      vDiscreteThreshold: int | string | DiscreteThreshold
    ): DiscreteThreshold | null;
    /**
     * Removes a group from the aggregation {@link #getGroups groups}.
     *
     * @returns The removed group or `null`
     */
    removeGroup(
      /**
       * The group to remove or its index or id
       */
      vGroup: int | string | ShapeGroup
    ): ShapeGroup | null;
    /**
     * Removes a propertyThreshold from the aggregation {@link #getPropertyThresholds propertyThresholds}.
     *
     * @returns The removed propertyThreshold or `null`
     */
    removePropertyThreshold(
      /**
       * The propertyThreshold to remove or its index or id
       */
      vPropertyThreshold: int | string | PropertyThreshold
    ): PropertyThreshold | null;
    /**
     * Sets a new value for property {@link #getAriaLabel ariaLabel}.
     *
     * ARIA label for this control to be used by screen reader software.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAriaLabel(
      /**
       * New value for property `ariaLabel`
       */
      sAriaLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the status indicator. Only sets the height of the image part of the status indicator, potential
     * label is not included.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight: CSSSize
    ): this;
    /**
     * Sets the aggregated {@link #getLabel label}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * The label to set
       */
      oLabel: Text
    ): this;
    /**
     * Sets a new value for property {@link #getLabelPosition labelPosition}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Left`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabelPosition(
      /**
       * New value for property `labelPosition`
       */
      sLabelPosition?:
        | statusindicator.LabelPositionType
        | keyof typeof statusindicator.LabelPositionType
    ): this;
    /**
     * Sets a new value for property {@link #getShowLabel showLabel}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowLabel(
      /**
       * New value for property `showLabel`
       */
      bShowLabel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Predefined sizes for the status indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: statusindicator.SizeType | keyof typeof statusindicator.SizeType
    ): this;
    /**
     *
     * @returns self Sets the status indicator percentage value.
     */
    setValue(
      /**
       * Value that should be displayed
       */
      iValue: int
    ): Object;
    /**
     * Sets a new value for property {@link #getViewBox viewBox}.
     *
     * Defines the view box surrounding the shapes included in the status indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setViewBox(
      /**
       * New value for property `viewBox`
       */
      sViewBox?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the status indicator. Only sets the width of the image part of the status indicator, potential
     * label is not included. The root div of the status indicator is set as display: "block" and so takes up
     * the whole space available. Wrap status indicator in {@link sap.m.FlexBox} control if you wish to control
     * width of the whole status indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: CSSSize
    ): this;
  }
  export default StatusIndicator;

  export interface $StatusIndicatorSettings extends $ControlSettings {
    /**
     * Width of the status indicator. Only sets the width of the image part of the status indicator, potential
     * label is not included. The root div of the status indicator is set as display: "block" and so takes up
     * the whole space available. Wrap status indicator in {@link sap.m.FlexBox} control if you wish to control
     * width of the whole status indicator.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the status indicator. Only sets the height of the image part of the status indicator, potential
     * label is not included.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Percentage value, between 0 and 100, that the status indicator reflects.
     */
    value?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the view box surrounding the shapes included in the status indicator.
     */
    viewBox?: string | PropertyBindingInfo;

    /**
     * ARIA label for this control to be used by screen reader software.
     */
    ariaLabel?: string | PropertyBindingInfo;

    /**
     * Predefined sizes for the status indicator.
     */
    size?:
      | (statusindicator.SizeType | keyof typeof statusindicator.SizeType)
      | PropertyBindingInfo
      | `{${string}}`;

    labelPosition?:
      | (
          | statusindicator.LabelPositionType
          | keyof typeof statusindicator.LabelPositionType
        )
      | PropertyBindingInfo
      | `{${string}}`;

    showLabel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Groups of shapes that display the status indicator's percentage value. A status indicator must always
     * include at least one group.
     */
    groups?: ShapeGroup[] | ShapeGroup | AggregationBindingInfo | `{${string}}`;

    /**
     * Defines how shapes are filled based on the status indicator's percentage value.
     */
    propertyThresholds?:
      | PropertyThreshold[]
      | PropertyThreshold
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Specifies discrete thresholds for the status indicator. If discrete thresholds are set, the status indicator
     * adjusts its appearance to the closest threshold value that is not greater than the actual percentage
     * value of the status indicator. For example, if the following discrete thresholds are specified:
     *
     * 	 - `value = "20"`
     * 	 - `value = "60"`
     * 	 - `value = "100"`  The status indicator displays the following percentage values:
     * 	 - `0` if the actual value is 15
     * 	 - `20` if the actual value is 20
     * 	 - `20` if the actual value is 55
     * 	 - `60` if the actual value is 60
     * 	 - `60` if the actual value is 79
     * 	 - `100` if the actual value is 100  Please note that these thresholds affect only the appearance
     *     of the status inicator, not its stored value.
     */
    discreteThresholds?:
      | DiscreteThreshold[]
      | DiscreteThreshold
      | AggregationBindingInfo
      | `{${string}}`;

    label?: Text;

    /**
     * Controls or IDs that provide a description for this control. Can be used by screen reader software.
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Controls or IDs that label this control. Can be used by screen reader software.
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired when the user clicks or taps the status indicator.
     */
    press?: (oEvent: Event) => void;
  }

  export interface $StatusIndicatorPressEventParameters {}
}

declare module "sap/suite/ui/commons/taccount/TAccount" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TAccountItem from "sap/suite/ui/commons/taccount/TAccountItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.58.0
   *
   * The T account control displays debit and credit entries on a general ledger account. It can be used to
   * visualize the flow of transactions through the accounts where these transactions are stored.
   */
  class TAccount extends Control {
    /**
     * Constructor for a new TAccount.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link https://ui5.sap.com/#/topic/fe6792fa673c4b0fba91d35fd6493c86 T Account}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountSettings
    );
    /**
     * Constructor for a new TAccount.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link https://ui5.sap.com/#/topic/fe6792fa673c4b0fba91d35fd6493c86 T Account}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccount with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TAccount>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccount.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some credit to the aggregation {@link #getCredit credit}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCredit(
      /**
       * The credit to add; if empty, nothing is inserted
       */
      oCredit: TAccountItem
    ): this;
    /**
     * Adds some debit to the aggregation {@link #getDebit debit}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDebit(
      /**
       * The debit to add; if empty, nothing is inserted
       */
      oDebit: TAccountItem
    ): this;
    /**
     * Destroys all the credit in the aggregation {@link #getCredit credit}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCredit(): this;
    /**
     * Destroys all the debit in the aggregation {@link #getDebit debit}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDebit(): this;
    /**
     * Gets current value of property {@link #getCollapsed collapsed}.
     *
     * Defines whether the T account should appear as collapsed.
     * By default, it appears as expanded.
     *
     * Default value is `false`.
     *
     * @returns Value of property `collapsed`
     */
    getCollapsed(): boolean;
    /**
     * Gets content of aggregation {@link #getCredit credit}.
     *
     * Credit entries.
     */
    getCredit(): TAccountItem[];
    /**
     * Gets content of aggregation {@link #getDebit debit}.
     *
     * Debit entries.
     */
    getDebit(): TAccountItem[];
    /**
     * Gets current value of property {@link #getMeasureOfUnit measureOfUnit}.
     *
     * Unit of measurement. Can be set to a currency or any other applicable unit of measurement.
     *  Please note that if multi-currency accounts are used, the T account control will not convert the values
     * to the currency defined in this property.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `measureOfUnit`
     */
    getMeasureOfUnit(): string;
    /**
     * Gets current value of property {@link #getOpening opening}.
     *
     * Mode with opening and closing balance of the T account.
     *
     * Default value is `false`.
     *
     * @returns Value of property `opening`
     */
    getOpening(): boolean;
    /**
     * Gets current value of property {@link #getOpeningCredit openingCredit}.
     *
     * Opening credit balance of the T account.
     *
     * Default value is `0`.
     *
     * @returns Value of property `openingCredit`
     */
    getOpeningCredit(): any;
    /**
     * Gets current value of property {@link #getOpeningDebit openingDebit}.
     *
     * Opening debit balance of the T account.
     *
     * Default value is `0`.
     *
     * @returns Value of property `openingDebit`
     */
    getOpeningDebit(): any;
    /**
     * Gets current value of property {@link #getOrderBy orderBy}.
     *
     * TAccount property's key, which is used for ordering. If not set, order mode is not enabled. Only supports
     * `DateTime` properties.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `orderBy`
     */
    getOrderBy(): string;
    /**
     * Gets current value of property {@link #getSubtitle subtitle}.
     *
     * Subtitle of the T account.
     *
     * @returns Value of property `subtitle`
     */
    getSubtitle(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title of the T account.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItem` in the aggregation {@link #getCredit credit}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCredit(
      /**
       * The credit whose index is looked for
       */
      oCredit: TAccountItem
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItem` in the aggregation {@link #getDebit debit}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDebit(
      /**
       * The debit whose index is looked for
       */
      oDebit: TAccountItem
    ): int;
    /**
     * Inserts a credit into the aggregation {@link #getCredit credit}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCredit(
      /**
       * The credit to insert; if empty, nothing is inserted
       */
      oCredit: TAccountItem,
      /**
       * The `0`-based index the credit should be inserted at; for a negative value of `iIndex`, the credit is
       * inserted at position 0; for a value greater than the current size of the aggregation, the credit is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a debit into the aggregation {@link #getDebit debit}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDebit(
      /**
       * The debit to insert; if empty, nothing is inserted
       */
      oDebit: TAccountItem,
      /**
       * The `0`-based index the debit should be inserted at; for a negative value of `iIndex`, the debit is inserted
       * at position 0; for a value greater than the current size of the aggregation, the debit is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCredit credit}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCredit(): TAccountItem[];
    /**
     * Removes all the controls from the aggregation {@link #getDebit debit}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDebit(): TAccountItem[];
    /**
     * Removes a credit from the aggregation {@link #getCredit credit}.
     *
     * @returns The removed credit or `null`
     */
    removeCredit(
      /**
       * The credit to remove or its index or id
       */
      vCredit: int | string | TAccountItem
    ): TAccountItem | null;
    /**
     * Removes a debit from the aggregation {@link #getDebit debit}.
     *
     * @returns The removed debit or `null`
     */
    removeDebit(
      /**
       * The debit to remove or its index or id
       */
      vDebit: int | string | TAccountItem
    ): TAccountItem | null;
    /**
     * @SINCE 1.68
     *
     * Resets the internal state of the T account.
     */
    reset(): void;
    /**
     * Sets a new value for property {@link #getCollapsed collapsed}.
     *
     * Defines whether the T account should appear as collapsed.
     * By default, it appears as expanded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCollapsed(
      /**
       * New value for property `collapsed`
       */
      bCollapsed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMeasureOfUnit measureOfUnit}.
     *
     * Unit of measurement. Can be set to a currency or any other applicable unit of measurement.
     *  Please note that if multi-currency accounts are used, the T account control will not convert the values
     * to the currency defined in this property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMeasureOfUnit(
      /**
       * New value for property `measureOfUnit`
       */
      sMeasureOfUnit?: string
    ): this;
    /**
     * Sets a new value for property {@link #getOpening opening}.
     *
     * Mode with opening and closing balance of the T account.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOpening(
      /**
       * New value for property `opening`
       */
      bOpening?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOpeningCredit openingCredit}.
     *
     * Opening credit balance of the T account.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOpeningCredit(
      /**
       * New value for property `openingCredit`
       */
      oOpeningCredit?: any
    ): this;
    /**
     * Sets a new value for property {@link #getOpeningDebit openingDebit}.
     *
     * Opening debit balance of the T account.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOpeningDebit(
      /**
       * New value for property `openingDebit`
       */
      oOpeningDebit?: any
    ): this;
    /**
     * Sets a new value for property {@link #getOrderBy orderBy}.
     *
     * TAccount property's key, which is used for ordering. If not set, order mode is not enabled. Only supports
     * `DateTime` properties.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOrderBy(
      /**
       * New value for property `orderBy`
       */
      sOrderBy?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSubtitle subtitle}.
     *
     * Subtitle of the T account.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSubtitle(
      /**
       * New value for property `subtitle`
       */
      sSubtitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title of the T account.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default TAccount;

  export interface $TAccountSettings extends $ControlSettings {
    /**
     * Unit of measurement. Can be set to a currency or any other applicable unit of measurement.
     *  Please note that if multi-currency accounts are used, the T account control will not convert the values
     * to the currency defined in this property.
     */
    measureOfUnit?: string | PropertyBindingInfo;

    /**
     * Defines whether the T account should appear as collapsed.
     * By default, it appears as expanded.
     */
    collapsed?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Title of the T account.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Subtitle of the T account.
     */
    subtitle?: string | PropertyBindingInfo;

    /**
     * TAccount property's key, which is used for ordering. If not set, order mode is not enabled. Only supports
     * `DateTime` properties.
     */
    orderBy?: string | PropertyBindingInfo;

    /**
     * Mode with opening and closing balance of the T account.
     */
    opening?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Opening debit balance of the T account.
     */
    openingDebit?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Opening credit balance of the T account.
     */
    openingCredit?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Debit entries.
     */
    debit?:
      | TAccountItem[]
      | TAccountItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Credit entries.
     */
    credit?:
      | TAccountItem[]
      | TAccountItem
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/taccount/TAccountGroup" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TAccount from "sap/suite/ui/commons/taccount/TAccount";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.58.0
   *
   * The T account group control displays debit and credit entries for all {@link sap.suite.ui.commons.TAccount }
   * controls included in the group.
   */
  class TAccountGroup extends Control {
    /**
     * Constructor for a new TAccountGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountGroupSettings
    );
    /**
     * Constructor for a new TAccountGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountGroupSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountGroup with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TAccountGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountGroup.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some account to the aggregation {@link #getAccounts accounts}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAccount(
      /**
       * The account to add; if empty, nothing is inserted
       */
      oAccount: TAccount
    ): this;
    /**
     * Destroys all the accounts in the aggregation {@link #getAccounts accounts}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAccounts(): this;
    /**
     * Gets content of aggregation {@link #getAccounts accounts}.
     *
     * T accounts included in the group.
     */
    getAccounts(): TAccount[];
    /**
     * Gets current value of property {@link #getCollapsed collapsed}.
     *
     * Defines whether the group should appear as collapsed. By default, it appears as expanded.
     *
     * Default value is `false`.
     *
     * @returns Value of property `collapsed`
     */
    getCollapsed(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title of the group.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.suite.ui.commons.taccount.TAccount` in the aggregation {@link #getAccounts accounts}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfAccount(
      /**
       * The account whose index is looked for
       */
      oAccount: TAccount
    ): int;
    /**
     * Inserts a account into the aggregation {@link #getAccounts accounts}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertAccount(
      /**
       * The account to insert; if empty, nothing is inserted
       */
      oAccount: TAccount,
      /**
       * The `0`-based index the account should be inserted at; for a negative value of `iIndex`, the account
       * is inserted at position 0; for a value greater than the current size of the aggregation, the account
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes a account from the aggregation {@link #getAccounts accounts}.
     *
     * @returns The removed account or `null`
     */
    removeAccount(
      /**
       * The account to remove or its index or id
       */
      vAccount: int | string | TAccount
    ): TAccount | null;
    /**
     * Removes all the controls from the aggregation {@link #getAccounts accounts}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAccounts(): TAccount[];
    /**
     * @SINCE 1.68
     *
     * Resets the internal state of the T account group.
     */
    reset(): void;
    /**
     * Sets a new value for property {@link #getCollapsed collapsed}.
     *
     * Defines whether the group should appear as collapsed. By default, it appears as expanded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCollapsed(
      /**
       * New value for property `collapsed`
       */
      bCollapsed?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title of the group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default TAccountGroup;

  export interface $TAccountGroupSettings extends $ControlSettings {
    /**
     * Title of the group.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines whether the group should appear as collapsed. By default, it appears as expanded.
     */
    collapsed?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * T accounts included in the group.
     */
    accounts?: TAccount[] | TAccount | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/taccount/TAccountItem" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TAccountItemProperty from "sap/suite/ui/commons/taccount/TAccountItemProperty";

  import Event from "sap/ui/base/Event";

  import { ValueCSSColor } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.58.0
   *
   * The T account item control represents a credit or debit entry on a {@link sap.suite.ui.commons.TAccount}.
   */
  class TAccountItem extends Control {
    /**
     * Constructor for a new TAccountItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountItemSettings
    );
    /**
     * Constructor for a new TAccountItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountItem with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TAccountItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some property to the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addProperty(
      /**
       * The property to add; if empty, nothing is inserted
       */
      oProperty: TAccountItemProperty
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.taccount.TAccountItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountItem` itself.
     *
     * This event is fired when the user clicks or taps the entry. It highlights the entry and all other entries
     * that belong to the same group.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountItem`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.taccount.TAccountItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountItem` itself.
     *
     * This event is fired when the user clicks or taps the entry. It highlights the entry and all other entries
     * that belong to the same group.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountItem`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the properties in the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyProperties(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.taccount.TAccountItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAriaLabel ariaLabel}.
     *
     * Aria label for item.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `ariaLabel`
     */
    getAriaLabel(): string;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * Color applied to the debit or credit entry.
     *
     * @returns Value of property `color`
     */
    getColor(): ValueCSSColor;
    /**
     * Gets current value of property {@link #getGroup group}.
     *
     * Group where this debit or credit entry belongs.
     *  Entries that share the same group are highlighted when the user clicks or taps one of such entries.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `group`
     */
    getGroup(): string;
    /**
     * Gets content of aggregation {@link #getProperties properties}.
     *
     * Additional properties that define how the entry is displayed.
     */
    getProperties(): TAccountItemProperty[];
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Value of the credit or debit entry.
     *
     * Default value is `0`.
     *
     * @returns Value of property `value`
     */
    getValue(): any;
    /**
     * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItemProperty` in the aggregation {@link #getProperties properties}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfProperty(
      /**
       * The property whose index is looked for
       */
      oProperty: TAccountItemProperty
    ): int;
    /**
     * Inserts a property into the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertProperty(
      /**
       * The property to insert; if empty, nothing is inserted
       */
      oProperty: TAccountItemProperty,
      /**
       * The `0`-based index the property should be inserted at; for a negative value of `iIndex`, the property
       * is inserted at position 0; for a value greater than the current size of the aggregation, the property
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getProperties properties}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllProperties(): TAccountItemProperty[];
    /**
     * Removes a property from the aggregation {@link #getProperties properties}.
     *
     * @returns The removed property or `null`
     */
    removeProperty(
      /**
       * The property to remove or its index or id
       */
      vProperty: int | string | TAccountItemProperty
    ): TAccountItemProperty | null;
    /**
     * Sets a new value for property {@link #getAriaLabel ariaLabel}.
     *
     * Aria label for item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAriaLabel(
      /**
       * New value for property `ariaLabel`
       */
      sAriaLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * Color applied to the debit or credit entry.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: ValueCSSColor
    ): this;
    /**
     * Sets a new value for property {@link #getGroup group}.
     *
     * Group where this debit or credit entry belongs.
     *  Entries that share the same group are highlighted when the user clicks or taps one of such entries.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroup(
      /**
       * New value for property `group`
       */
      sGroup?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Value of the credit or debit entry.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      oValue?: any
    ): this;
  }
  export default TAccountItem;

  export interface $TAccountItemSettings extends $ControlSettings {
    /**
     * Value of the credit or debit entry.
     */
    value?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Color applied to the debit or credit entry.
     */
    color?: ValueCSSColor | PropertyBindingInfo | `{${string}}`;

    /**
     * Group where this debit or credit entry belongs.
     *  Entries that share the same group are highlighted when the user clicks or taps one of such entries.
     */
    group?: string | PropertyBindingInfo;

    /**
     * Aria label for item.
     */
    ariaLabel?: string | PropertyBindingInfo;

    /**
     * Additional properties that define how the entry is displayed.
     */
    properties?:
      | TAccountItemProperty[]
      | TAccountItemProperty
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * This event is fired when the user clicks or taps the entry. It highlights the entry and all other entries
     * that belong to the same group.
     */
    press?: (oEvent: Event) => void;
  }

  export interface $TAccountItemPressEventParameters {}
}

declare module "sap/suite/ui/commons/taccount/TAccountItemProperty" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.58.0
   *
   * An additional property that defines how a {@link sap.suite.ui.commons.TAccountItem} is displayed.
   */
  class TAccountItemProperty extends Control {
    /**
     * Constructor for a new TAccountItemProperty.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountItemPropertySettings
    );
    /**
     * Constructor for a new TAccountItemProperty.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountItemPropertySettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountItemProperty with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TAccountItemProperty>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountItemProperty.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getDisplayLabel displayLabel}.
     *
     * Defines whether the label should be displayed.
     *  This property can be overridden by the {@link sap.suite.ui.commons.TAccountPanel} settings.
     *
     * Default value is `true`.
     *
     * @returns Value of property `displayLabel`
     */
    getDisplayLabel(): boolean;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Key of the property.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Label of the property.
     * Can be hidden or displayed using the `displayLabel` property.
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Value of the property.
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Defines whether the T account property should be visible or hidden.
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getDisplayLabel displayLabel}.
     *
     * Defines whether the label should be displayed.
     *  This property can be overridden by the {@link sap.suite.ui.commons.TAccountPanel} settings.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisplayLabel(
      /**
       * New value for property `displayLabel`
       */
      bDisplayLabel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Key of the property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Label of the property.
     * Can be hidden or displayed using the `displayLabel` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Value of the property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Defines whether the T account property should be visible or hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }
  export default TAccountItemProperty;

  export interface $TAccountItemPropertySettings extends $ControlSettings {
    /**
     * Key of the property.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Value of the property.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Label of the property.
     * Can be hidden or displayed using the `displayLabel` property.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Defines whether the label should be displayed.
     *  This property can be overridden by the {@link sap.suite.ui.commons.TAccountPanel} settings.
     */
    displayLabel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether the T account property should be visible or hidden.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/taccount/TAccountPanel" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TAccountItemProperty from "sap/suite/ui/commons/taccount/TAccountItemProperty";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { taccount } from "sap/suite/ui/commons/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.58.0
   *
   * A panel that acts as a container for {@link sap.suite.ui.commons.TAccountGroup} controls included in
   * it.
   *  The settings dialog of the panel can be used to modify how the {@link sap.suite.ui.commons.TAccountItem }
   * elements in the included T accounts are displayed.
   */
  class TAccountPanel extends Control {
    /**
     * Constructor for a new TAccountPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountPanelSettings
    );
    /**
     * Constructor for a new TAccountPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TAccountPanelSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountPanel with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TAccountPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountPanel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some property to the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addProperty(
      /**
       * The property to add; if empty, nothing is inserted
       */
      oProperty: TAccountItemProperty
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:settingsApplied settingsApplied} event of this
     * `sap.suite.ui.commons.taccount.TAccountPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
     *
     * This event is fired when the panel's settings are applied.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSettingsApplied(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TAccountPanelSettingsAppliedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:settingsApplied settingsApplied} event of this
     * `sap.suite.ui.commons.taccount.TAccountPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
     *
     * This event is fired when the panel's settings are applied.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSettingsApplied(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TAccountPanelSettingsAppliedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:stateChanged stateChanged} event of this `sap.suite.ui.commons.taccount.TAccountPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
     *
     * This event is fired when the user switches between T account view and table view.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachStateChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TAccountPanelStateChangedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:stateChanged stateChanged} event of this `sap.suite.ui.commons.taccount.TAccountPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
     *
     * This event is fired when the user switches between T account view and table view.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachStateChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TAccountPanelStateChangedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the properties in the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyProperties(): this;
    /**
     * Destroys the table in the aggregation {@link #getTable table}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTable(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:settingsApplied settingsApplied} event of
     * this `sap.suite.ui.commons.taccount.TAccountPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSettingsApplied(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$TAccountPanelSettingsAppliedEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:stateChanged stateChanged} event of this `sap.suite.ui.commons.taccount.TAccountPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachStateChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$TAccountPanelStateChangedEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:settingsApplied settingsApplied} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSettingsApplied(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TAccountPanelSettingsAppliedEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:stateChanged stateChanged} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireStateChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TAccountPanelStateChangedEventParameters
    ): this;
    /**
     * @SINCE 1.92
     *
     * Gets current value of property {@link #getMaxFractionDigits maxFractionDigits}.
     *
     * Integer value defining the maximum number of fraction digits
     *
     * Default value is `2`.
     *
     * @returns Value of property `maxFractionDigits`
     */
    getMaxFractionDigits(): int;
    /**
     * Gets content of aggregation {@link #getProperties properties}.
     *
     * Properties of the T-account entries that can be shown or hidden using the panel's settings dialog.
     */
    getProperties(): TAccountItemProperty[];
    /**
     * Returns the settings dialog of the panel.
     */
    getSettingsDialog(): void;
    /**
     * Gets current value of property {@link #getShowOverlay showOverlay}.
     *
     * Indicates whether the T account panel should be covered by a translucent overlay screen.
     *  This overlay screen can be used to hide the data temporarily.
     *
     * Default value is `false`.
     *
     * @returns Value of property `showOverlay`
     */
    getShowOverlay(): boolean;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * State of the panel that defines how T accounts are displayed.
     *  By default, the T accounts included in the panel are displayed as T shapes with debit and credit entries
     * on either side of the T.
     *
     * Default value is `"Default"`.
     *
     * @returns Value of property `state`
     */
    getState():
      | taccount.TAccountPanelState
      | keyof typeof taccount.TAccountPanelState;
    /**
     * Gets the sum of transactions in all T-account groups included in the panel.
     *
     *
     * Returns a sum object that is structured as follows:
     *  `{`
     *  `measure: {string}` Unit of measurement of the T accounts. If T accounts use different units of measurements,
     * the last one is returned.
     *  `sum: {number}` Sum of all entries in the T accounts and T-account groups included in the panel.
     *  `correct: {boolean}` If `false`, the sum cannot be calculated, because the T accounts use different
     * units of measurement.
     *  `}`
     *
     *
     * @returns Object that includes the sum of entries in all included T-account groups.
     */
    getSum(): Object;
    /**
     * Gets content of aggregation {@link #getTable table}.
     *
     * Table that can be used to display additional data.
     */
    getTable(): Control;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title of the panel.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Returns the panel's toolbar, so the app can modify it.
     */
    getToolbar(): void;
    /**
     * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItemProperty` in the aggregation {@link #getProperties properties}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfProperty(
      /**
       * The property whose index is looked for
       */
      oProperty: TAccountItemProperty
    ): int;
    /**
     * Inserts a property into the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertProperty(
      /**
       * The property to insert; if empty, nothing is inserted
       */
      oProperty: TAccountItemProperty,
      /**
       * The `0`-based index the property should be inserted at; for a negative value of `iIndex`, the property
       * is inserted at position 0; for a value greater than the current size of the aggregation, the property
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Opens the settings dialog of the panel.
     */
    openSettings(): void;
    /**
     * Removes all the controls from the aggregation {@link #getProperties properties}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllProperties(): TAccountItemProperty[];
    /**
     * Removes a property from the aggregation {@link #getProperties properties}.
     *
     * @returns The removed property or `null`
     */
    removeProperty(
      /**
       * The property to remove or its index or id
       */
      vProperty: int | string | TAccountItemProperty
    ): TAccountItemProperty | null;
    /**
     * @SINCE 1.68
     *
     * Resets the internal state of the T account group.
     */
    reset(): void;
    /**
     * @SINCE 1.92
     *
     * Sets a new value for property {@link #getMaxFractionDigits maxFractionDigits}.
     *
     * Integer value defining the maximum number of fraction digits
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxFractionDigits(
      /**
       * New value for property `maxFractionDigits`
       */
      iMaxFractionDigits?: int
    ): this;
    /**
     * Sets a new value for property {@link #getShowOverlay showOverlay}.
     *
     * Indicates whether the T account panel should be covered by a translucent overlay screen.
     *  This overlay screen can be used to hide the data temporarily.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowOverlay(
      /**
       * New value for property `showOverlay`
       */
      bShowOverlay?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * State of the panel that defines how T accounts are displayed.
     *  By default, the T accounts included in the panel are displayed as T shapes with debit and credit entries
     * on either side of the T.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Default"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?:
        | taccount.TAccountPanelState
        | keyof typeof taccount.TAccountPanelState
    ): this;
    /**
     * Sets the aggregated {@link #getTable table}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTable(
      /**
       * The table to set
       */
      oTable: Control
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title of the panel.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Switches the content displayed in the panel to either table view or T-account view.
     */
    switchContent(
      /**
       * Defines whether to show accounts as tables (`true`) or standard T accounts.
       */
      showTable: boolean
    ): void;
  }
  export default TAccountPanel;

  export interface $TAccountPanelSettings extends $ControlSettings {
    /**
     * Title of the panel.
     */
    title?: string | PropertyBindingInfo;

    /**
     * State of the panel that defines how T accounts are displayed.
     *  By default, the T accounts included in the panel are displayed as T shapes with debit and credit entries
     * on either side of the T.
     */
    state?:
      | (taccount.TAccountPanelState | keyof typeof taccount.TAccountPanelState)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Indicates whether the T account panel should be covered by a translucent overlay screen.
     *  This overlay screen can be used to hide the data temporarily.
     */
    showOverlay?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.92
     *
     * Integer value defining the maximum number of fraction digits
     */
    maxFractionDigits?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Properties of the T-account entries that can be shown or hidden using the panel's settings dialog.
     */
    properties?:
      | TAccountItemProperty[]
      | TAccountItemProperty
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Table that can be used to display additional data.
     */
    table?: Control;

    /**
     * This event is fired when the user switches between T account view and table view.
     */
    stateChanged?: (
      oEvent: Event<$TAccountPanelStateChangedEventParameters>
    ) => void;

    /**
     * This event is fired when the panel's settings are applied.
     */
    settingsApplied?: (
      oEvent: Event<$TAccountPanelSettingsAppliedEventParameters>
    ) => void;
  }

  export interface $TAccountPanelSettingsAppliedEventParameters {
    /**
     * Hash map witch changed properties
     */
    properties?: object;
  }

  export interface $TAccountPanelStateChangedEventParameters {
    /**
     * Type of current state
     */
    state?:
      | taccount.TAccountPanelState
      | keyof typeof taccount.TAccountPanelState;
  }
}

declare module "sap/suite/ui/commons/TargetFilter" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TargetFilterColumn from "sap/suite/ui/commons/TargetFilterColumn";

  import { ID } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import TargetFilterMeasureColumn from "sap/suite/ui/commons/TargetFilterMeasureColumn";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated.
   *
   * The analytical filter control. The control works only with the OData model connected to the analytical
   * OData service (for example, HANA XS Analytical view exposed as an OData service).
   */
  class TargetFilter extends Control {
    /**
     * Constructor for a new TargetFilter.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TargetFilterSettings
    );
    /**
     * Constructor for a new TargetFilter.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TargetFilterSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TargetFilter with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TargetFilter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TargetFilter.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some column to the aggregation {@link #getColumns columns}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addColumn(
      /**
       * The column to add; if empty, nothing is inserted
       */
      oColumn: TargetFilterColumn
    ): this;
    /**
     * Adds some selectedColumn into the association {@link #getSelectedColumns selectedColumns}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addSelectedColumn(
      /**
       * The selectedColumns to add; if empty, nothing is inserted
       */
      vSelectedColumn: ID | TargetFilterColumn
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
     *
     * This event is fired if the user changes a selected filter set to the filter set used for the last search.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
     *
     * This event is fired if the user changes a selected filter set to the filter set used for the last search.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterChange filterChange} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
     *
     * This event is fired if the user changes a selected filter set.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFilterChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterChange filterChange} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
     *
     * This event is fired if the user changes a selected filter set.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFilterChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
     *
     * This event is fired if the user chooses the Show Selected link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
     *
     * This event is fired if the user chooses the Show Selected link.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the columns in the aggregation {@link #getColumns columns}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyColumns(): this;
    /**
     * Destroys the measureColumn in the aggregation {@link #getMeasureColumn measureColumn}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMeasureColumn(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:filterChange filterChange} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFilterChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.suite.ui.commons.TargetFilter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSearch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:cancel cancel} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:filterChange filterChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFilterChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:search search} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSearch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getColumns columns}.
     *
     * The list of the columns.
     */
    getColumns(): TargetFilterColumn[];
    /**
     * Gets current value of property {@link #getEntitySet entitySet}.
     *
     * The name of the entity set from OData service metadata. The filtering applies to this entity set.
     *
     * @returns Value of property `entitySet`
     */
    getEntitySet(): string;
    /**
     * Returns a selected filter set.
     *
     * @returns The selected filter set.
     */
    getFilters(): any[];
    /**
     * Gets content of aggregation {@link #getMeasureColumn measureColumn}.
     *
     * The measure column.
     */
    getMeasureColumn(): TargetFilterMeasureColumn;
    /**
     * Returns the binding parameters for the controls that use this control.
     *
     * @returns The binding parameters for the controls that use this control.
     */
    getParameters(): object;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getSelectedColumns selectedColumns}.
     */
    getSelectedColumns(): ID[];
    /**
     * Checks for the provided `sap.suite.ui.commons.TargetFilterColumn` in the aggregation {@link #getColumns columns}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfColumn(
      /**
       * The column whose index is looked for
       */
      oColumn: TargetFilterColumn
    ): int;
    /**
     * Inserts a column into the aggregation {@link #getColumns columns}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertColumn(
      /**
       * The column to insert; if empty, nothing is inserted
       */
      oColumn: TargetFilterColumn,
      /**
       * The `0`-based index the column should be inserted at; for a negative value of `iIndex`, the column is
       * inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getColumns columns}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllColumns(): TargetFilterColumn[];
    /**
     * Removes all the controls in the association named {@link #getSelectedColumns selectedColumns}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllSelectedColumns(): ID[];
    /**
     * Removes a column from the aggregation {@link #getColumns columns}.
     *
     * @returns The removed column or `null`
     */
    removeColumn(
      /**
       * The column to remove or its index or id
       */
      vColumn: int | string | TargetFilterColumn
    ): TargetFilterColumn | null;
    /**
     * Removes an selectedColumn from the association named {@link #getSelectedColumns selectedColumns}.
     *
     * @returns The removed selectedColumn or `null`
     */
    removeSelectedColumn(
      /**
       * The selectedColumn to be removed or its index or ID
       */
      vSelectedColumn: int | ID | TargetFilterColumn
    ): ID | null;
    /**
     * Triggers filtering in the controls that use this control. Returns this control for the method chaining.
     *
     * @returns This to allow method chaining
     */
    search(): TargetFilter;
    /**
     * Sets a new value for property {@link #getEntitySet entitySet}.
     *
     * The name of the entity set from OData service metadata. The filtering applies to this entity set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEntitySet(
      /**
       * New value for property `entitySet`
       */
      sEntitySet?: string
    ): this;
    /**
     * Sets the aggregated {@link #getMeasureColumn measureColumn}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMeasureColumn(
      /**
       * The measureColumn to set
       */
      oMeasureColumn: TargetFilterMeasureColumn
    ): this;
  }
  export default TargetFilter;

  export interface $TargetFilterSettings extends $ControlSettings {
    /**
     * The name of the entity set from OData service metadata. The filtering applies to this entity set.
     */
    entitySet?: string | PropertyBindingInfo;

    /**
     * The list of the columns.
     */
    columns?:
      | TargetFilterColumn[]
      | TargetFilterColumn
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * The measure column.
     */
    measureColumn?: TargetFilterMeasureColumn;

    /**
     * The list of selected columns. The index of the columns in this list corresponds to the quadrant.
     */
    selectedColumns?: Array<TargetFilterColumn | string>;

    /**
     * This event is fired if the user chooses the Show Selected link.
     */
    search?: (oEvent: Event) => void;

    /**
     * This event is fired if the user changes a selected filter set.
     */
    filterChange?: (oEvent: Event) => void;

    /**
     * This event is fired if the user changes a selected filter set to the filter set used for the last search.
     */
    cancel?: (oEvent: Event) => void;
  }

  export interface $TargetFilterCancelEventParameters {}

  export interface $TargetFilterFilterChangeEventParameters {}

  export interface $TargetFilterSearchEventParameters {}
}

declare module "sap/suite/ui/commons/TargetFilterColumn" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated.
   *
   * The configuration element for the column in the TargetFilter control.
   */
  class TargetFilterColumn extends UI5Element {
    /**
     * Constructor for a new TargetFilterColumn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TargetFilterColumnSettings
    );
    /**
     * Constructor for a new TargetFilterColumn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TargetFilterColumnSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TargetFilterColumn with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TargetFilterColumn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TargetFilterColumn.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getLength length}.
     *
     * The number of the retrieved entries for the cloud of the links in the quadrant. The quadrant can display
     * fewer links than retrieved. The font size of the links in the quadrant depends on the measure number.
     * The font size of the links is relative in the retrieved group.
     *
     * Default value is `10`.
     *
     * @returns Value of property `length`
     */
    getLength(): int;
    /**
     * Gets current value of property {@link #getPath path}.
     *
     * The binding path.
     *
     * @returns Value of property `path`
     */
    getPath(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The column title.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * The type of the displayed data. The type of the property must be sap.ui.model.SimpleType or its descendants.
     * By default, sap.ui.model.type.String. This property is used for formatting the displayed values. If sap.ui.model.type.String,
     * the filter operator in the Search field of the column selection dialog is 'Contains'. In other cases,
     * the filter operator is 'EQ'.
     *
     * @returns Value of property `type`
     */
    getType(): any;
    /**
     * Sets a new value for property {@link #getLength length}.
     *
     * The number of the retrieved entries for the cloud of the links in the quadrant. The quadrant can display
     * fewer links than retrieved. The font size of the links in the quadrant depends on the measure number.
     * The font size of the links is relative in the retrieved group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `10`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLength(
      /**
       * New value for property `length`
       */
      iLength?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPath path}.
     *
     * The binding path.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPath(
      /**
       * New value for property `path`
       */
      sPath?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The column title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * The type of the displayed data. The type of the property must be sap.ui.model.SimpleType or its descendants.
     * By default, sap.ui.model.type.String. This property is used for formatting the displayed values. If sap.ui.model.type.String,
     * the filter operator in the Search field of the column selection dialog is 'Contains'. In other cases,
     * the filter operator is 'EQ'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      oType?: any
    ): this;
  }
  export default TargetFilterColumn;

  export interface $TargetFilterColumnSettings extends $ElementSettings {
    /**
     * The binding path.
     */
    path?: string | PropertyBindingInfo;

    /**
     * The column title.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The number of the retrieved entries for the cloud of the links in the quadrant. The quadrant can display
     * fewer links than retrieved. The font size of the links in the quadrant depends on the measure number.
     * The font size of the links is relative in the retrieved group.
     */
    length?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * The type of the displayed data. The type of the property must be sap.ui.model.SimpleType or its descendants.
     * By default, sap.ui.model.type.String. This property is used for formatting the displayed values. If sap.ui.model.type.String,
     * the filter operator in the Search field of the column selection dialog is 'Contains'. In other cases,
     * the filter operator is 'EQ'.
     */
    type?: any | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/TargetFilterMeasureColumn" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated.
   *
   * The configuration element for the measure column in the TargetFilter control.
   */
  class TargetFilterMeasureColumn extends UI5Element {
    /**
     * Constructor for a new TargetFilterMeasureColumn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TargetFilterMeasureColumnSettings
    );
    /**
     * Constructor for a new TargetFilterMeasureColumn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TargetFilterMeasureColumnSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TargetFilterMeasureColumn with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TargetFilterMeasureColumn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TargetFilterMeasureColumn.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPath path}.
     *
     * The binding path.
     *
     * @returns Value of property `path`
     */
    getPath(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * This property is used for formatting the displayed values. The type of the property must be sap.ui.model.SimpleType
     * or its descendants. By default, sap.ui.model.type.Integer with enabled grouping.
     *
     * @returns Value of property `type`
     */
    getType(): any;
    /**
     * Sets a new value for property {@link #getPath path}.
     *
     * The binding path.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPath(
      /**
       * New value for property `path`
       */
      sPath?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * This property is used for formatting the displayed values. The type of the property must be sap.ui.model.SimpleType
     * or its descendants. By default, sap.ui.model.type.Integer with enabled grouping.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      oType?: any
    ): this;
  }
  export default TargetFilterMeasureColumn;

  export interface $TargetFilterMeasureColumnSettings extends $ElementSettings {
    /**
     * The binding path.
     */
    path?: string | PropertyBindingInfo;

    /**
     * This property is used for formatting the displayed values. The type of the property must be sap.ui.model.SimpleType
     * or its descendants. By default, sap.ui.model.type.Integer with enabled grouping.
     */
    type?: any | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/ThingCollection" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ThingViewer from "sap/ui/ux3/ThingViewer";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * This control contains a collection of the sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
   * It allows you to navigate through them as well as delete them from the collection.
   */
  class ThingCollection extends Control {
    /**
     * Constructor for a new ThingCollection.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ThingCollectionSettings
    );
    /**
     * Constructor for a new ThingCollection.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ThingCollectionSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ThingCollection with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ThingCollection>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ThingCollection.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: ThingViewer
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Contains a collection of sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
     */
    getContent(): ThingViewer[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the control.
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getMinHeight minHeight}.
     *
     * The minimal height of the control.
     *
     * @returns Value of property `minHeight`
     */
    getMinHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getMinWidth minWidth}.
     *
     * The minimal width of the control.
     *
     * @returns Value of property `minWidth`
     */
    getMinWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the control.
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.ux3.ThingViewer` in the aggregation {@link #getContent content}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: ThingViewer
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: ThingViewer,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllContent(): ThingViewer[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     *
     * @returns The removed content or `null`
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | ThingViewer
    ): ThingViewer | null;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getMinHeight minHeight}.
     *
     * The minimal height of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinHeight(
      /**
       * New value for property `minHeight`
       */
      sMinHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getMinWidth minWidth}.
     *
     * The minimal width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMinWidth(
      /**
       * New value for property `minWidth`
       */
      sMinWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  export default ThingCollection;

  export interface $ThingCollectionSettings extends $ControlSettings {
    /**
     * The width of the control.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The height of the control.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The minimal width of the control.
     */
    minWidth?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The minimal height of the control.
     */
    minHeight?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Contains a collection of sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
     */
    content?:
      | ThingViewer[]
      | ThingViewer
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/ThreePanelThingInspector" {
  import {
    default as ThingInspector,
    $ThingInspectorSettings,
  } from "sap/ui/ux3/ThingInspector";

  import Link from "sap/ui/commons/Link";

  import { URI, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * This control extends the sap.ui.ux3.ThingInspector control. It displays the sap.suite.ui.commons.ThreePanelThingViewer
   * control in the sap.ui.ux3.Overlay control.
   */
  class ThreePanelThingInspector extends ThingInspector {
    /**
     * Constructor for a new ThreePanelThingInspector.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ThreePanelThingInspectorSettings
    );
    /**
     * Constructor for a new ThreePanelThingInspector.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ThreePanelThingInspectorSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingInspector with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.ux3.ThingInspector.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ThreePanelThingInspector>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ThreePanelThingInspector.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some menuContent to the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addMenuContent(
      /**
       * The menuContent to add; if empty, nothing is inserted
       */
      oMenuContent: Link
    ): this;
    /**
     * Destroys all the menuContent in the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMenuContent(): this;
    /**
     * Gets current value of property {@link #getLogo logo}.
     *
     * A URL of the source of the ThingViewer's key visual image.
     *
     * @returns Value of property `logo`
     */
    getLogo(): URI;
    /**
     * Gets content of aggregation {@link #getMenuContent menuContent}.
     *
     * The items of the ThingViewer's Action Menu.
     */
    getMenuContent(): Link[];
    /**
     * Gets current value of property {@link #getShowHeader showHeader}.
     *
     * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showHeader`
     */
    getShowHeader(): boolean;
    /**
     * Gets current value of property {@link #getSidebarWidth sidebarWidth}.
     *
     * The width of the ThingViewer's navigation panel.
     *
     * Default value is `'224px'`.
     *
     * @returns Value of property `sidebarWidth`
     */
    getSidebarWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.commons.Link` in the aggregation {@link #getMenuContent menuContent}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfMenuContent(
      /**
       * The menuContent whose index is looked for
       */
      oMenuContent: Link
    ): int;
    /**
     * Inserts a menuContent into the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertMenuContent(
      /**
       * The menuContent to insert; if empty, nothing is inserted
       */
      oMenuContent: Link,
      /**
       * The `0`-based index the menuContent should be inserted at; for a negative value of `iIndex`, the menuContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the menuContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getMenuContent menuContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllMenuContent(): Link[];
    /**
     * Removes a menuContent from the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns The removed menuContent or `null`
     */
    removeMenuContent(
      /**
       * The menuContent to remove or its index or id
       */
      vMenuContent: int | string | Link
    ): Link | null;
    /**
     * Sets a new value for property {@link #getLogo logo}.
     *
     * A URL of the source of the ThingViewer's key visual image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLogo(
      /**
       * New value for property `logo`
       */
      sLogo?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getShowHeader showHeader}.
     *
     * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowHeader(
      /**
       * New value for property `showHeader`
       */
      bShowHeader?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSidebarWidth sidebarWidth}.
     *
     * The width of the ThingViewer's navigation panel.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'224px'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSidebarWidth(
      /**
       * New value for property `sidebarWidth`
       */
      sSidebarWidth?: CSSSize
    ): this;
  }
  export default ThreePanelThingInspector;

  export interface $ThreePanelThingInspectorSettings
    extends $ThingInspectorSettings {
    /**
     * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
     */
    showHeader?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * A URL of the source of the ThingViewer's key visual image.
     */
    logo?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The width of the ThingViewer's navigation panel.
     */
    sidebarWidth?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The items of the ThingViewer's Action Menu.
     */
    menuContent?: Link[] | Link | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/ThreePanelThingViewer" {
  import {
    default as ThingViewer,
    $ThingViewerSettings,
  } from "sap/ui/ux3/ThingViewer";

  import Link from "sap/ui/commons/Link";

  import { URI, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * This control extends the sap.ui.ux3.ThingViewer control. The first panel can display a thing icon, a
   * title, the Action Menu button, up to two rows of text descriptions (the first is wrapped, the second
   * is truncated), vertical navigation bar (sap.suite.ui.commons.VerticalNavigationBar), and an image aka
   * key visual. The second panel displays the header area as a vertical panel containing ThingGroup objects.
   * The third panel is a main content area designed to display ThingGroup objects.
   */
  class ThreePanelThingViewer extends ThingViewer {
    /**
     * Constructor for a new ThreePanelThingViewer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ThreePanelThingViewerSettings
    );
    /**
     * Constructor for a new ThreePanelThingViewer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ThreePanelThingViewerSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingViewer with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.ux3.ThingViewer.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ThreePanelThingViewer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ThreePanelThingViewer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some menuContent to the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addMenuContent(
      /**
       * The menuContent to add; if empty, nothing is inserted
       */
      oMenuContent: Link
    ): this;
    /**
     * Destroys all the menuContent in the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMenuContent(): this;
    /**
     * Gets current value of property {@link #getLogo logo}.
     *
     * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
     *
     * @returns Value of property `logo`
     */
    getLogo(): URI;
    /**
     * Gets content of aggregation {@link #getMenuContent menuContent}.
     *
     * This aggregation allows you to add sap.ui.commons.Link items to the Action Menu. The menu appears as
     * a popup when a user chooses a button in the top title section of the navigation panel.
     */
    getMenuContent(): Link[];
    /**
     * Gets current value of property {@link #getShowHeader showHeader}.
     *
     * Shows or hides a middle panel named Header that contains general information.
     *
     * @returns Value of property `showHeader`
     */
    getShowHeader(): boolean;
    /**
     * Gets current value of property {@link #getSidebarWidth sidebarWidth}.
     *
     * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default
     * value is "244px".
     *
     * Default value is `'244px'`.
     *
     * @returns Value of property `sidebarWidth`
     */
    getSidebarWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.commons.Link` in the aggregation {@link #getMenuContent menuContent}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfMenuContent(
      /**
       * The menuContent whose index is looked for
       */
      oMenuContent: Link
    ): int;
    /**
     * Inserts a menuContent into the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertMenuContent(
      /**
       * The menuContent to insert; if empty, nothing is inserted
       */
      oMenuContent: Link,
      /**
       * The `0`-based index the menuContent should be inserted at; for a negative value of `iIndex`, the menuContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the menuContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getMenuContent menuContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllMenuContent(): Link[];
    /**
     * Removes a menuContent from the aggregation {@link #getMenuContent menuContent}.
     *
     * @returns The removed menuContent or `null`
     */
    removeMenuContent(
      /**
       * The menuContent to remove or its index or id
       */
      vMenuContent: int | string | Link
    ): Link | null;
    /**
     * Sets a new value for property {@link #getLogo logo}.
     *
     * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLogo(
      /**
       * New value for property `logo`
       */
      sLogo?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getShowHeader showHeader}.
     *
     * Shows or hides a middle panel named Header that contains general information.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowHeader(
      /**
       * New value for property `showHeader`
       */
      bShowHeader?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSidebarWidth sidebarWidth}.
     *
     * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default
     * value is "244px".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'244px'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSidebarWidth(
      /**
       * New value for property `sidebarWidth`
       */
      sSidebarWidth?: CSSSize
    ): this;
  }
  export default ThreePanelThingViewer;

  export interface $ThreePanelThingViewerSettings extends $ThingViewerSettings {
    /**
     * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
     */
    logo?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Shows or hides a middle panel named Header that contains general information.
     */
    showHeader?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default
     * value is "244px".
     */
    sidebarWidth?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * This aggregation allows you to add sap.ui.commons.Link items to the Action Menu. The menu appears as
     * a popup when a user chooses a button in the top title section of the navigation panel.
     */
    menuContent?: Link[] | Link | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/suite/ui/commons/TileContent" {
  import {
    default as TileContent1,
    $TileContentSettings as $TileContentSettings1,
  } from "sap/m/TileContent";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.34) - this control is a mere wrapper for sap.m.TileContent.
   *
   * This control serves a universal container for different types of content and footer.
   */
  class TileContent extends TileContent1 {
    /**
     * Constructor for a new TileContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.TileContent#constructor sap.m.TileContent }
     * can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TileContentSettings
    );
    /**
     * Constructor for a new TileContent.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.TileContent#constructor sap.m.TileContent }
     * can be used.
     */
    constructor(
      /**
       * ID for the new control, automatically generated if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TileContentSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TileContent with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.TileContent.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TileContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TileContent.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default TileContent;

  export interface $TileContentSettings extends $TileContentSettings1 {}
}

declare module "sap/suite/ui/commons/TileContent2X2" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { InfoTileSize } from "sap/suite/ui/commons/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.34) - Deprecated.
   *
   * This control serves a universal container for different types of content and footer.
   */
  class TileContent2X2 extends Control {
    /**
     * Constructor for a new TileContent2X2.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TileContent2X2Settings
    );
    /**
     * Constructor for a new TileContent2X2.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TileContent2X2Settings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TileContent2X2 with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TileContent2X2>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TileContent2X2.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The switchable view that depends on the tile type.
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Disables control if true.
     *
     * Default value is `false`.
     *
     * @returns Value of property `disabled`
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFooter footer}.
     *
     * The footer text of the tile.
     *
     * @returns Value of property `footer`
     */
    getFooter(): string;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Updates the size of the tile. If not set then the default size is applied based on the device tile.
     *
     * Default value is `"Auto"`.
     *
     * @returns Value of property `size`
     */
    getSize(): InfoTileSize | keyof typeof InfoTileSize;
    /**
     * Gets current value of property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     *
     * @returns Value of property `unit`
     */
    getUnit(): string;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Disables control if true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFooter footer}.
     *
     * The footer text of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFooter(
      /**
       * New value for property `footer`
       */
      sFooter?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Updates the size of the tile. If not set then the default size is applied based on the device tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: InfoTileSize | keyof typeof InfoTileSize
    ): this;
    /**
     * Sets a new value for property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUnit(
      /**
       * New value for property `unit`
       */
      sUnit?: string
    ): this;
  }
  export default TileContent2X2;

  export interface $TileContent2X2Settings extends $ControlSettings {
    /**
     * The footer text of the tile.
     */
    footer?: string | PropertyBindingInfo;

    /**
     * Updates the size of the tile. If not set then the default size is applied based on the device tile.
     */
    size?:
      | (InfoTileSize | keyof typeof InfoTileSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The percent sign, the currency symbol, or the unit of measure.
     */
    unit?: string | PropertyBindingInfo;

    /**
     * Disables control if true.
     */
    disabled?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The switchable view that depends on the tile type.
     */
    content?: Control;
  }
}

declare module "sap/suite/ui/commons/Timeline" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, CSSSize } from "sap/ui/core/library";

  import TimelineItem from "sap/suite/ui/commons/TimelineItem";

  import TimelineFilterListItem from "sap/suite/ui/commons/TimelineFilterListItem";

  import StandardListItem from "sap/m/StandardListItem";

  import Event from "sap/ui/base/Event";

  import {
    default as ManagedObject,
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import {
    TimelineAlignment,
    TimelineAxisOrientation,
    TimelineGroupType,
    TimelineScrollingFadeout,
    TimelineFilterType,
  } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Filter from "sap/ui/model/Filter";

  import Item from "sap/ui/core/Item";

  /**
   * The timeline control shows entries (such as objects, events, or posts) in chronological order.
   * A common use case is to provide information about changes to an object, or events related to an object.
   * These entries can be generated by the system (for example, value XY changed from A to B), or added manually.
   *
   * There are two distinct variants of the timeline: basic and social. The basic timeline is read-only, while
   * the social timeline offers a high level of interaction and collaboration.
   */
  class Timeline extends Control {
    /**
     * Constructor for a new Timeline.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimelineSettings
    );
    /**
     * Constructor for a new Timeline.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimelineSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.Timeline with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Timeline>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.Timeline.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: TimelineItem
    ): this;
    /**
     * Adds some filterList to the aggregation {@link #getFilterList filterList}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFilterList(
      /**
       * The filterList to add; if empty, nothing is inserted
       */
      oFilterList: TimelineFilterListItem
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addSuggestionItem(
      /**
       * The suggestionItem to add; if empty, nothing is inserted
       */
      oSuggestionItem: StandardListItem
    ): this;
    /**
     * Refreshes the UI.
     */
    adjustUI(): void;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:addPost addPost} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when a new post is added. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAddPost(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineAddPostEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:addPost addPost} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when a new post is added. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAddPost(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineAddPostEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customMessageClosed customMessageClosed} event
     * of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the user clicks the Close button on a message strip.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomMessageClosed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customMessageClosed customMessageClosed} event
     * of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the user clicks the Close button on a message strip.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomMessageClosed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterOpen filterOpen} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the user clicks the filter icon in the timeline toolbar and opens the filter.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFilterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterOpen filterOpen} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the user clicks the filter icon in the timeline toolbar and opens the filter.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFilterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterSelectionChange filterSelectionChange }
     * event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when filtering is applied to timeline posts or when a search term is entered into
     * the search field. This event can be fired only if the enableModelFilter property is set to `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFilterSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineFilterSelectionChangeEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterSelectionChange filterSelectionChange }
     * event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when filtering is applied to timeline posts or when a search term is entered into
     * the search field. This event can be fired only if the enableModelFilter property is set to `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFilterSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineFilterSelectionChangeEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:grow grow} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the "More" button is clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachGrow(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:grow grow} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the "More" button is clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachGrow(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemFiltering itemFiltering} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired for every timeline post when data filtering is being applied. It indicates whether
     * this post is included in the filtering and why. Can be used only when the enableModelFilter property
     * is set to `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachItemFiltering(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemFilteringEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemFiltering itemFiltering} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired for every timeline post when data filtering is being applied. It indicates whether
     * this post is included in the filtering and why. Can be used only when the enableModelFilter property
     * is set to `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachItemFiltering(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemFilteringEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when a timeline post is selected.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineSelectEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when a timeline post is selected.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineSelectEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the user enters text into the search field, in cases when the showSuggestion
     * property is set to `true`. Changing the suggestionItems aggregation will show the suggestions inside
     * a popup.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggest(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineSuggestEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when the user enters text into the search field, in cases when the showSuggestion
     * property is set to `true`. Changing the suggestionItems aggregation will show the suggestions inside
     * a popup.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggest(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineSuggestEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected }
     * event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when a suggested post is selected in the suggestions popup list. This event is only
     * fired when the showSuggestion property is set to `true` and there is at least one post in the suggestions
     * popup list. See also the suggestionItems aggregation.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggestionItemSelected(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineSuggestionItemSelectedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected }
     * event of this `sap.suite.ui.commons.Timeline`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
     *
     * This event is fired when a suggested post is selected in the suggestions popup list. This event is only
     * fired when the showSuggestion property is set to `true` and there is at least one post in the suggestions
     * popup list. See also the suggestionItems aggregation.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggestionItemSelected(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineSuggestionItemSelectedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the customFilter in the aggregation {@link #getCustomFilter customFilter}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomFilter(): this;
    /**
     * Destroys all the filterList in the aggregation {@link #getFilterList filterList}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFilterList(): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySuggestionItems(): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:addPost addPost} event of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAddPost(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$TimelineAddPostEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:customMessageClosed customMessageClosed} event
     * of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCustomMessageClosed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:filterOpen filterOpen} event of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFilterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:filterSelectionChange filterSelectionChange }
     * event of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFilterSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineFilterSelectionChangeEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:grow grow} event of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachGrow(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemFiltering itemFiltering} event of this
     * `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachItemFiltering(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemFilteringEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$TimelineSelectEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * Detaches event handler `fnFunction` from the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSuggest(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$TimelineSuggestEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * Detaches event handler `fnFunction` from the {@link #event:suggestionItemSelected suggestionItemSelected }
     * event of this `sap.suite.ui.commons.Timeline`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSuggestionItemSelected(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineSuggestionItemSelectedEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Cleans up the element instance before destruction
     */
    exit(): void;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:addPost addPost} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAddPost(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineAddPostEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:customMessageClosed customMessageClosed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCustomMessageClosed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:filterOpen filterOpen} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFilterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:filterSelectionChange filterSelectionChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFilterSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineFilterSelectionChangeEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:grow grow} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireGrow(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:itemFiltering itemFiltering} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireItemFiltering(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineItemFilteringEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:select select} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineSelectEventParameters
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:suggest suggest} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSuggest(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineSuggestEventParameters
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:suggestionItemSelected suggestionItemSelected} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSuggestionItemSelected(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineSuggestionItemSelectedEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * An override which exposes hidden aggregations. Hidden aggregations are used by Run Time Adaptation.
     *
     * @returns the aggregation array in case of 0..n-aggregations or the managed object or null in case of
     * 0..1-aggregations
     */
    getAggregation(
      /**
       * the name of the aggregation
       */
      sAggregationName: string
    ): ManagedObject | ManagedObject[] | null;
    /**
     * Gets current value of property {@link #getAlignment alignment}.
     *
     * Defines the alignment of timeline posts relative to the timeline axis. This option can be used for single-sided
     * timelines only. If the axisOrientation property is set to ` Horizontal`, the `Right` value is interpreted
     * as bottom alignment and the `Left` value as top alignment.
     *
     * Default value is `"Right"`.
     *
     * @returns Value of property `alignment`
     */
    getAlignment(): TimelineAlignment | keyof typeof TimelineAlignment;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getAxisOrientation axisOrientation}.
     *
     * Defines the orientation of the timeline. Can be set to `Vertical` or `Horizontal`.
     *
     * Default value is `"Vertical"`.
     *
     * @returns Value of property `axisOrientation`
     */
    getAxisOrientation():
      | TimelineAxisOrientation
      | keyof typeof TimelineAxisOrientation;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * List of timeline posts.
     */
    getContent(): TimelineItem[];
    /**
     * Returns the keys of the currently applied filter criteria as an array of objects, containing filter criteria
     * keys (`key`) and values (`text`).
     *
     * @returns List Applied filters
     */
    getCurrentFilter(): any[];
    /**
     * Gets content of aggregation {@link #getCustomFilter customFilter}.
     *
     * A custom filter to be used instead of the default item filter. This control must have an `openBy` or
     * `open` function that is used by the timeline to open the control. If the control has both functions,
     * `openBy` is used.
     */
    getCustomFilter(): Control;
    /**
     * @deprecated (since 1.46.0) - As of version 1.46, this property was replaced by JSONModel context binding.
     *
     * Gets current value of property {@link #getData data}.
     *
     * Data for the Timeline control.
     *
     * @returns Value of property `data`
     */
    getData(): object;
    /**
     * Gets current value of property {@link #getDateTimePath dateTimePath}.
     *
     * Path for dateTime in mode binding. Use this property when you use factory function for `TimeLineItem`
     * creation. When every item has different path or the `datetime` is calculated in factory sorting, filtering
     * and searching has to be done manually using events. If not set for factory binding filter and sorting
     * won't work.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `dateTimePath`
     */
    getDateTimePath(): string;
    /**
     * @deprecated (since 1.46.0) - The filter list now includes a Select All check box, so the All radio button
     * is no longer required. This property is ignored.
     *
     * Gets current value of property {@link #getEnableAllInFilterItem enableAllInFilterItem}.
     *
     * Enables to add 'All' at the beginning of the filter list.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableAllInFilterItem`
     */
    getEnableAllInFilterItem(): boolean;
    /**
     * @deprecated (since 1.46.0) - Use the enableModelFilter property instead.
     *
     * Gets current value of property {@link #getEnableBackendFilter enableBackendFilter}.
     *
     * Enables fetching data from backend instead of deriving filter values from the frontend values (displayed
     * list). As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getEnableModelFilter}.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableBackendFilter`
     */
    getEnableBackendFilter(): boolean;
    /**
     * Gets current value of property {@link #getEnableBusyIndicator enableBusyIndicator}.
     *
     * When this property is set to `true`, the timeline displays a busy indicator when loading data. This busy
     * indicator blocks the interaction with the items until the data loading is complete. It is strongly recommended
     * to use this option. Loading data without a busy indicator may confuse the users.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableBusyIndicator`
     */
    getEnableBusyIndicator(): boolean;
    /**
     * Gets current value of property {@link #getEnableDoubleSided enableDoubleSided}.
     *
     * If set to `true`, timeline posts are displayed on both sides of the timeline axis.
     *
     * Default value is `false`.
     *
     * @returns Value of property `enableDoubleSided`
     */
    getEnableDoubleSided(): boolean;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getEnableModelFilter enableModelFilter}.
     *
     * Enables filtering directly on the binding level. If set to `true`, all filters are translated into the
     * filters in the model binding. When the OData model is used, the filtering is performed on the backend
     * side. This option is strongly recommended. If set to `false`, all entries from the model need to be fetched
     * before they can be filtered on the frontend side. Please be aware that the `growingThreshold` property
     * determines how many entries can be rendered. Timeline requests all entries from the model before it performs
     * the filtering. Some models may have internal limits for the number of entries that can be used in bindings.
     * Such limits can be set using {@link sap.ui.model.Model#setSizeLimit}.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableModelFilter`
     */
    getEnableModelFilter(): boolean;
    /**
     * Gets current value of property {@link #getEnableScroll enableScroll}.
     *
     * If set to `true`, the Timeline control has its own scroll bar, with the scrolling taking place within
     * the Timeline control itself. Scrolling is required if you want to enable the lazyLoading property.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enableScroll`
     */
    getEnableScroll(): boolean;
    /**
     * Gets current value of property {@link #getEnableSocial enableSocial}.
     *
     * Adds a Reply link to the posts on a social timeline that allows users to reply to posts. When
     * a user adds a reply, an event is fired. This event should be handled by external code.
     *
     * Default value is `false`.
     *
     * @returns Value of property `enableSocial`
     */
    getEnableSocial(): boolean;
    /**
     * Gets content of aggregation {@link #getFilterList filterList}.
     *
     * Custom filter criteria for the items filter.
     */
    getFilterList(): TimelineFilterListItem[];
    /**
     * Gets current value of property {@link #getFilterTitle filterTitle}.
     *
     * Title for the data filter. When a filter is applied, this title is displayed in the message strip along
     * with the filter name.
     *
     * @returns Value of property `filterTitle`
     */
    getFilterTitle(): string;
    /**
     * Gets current value of property {@link #getForceGrowing forceGrowing}.
     *
     * If set to `true`, the Show More button is displayed when the user scrolls along the timeline axis.
     *
     * Default value is `false`.
     *
     * @returns Value of property `forceGrowing`
     */
    getForceGrowing(): boolean;
    /**
     * @deprecated (since 1.46.0) - Use the groupByType property instead.
     *
     * Gets current value of property {@link #getGroup group}.
     *
     * Groups the timeline posts by year. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGroupByType}.
     *
     * Default value is `false`.
     *
     * @returns Value of property `group`
     */
    getGroup(): boolean;
    /**
     * Gets current value of property {@link #getGroupBy groupBy}.
     *
     * Groups the timeline posts by a field. Only fields that contain date values are supported.
     *
     * @returns Value of property `groupBy`
     */
    getGroupBy(): string;
    /**
     * Gets current value of property {@link #getGroupByType groupByType}.
     *
     * Groups the timeline posts by a time period, including year, quarter, month, week, and day. If set to
     * `None`, no grouping is applied. If you specify a custom grouping function using the {@link sap.suite.ui.commons.Timeline#setCustomGrouping }
     * method, this function overrides the groupByType property settings.
     *
     * Default value is `"None"`.
     *
     * @returns Value of property `groupByType`
     */
    getGroupByType(): TimelineGroupType | keyof typeof TimelineGroupType;
    /**
     * Returns all group items.
     *
     * @returns Timeline groups
     */
    getGroups(): Control[];
    /**
     * @deprecated (since 1.46.0) - Use the growingThreshold property instead, setting it to 0 to disable growing.
     *
     * Gets current value of property {@link #getGrowing growing}.
     *
     * If set to `true`, the timeline displays a limited number of posts with a button to show more. The displayed
     * posts limit can be set using the growingThreshold property. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGrowingThreshold}.
     *
     * Default value is `true`.
     *
     * @returns Value of property `growing`
     */
    getGrowing(): boolean;
    /**
     * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
     *
     * Number of posts requested from the server at a time. Each time when the timeline needs to load more posts,
     * it will request exactly this amount. The number of posts displayed in the timeline is increased by this
     * number. If set to `0`, all posts are fetched and displayed on the initial load.
     *
     * Default value is `5`.
     *
     * @returns Value of property `growingThreshold`
     */
    getGrowingThreshold(): int;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getHeight height}.
     *
     * Sets the height of the Timeline.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getLazyLoading lazyLoading}.
     *
     * Enables the Lazy Loading feature that automatically loads more posts as the user scrolls along the timeline
     * axis. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
     *
     * Default value is `false`.
     *
     * @returns Value of property `lazyLoading`
     */
    getLazyLoading(): boolean;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * This text is displayed when the control has no data. The default value is loaded from the component resource
     * bundle.
     *
     * @returns Value of property `noDataText`
     */
    getNoDataText(): string;
    /**
     * @SINCE 1.46.0
     * @deprecated (since 1.54.0) - Not Fiori.
     *
     * Gets current value of property {@link #getScrollingFadeout scrollingFadeout}.
     *
     * If set to `Area`, the timeline fades into the visible area margin. If set to `AreaWithButtons`, the timeline
     * fades into the visible area margin and scroll buttons are displayed. If set to `None`, the fading effect
     * is not applied. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
     *
     * Default value is `"None"`.
     *
     * @returns Value of property `scrollingFadeout`
     */
    getScrollingFadeout():
      | TimelineScrollingFadeout
      | keyof typeof TimelineScrollingFadeout;
    /**
     * @deprecated (since 1.46.0) - Use the showHeaderBar property instead.
     *
     * Gets current value of property {@link #getShowFilterBar showFilterBar}.
     *
     * Sets the visibility of the filter in the timeline toolbar.
     *  As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getShowHeaderBar}.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showFilterBar`
     */
    getShowFilterBar(): boolean;
    /**
     * Gets current value of property {@link #getShowHeaderBar showHeaderBar}.
     *
     * Shows the timeline toolbar with search and filter options.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showHeaderBar`
     */
    getShowHeaderBar(): boolean;
    /**
     * Gets current value of property {@link #getShowIcons showIcons}.
     *
     * Shows an icon on the timeline axis as an anchor for each entry node. If set to `false`, all icons are
     * replaced by dots.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showIcons`
     */
    getShowIcons(): boolean;
    /**
     * Gets current value of property {@link #getShowItemFilter showItemFilter}.
     *
     * Show item filter in filter area.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showItemFilter`
     */
    getShowItemFilter(): boolean;
    /**
     * Gets current value of property {@link #getShowSearch showSearch}.
     *
     * Sets the search field visibility on the timeline toolbar.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showSearch`
     */
    getShowSearch(): boolean;
    /**
     * Gets current value of property {@link #getShowSort showSort}.
     *
     * Show sort icon in the header bar. For displaying this icon, sorting have to be allowed.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showSort`
     */
    getShowSort(): boolean;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Gets current value of property {@link #getShowSuggestion showSuggestion}.
     *
     * If set to `true`, a suggest event is fired when the user enters text into the search field. Changing
     * the suggestionItems aggregation in the suggest event listener will display suggestions inside a popup.
     * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showSuggestion`
     */
    getShowSuggestion(): boolean;
    /**
     * Gets current value of property {@link #getShowTimeFilter showTimeFilter}.
     *
     * Shows the time range filter in the filter menu.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showTimeFilter`
     */
    getShowTimeFilter(): boolean;
    /**
     * Gets current value of property {@link #getSort sort}.
     *
     * Indicates whether the data should be sorted. If set to `false` the data model's default sorting is applied.
     *
     * Default value is `true`.
     *
     * @returns Value of property `sort`
     */
    getSort(): boolean;
    /**
     * Gets current value of property {@link #getSortOldestFirst sortOldestFirst}.
     *
     * Whether the oldest item will be displayed first.
     *
     * Default value is `false`.
     *
     * @returns Value of property `sortOldestFirst`
     */
    getSortOldestFirst(): boolean;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Items for suggestions. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    getSuggestionItems(): StandardListItem[];
    /**
     * Gets current value of property {@link #getTextHeight textHeight}.
     *
     * Height of the timeline posts. It can be set to either of the following types of values:
     * 	 -  Automatic – If set to `automatic`, the optimal post height is calculated automatically to
     *     fit the timeline height specified by the height parameter. This option works only in horizontal timelines
     *     and only when the timeline height is defined. In vertical timelines, this setting is ignored.
     * 	 -  Number – If set to a number, a corresponding number of text lines is displayed in every post.
     *
     * 	 -  Pixels – If set to a number followed by `px`, such as `50px`, the closest number in lines
     *     is calculated and applied to the timeline posts, so that the post height corresponds to the specified
     *     number of pixels and the text lines are not cut off in the middle of a line.
     * 	 -  Any other valid {@link sap.ui.core.CSSSize CSSSize} value that is inserted into the text wrapper
     *     without being changed.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `textHeight`
     */
    getTextHeight(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the Timeline.
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.suite.ui.commons.TimelineItem` in the aggregation {@link #getContent content}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: TimelineItem
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.TimelineFilterListItem` in the aggregation {@link #getFilterList filterList}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFilterList(
      /**
       * The filterList whose index is looked for
       */
      oFilterList: TimelineFilterListItem
    ): int;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Checks for the provided `sap.m.StandardListItem` in the aggregation {@link #getSuggestionItems suggestionItems}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfSuggestionItem(
      /**
       * The suggestionItem whose index is looked for
       */
      oSuggestionItem: StandardListItem
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: TimelineItem,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a filterList into the aggregation {@link #getFilterList filterList}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFilterList(
      /**
       * The filterList to insert; if empty, nothing is inserted
       */
      oFilterList: TimelineFilterListItem,
      /**
       * The `0`-based index the filterList should be inserted at; for a negative value of `iIndex`, the filterList
       * is inserted at position 0; for a value greater than the current size of the aggregation, the filterList
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertSuggestionItem(
      /**
       * The suggestionItem to insert; if empty, nothing is inserted
       */
      oSuggestionItem: StandardListItem,
      /**
       * The `0`-based index the suggestionItem should be inserted at; for a negative value of `iIndex`, the suggestionItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllContent(): TimelineItem[];
    /**
     * Removes all the controls from the aggregation {@link #getFilterList filterList}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFilterList(): TimelineFilterListItem[];
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllSuggestionItems(): StandardListItem[];
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns The removed ariaLabelledBy or `null`
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID | null;
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     *
     * @returns The removed content or `null`
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | TimelineItem
    ): TimelineItem | null;
    /**
     * Removes a filterList from the aggregation {@link #getFilterList filterList}.
     *
     * @returns The removed filterList or `null`
     */
    removeFilterList(
      /**
       * The filterList to remove or its index or id
       */
      vFilterList: int | string | TimelineFilterListItem
    ): TimelineFilterListItem | null;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns The removed suggestionItem or `null`
     */
    removeSuggestionItem(
      /**
       * The suggestionItem to remove or its index or id
       */
      vSuggestionItem: int | string | StandardListItem
    ): StandardListItem | null;
    /**
     * Reset all internal settings. Use if you want the same instance with different data.
     */
    reset(): void;
    /**
     * Resets the start date and end date of the timeline, so that they are calculated once again. Call this
     * method when changing the date of a timeline post.
     */
    resetTimeLimits(): void;
    /**
     * Sets a new value for property {@link #getAlignment alignment}.
     *
     * Defines the alignment of timeline posts relative to the timeline axis. This option can be used for single-sided
     * timelines only. If the axisOrientation property is set to ` Horizontal`, the `Right` value is interpreted
     * as bottom alignment and the `Left` value as top alignment.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Right"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAlignment(
      /**
       * New value for property `alignment`
       */
      sAlignment?: TimelineAlignment | keyof typeof TimelineAlignment
    ): this;
    /**
     * Sets a new value for property {@link #getAxisOrientation axisOrientation}.
     *
     * Defines the orientation of the timeline. Can be set to `Vertical` or `Horizontal`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Vertical"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAxisOrientation(
      /**
       * New value for property `axisOrientation`
       */
      sAxisOrientation?:
        | TimelineAxisOrientation
        | keyof typeof TimelineAxisOrientation
    ): this;
    /**
     * Sets filter criteria keys.
     */
    setCurrentFilter(
      /**
       * Filter criteria keys to select. Can be also used as a single value.
       */
      aSelectedItemKeys: string[]
    ): void;
    /**
     * Sets values for the search field.
     */
    setCurrentSearch(
      /**
       * Search term value.
       */
      sSearchTerm: string
    ): void;
    /**
     * Sets values for the time range filter.
     */
    setCurrentTimeFilter(
      /**
       * Time filter arguments
       */
      mArguments?: {
        /**
         * Start date of the time range filter.
         */
        from?: Date;
        /**
         * End date of the time range filter.
         */
        to?: Date;
        /**
         * The step of the time range filter scale. Can be set to day, month, quarter, or year. Week is currently
         * not supported.
         */
        type?: TimelineGroupType | keyof typeof TimelineGroupType;
      }
    ): void;
    /**
     * Sets the aggregated {@link #getCustomFilter customFilter}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCustomFilter(
      /**
       * The customFilter to set
       */
      oCustomFilter: Control
    ): this;
    /**
     * Sets a custom message for the filter message strip. This message is appended to the default filter text.
     */
    setCustomFilterMessage(
      /**
       * Message to append.
       */
      sMessage: string
    ): void;
    /**
     * Sets custom grouping function. This function must have one parameter that is a date object. This date
     * object is used for grouping timeline posts. The function should return an object that has three properties:
     *
     * 	 -  `key` – The key of the related group.
     * 	 -  `title` – The title of the related group.
     * 	 -  `date` – The same value as the one entered in the input parameter.
     */
    setCustomGrouping(
      /**
       * Grouping function.
       */
      fnGroupBy: Function
    ): void;
    /**
     * Sets a custom message that is displayed below the timeline's header.
     */
    setCustomMessage(
      /**
       * Message text.
       */
      sMsg: string
    ): void;
    /**
     * Adds a custom filter in addition to the default filters: items filter, time range filter, and search.
     */
    setCustomModelFilter(
      /**
       * A unique filter ID that the caller can use to manipulate the filter after it has been created, for example,
       * to remove it.
       */
      sFilterId: string,
      /**
       * Filter object.
       */
      oFilter: Filter
    ): void;
    /**
     * @deprecated (since 1.46.0) - As of version 1.46, this property was replaced by JSONModel context binding.
     *
     * Sets a new value for property {@link #getData data}.
     *
     * Data for the Timeline control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setData(
      /**
       * New value for property `data`
       */
      oData?: object
    ): this;
    /**
     * Sets a new value for property {@link #getDateTimePath dateTimePath}.
     *
     * Path for dateTime in mode binding. Use this property when you use factory function for `TimeLineItem`
     * creation. When every item has different path or the `datetime` is calculated in factory sorting, filtering
     * and searching has to be done manually using events. If not set for factory binding filter and sorting
     * won't work.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDateTimePath(
      /**
       * New value for property `dateTimePath`
       */
      sDateTimePath?: string
    ): this;
    /**
     * @deprecated (since 1.46.0) - The filter list now includes a Select All check box, so the All radio button
     * is no longer required. This property is ignored.
     *
     * Sets a new value for property {@link #getEnableAllInFilterItem enableAllInFilterItem}.
     *
     * Enables to add 'All' at the beginning of the filter list.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableAllInFilterItem(
      /**
       * New value for property `enableAllInFilterItem`
       */
      bEnableAllInFilterItem?: boolean
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the enableModelFilter property instead.
     *
     * Sets a new value for property {@link #getEnableBackendFilter enableBackendFilter}.
     *
     * Enables fetching data from backend instead of deriving filter values from the frontend values (displayed
     * list). As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getEnableModelFilter}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableBackendFilter(
      /**
       * New value for property `enableBackendFilter`
       */
      bEnableBackendFilter?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableBusyIndicator enableBusyIndicator}.
     *
     * When this property is set to `true`, the timeline displays a busy indicator when loading data. This busy
     * indicator blocks the interaction with the items until the data loading is complete. It is strongly recommended
     * to use this option. Loading data without a busy indicator may confuse the users.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableBusyIndicator(
      /**
       * New value for property `enableBusyIndicator`
       */
      bEnableBusyIndicator?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableDoubleSided enableDoubleSided}.
     *
     * If set to `true`, timeline posts are displayed on both sides of the timeline axis.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableDoubleSided(
      /**
       * New value for property `enableDoubleSided`
       */
      bEnableDoubleSided?: boolean
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getEnableModelFilter enableModelFilter}.
     *
     * Enables filtering directly on the binding level. If set to `true`, all filters are translated into the
     * filters in the model binding. When the OData model is used, the filtering is performed on the backend
     * side. This option is strongly recommended. If set to `false`, all entries from the model need to be fetched
     * before they can be filtered on the frontend side. Please be aware that the `growingThreshold` property
     * determines how many entries can be rendered. Timeline requests all entries from the model before it performs
     * the filtering. Some models may have internal limits for the number of entries that can be used in bindings.
     * Such limits can be set using {@link sap.ui.model.Model#setSizeLimit}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableModelFilter(
      /**
       * New value for property `enableModelFilter`
       */
      bEnableModelFilter?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableScroll enableScroll}.
     *
     * If set to `true`, the Timeline control has its own scroll bar, with the scrolling taking place within
     * the Timeline control itself. Scrolling is required if you want to enable the lazyLoading property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableScroll(
      /**
       * New value for property `enableScroll`
       */
      bEnableScroll?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableSocial enableSocial}.
     *
     * Adds a Reply link to the posts on a social timeline that allows users to reply to posts. When
     * a user adds a reply, an event is fired. This event should be handled by external code.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnableSocial(
      /**
       * New value for property `enableSocial`
       */
      bEnableSocial?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFilterTitle filterTitle}.
     *
     * Title for the data filter. When a filter is applied, this title is displayed in the message strip along
     * with the filter name.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFilterTitle(
      /**
       * New value for property `filterTitle`
       */
      sFilterTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getForceGrowing forceGrowing}.
     *
     * If set to `true`, the Show More button is displayed when the user scrolls along the timeline axis.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setForceGrowing(
      /**
       * New value for property `forceGrowing`
       */
      bForceGrowing?: boolean
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the groupByType property instead.
     *
     * Sets a new value for property {@link #getGroup group}.
     *
     * Groups the timeline posts by year. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGroupByType}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroup(
      /**
       * New value for property `group`
       */
      bGroup?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGroupBy groupBy}.
     *
     * Groups the timeline posts by a field. Only fields that contain date values are supported.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroupBy(
      /**
       * New value for property `groupBy`
       */
      sGroupBy?: string
    ): this;
    /**
     * Sets a new value for property {@link #getGroupByType groupByType}.
     *
     * Groups the timeline posts by a time period, including year, quarter, month, week, and day. If set to
     * `None`, no grouping is applied. If you specify a custom grouping function using the {@link sap.suite.ui.commons.Timeline#setCustomGrouping }
     * method, this function overrides the groupByType property settings.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroupByType(
      /**
       * New value for property `groupByType`
       */
      sGroupByType?: TimelineGroupType | keyof typeof TimelineGroupType
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the growingThreshold property instead, setting it to 0 to disable growing.
     *
     * Sets a new value for property {@link #getGrowing growing}.
     *
     * If set to `true`, the timeline displays a limited number of posts with a button to show more. The displayed
     * posts limit can be set using the growingThreshold property. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGrowingThreshold}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGrowing(
      /**
       * New value for property `growing`
       */
      bGrowing?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGrowingThreshold growingThreshold}.
     *
     * Number of posts requested from the server at a time. Each time when the timeline needs to load more posts,
     * it will request exactly this amount. The number of posts displayed in the timeline is increased by this
     * number. If set to `0`, all posts are fetched and displayed on the initial load.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `5`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGrowingThreshold(
      /**
       * New value for property `growingThreshold`
       */
      iGrowingThreshold?: int
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getHeight height}.
     *
     * Sets the height of the Timeline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getLazyLoading lazyLoading}.
     *
     * Enables the Lazy Loading feature that automatically loads more posts as the user scrolls along the timeline
     * axis. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLazyLoading(
      /**
       * New value for property `lazyLoading`
       */
      bLazyLoading?: boolean
    ): this;
    /**
     * Replaces one of the default filters: items filter, time range filter, or search.
     */
    setModelFilter(
      /**
       * The object containing settings
       */
      mArguments: {
        /**
         * Type of the filter to replace.
         */
        type: TimelineFilterType | keyof typeof TimelineFilterType;
        /**
         * Filter object to specify the filter criteria.
         */
        filter: Filter;
        /**
         * If set to `true` (default), filters are automatically recreated, and the content is updated.
         */
        refresh: boolean;
      }
    ): void;
    /**
     * Sets the message displayed in the filter message strip. This message overwrites the default filter message.
     */
    setModelFilterMessage(
      /**
       * Filter type. Supports only items filter (`Data`) and time range filter (`Time`).
       */
      sType: TimelineFilterType | keyof typeof TimelineFilterType,
      /**
       * The message that should replace the default message.
       */
      sMessage: string
    ): void;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * This text is displayed when the control has no data. The default value is loaded from the component resource
     * bundle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * @SINCE 1.46.0
     * @deprecated (since 1.54.0) - Not Fiori.
     *
     * Sets a new value for property {@link #getScrollingFadeout scrollingFadeout}.
     *
     * If set to `Area`, the timeline fades into the visible area margin. If set to `AreaWithButtons`, the timeline
     * fades into the visible area margin and scroll buttons are displayed. If set to `None`, the fading effect
     * is not applied. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScrollingFadeout(
      /**
       * New value for property `scrollingFadeout`
       */
      sScrollingFadeout?:
        | TimelineScrollingFadeout
        | keyof typeof TimelineScrollingFadeout
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the showHeaderBar property instead.
     *
     * Sets a new value for property {@link #getShowFilterBar showFilterBar}.
     *
     * Sets the visibility of the filter in the timeline toolbar.
     *  As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getShowHeaderBar}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowFilterBar(
      /**
       * New value for property `showFilterBar`
       */
      bShowFilterBar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowHeaderBar showHeaderBar}.
     *
     * Shows the timeline toolbar with search and filter options.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowHeaderBar(
      /**
       * New value for property `showHeaderBar`
       */
      bShowHeaderBar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowIcons showIcons}.
     *
     * Shows an icon on the timeline axis as an anchor for each entry node. If set to `false`, all icons are
     * replaced by dots.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowIcons(
      /**
       * New value for property `showIcons`
       */
      bShowIcons?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowItemFilter showItemFilter}.
     *
     * Show item filter in filter area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowItemFilter(
      /**
       * New value for property `showItemFilter`
       */
      bShowItemFilter?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSearch showSearch}.
     *
     * Sets the search field visibility on the timeline toolbar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowSearch(
      /**
       * New value for property `showSearch`
       */
      bShowSearch?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSort showSort}.
     *
     * Show sort icon in the header bar. For displaying this icon, sorting have to be allowed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowSort(
      /**
       * New value for property `showSort`
       */
      bShowSort?: boolean
    ): this;
    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Sets a new value for property {@link #getShowSuggestion showSuggestion}.
     *
     * If set to `true`, a suggest event is fired when the user enters text into the search field. Changing
     * the suggestionItems aggregation in the suggest event listener will display suggestions inside a popup.
     * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowSuggestion(
      /**
       * New value for property `showSuggestion`
       */
      bShowSuggestion?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowTimeFilter showTimeFilter}.
     *
     * Shows the time range filter in the filter menu.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowTimeFilter(
      /**
       * New value for property `showTimeFilter`
       */
      bShowTimeFilter?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSort sort}.
     *
     * Indicates whether the data should be sorted. If set to `false` the data model's default sorting is applied.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSort(
      /**
       * New value for property `sort`
       */
      bSort?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSortOldestFirst sortOldestFirst}.
     *
     * Whether the oldest item will be displayed first.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSortOldestFirst(
      /**
       * New value for property `sortOldestFirst`
       */
      bSortOldestFirst?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTextHeight textHeight}.
     *
     * Height of the timeline posts. It can be set to either of the following types of values:
     * 	 -  Automatic – If set to `automatic`, the optimal post height is calculated automatically to
     *     fit the timeline height specified by the height parameter. This option works only in horizontal timelines
     *     and only when the timeline height is defined. In vertical timelines, this setting is ignored.
     * 	 -  Number – If set to a number, a corresponding number of text lines is displayed in every post.
     *
     * 	 -  Pixels – If set to a number followed by `px`, such as `50px`, the closest number in lines
     *     is calculated and applied to the timeline posts, so that the post height corresponds to the specified
     *     number of pixels and the text lines are not cut off in the middle of a line.
     * 	 -  Any other valid {@link sap.ui.core.CSSSize CSSSize} value that is inserted into the text wrapper
     *     without being changed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTextHeight(
      /**
       * New value for property `textHeight`
       */
      sTextHeight?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the Timeline.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  export default Timeline;

  export interface $TimelineSettings extends $ControlSettings {
    /**
     * Defines the alignment of timeline posts relative to the timeline axis. This option can be used for single-sided
     * timelines only. If the axisOrientation property is set to ` Horizontal`, the `Right` value is interpreted
     * as bottom alignment and the `Left` value as top alignment.
     */
    alignment?:
      | (TimelineAlignment | keyof typeof TimelineAlignment)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines the orientation of the timeline. Can be set to `Vertical` or `Horizontal`.
     */
    axisOrientation?:
      | (TimelineAxisOrientation | keyof typeof TimelineAxisOrientation)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @deprecated (since 1.46.0) - As of version 1.46, this property was replaced by JSONModel context binding.
     *
     * Data for the Timeline control.
     */
    data?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.46.0) - The filter list now includes a Select All check box, so the All radio button
     * is no longer required. This property is ignored.
     *
     * Enables to add 'All' at the beginning of the filter list.
     */
    enableAllInFilterItem?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.46.0) - Use the enableModelFilter property instead.
     *
     * Enables fetching data from backend instead of deriving filter values from the frontend values (displayed
     * list). As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getEnableModelFilter}.
     */
    enableBackendFilter?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * When this property is set to `true`, the timeline displays a busy indicator when loading data. This busy
     * indicator blocks the interaction with the items until the data loading is complete. It is strongly recommended
     * to use this option. Loading data without a busy indicator may confuse the users.
     */
    enableBusyIndicator?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to `true`, timeline posts are displayed on both sides of the timeline axis.
     */
    enableDoubleSided?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.46.0
     *
     * Enables filtering directly on the binding level. If set to `true`, all filters are translated into the
     * filters in the model binding. When the OData model is used, the filtering is performed on the backend
     * side. This option is strongly recommended. If set to `false`, all entries from the model need to be fetched
     * before they can be filtered on the frontend side. Please be aware that the `growingThreshold` property
     * determines how many entries can be rendered. Timeline requests all entries from the model before it performs
     * the filtering. Some models may have internal limits for the number of entries that can be used in bindings.
     * Such limits can be set using {@link sap.ui.model.Model#setSizeLimit}.
     */
    enableModelFilter?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to `true`, the Timeline control has its own scroll bar, with the scrolling taking place within
     * the Timeline control itself. Scrolling is required if you want to enable the lazyLoading property.
     */
    enableScroll?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Adds a Reply link to the posts on a social timeline that allows users to reply to posts. When
     * a user adds a reply, an event is fired. This event should be handled by external code.
     */
    enableSocial?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Title for the data filter. When a filter is applied, this title is displayed in the message strip along
     * with the filter name.
     */
    filterTitle?: string | PropertyBindingInfo;

    /**
     * If set to `true`, the Show More button is displayed when the user scrolls along the timeline axis.
     */
    forceGrowing?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.46.0) - Use the groupByType property instead.
     *
     * Groups the timeline posts by year. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGroupByType}.
     */
    group?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Groups the timeline posts by a field. Only fields that contain date values are supported.
     */
    groupBy?: string | PropertyBindingInfo;

    /**
     * Groups the timeline posts by a time period, including year, quarter, month, week, and day. If set to
     * `None`, no grouping is applied. If you specify a custom grouping function using the {@link sap.suite.ui.commons.Timeline#setCustomGrouping }
     * method, this function overrides the groupByType property settings.
     */
    groupByType?:
      | (TimelineGroupType | keyof typeof TimelineGroupType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @deprecated (since 1.46.0) - Use the growingThreshold property instead, setting it to 0 to disable growing.
     *
     * If set to `true`, the timeline displays a limited number of posts with a button to show more. The displayed
     * posts limit can be set using the growingThreshold property. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGrowingThreshold}.
     */
    growing?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Number of posts requested from the server at a time. Each time when the timeline needs to load more posts,
     * it will request exactly this amount. The number of posts displayed in the timeline is increased by this
     * number. If set to `0`, all posts are fetched and displayed on the initial load.
     */
    growingThreshold?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.46.0
     *
     * Sets the height of the Timeline.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.46.0
     *
     * Enables the Lazy Loading feature that automatically loads more posts as the user scrolls along the timeline
     * axis. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
     */
    lazyLoading?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * This text is displayed when the control has no data. The default value is loaded from the component resource
     * bundle.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.46.0
     * @deprecated (since 1.54.0) - Not Fiori.
     *
     * If set to `Area`, the timeline fades into the visible area margin. If set to `AreaWithButtons`, the timeline
     * fades into the visible area margin and scroll buttons are displayed. If set to `None`, the fading effect
     * is not applied. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
     */
    scrollingFadeout?:
      | (TimelineScrollingFadeout | keyof typeof TimelineScrollingFadeout)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @deprecated (since 1.46.0) - Use the showHeaderBar property instead.
     *
     * Sets the visibility of the filter in the timeline toolbar.
     *  As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getShowHeaderBar}.
     */
    showFilterBar?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Shows the timeline toolbar with search and filter options.
     */
    showHeaderBar?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Shows an icon on the timeline axis as an anchor for each entry node. If set to `false`, all icons are
     * replaced by dots.
     */
    showIcons?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Show item filter in filter area.
     */
    showItemFilter?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets the search field visibility on the timeline toolbar.
     */
    showSearch?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Show sort icon in the header bar. For displaying this icon, sorting have to be allowed.
     */
    showSort?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * If set to `true`, a suggest event is fired when the user enters text into the search field. Changing
     * the suggestionItems aggregation in the suggest event listener will display suggestions inside a popup.
     * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    showSuggestion?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Shows the time range filter in the filter menu.
     */
    showTimeFilter?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates whether the data should be sorted. If set to `false` the data model's default sorting is applied.
     */
    sort?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Path for dateTime in mode binding. Use this property when you use factory function for `TimeLineItem`
     * creation. When every item has different path or the `datetime` is calculated in factory sorting, filtering
     * and searching has to be done manually using events. If not set for factory binding filter and sorting
     * won't work.
     */
    dateTimePath?: string | PropertyBindingInfo;

    /**
     * Whether the oldest item will be displayed first.
     */
    sortOldestFirst?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the timeline posts. It can be set to either of the following types of values:
     * 	 -  Automatic – If set to `automatic`, the optimal post height is calculated automatically to
     *     fit the timeline height specified by the height parameter. This option works only in horizontal timelines
     *     and only when the timeline height is defined. In vertical timelines, this setting is ignored.
     * 	 -  Number – If set to a number, a corresponding number of text lines is displayed in every post.
     *
     * 	 -  Pixels – If set to a number followed by `px`, such as `50px`, the closest number in lines
     *     is calculated and applied to the timeline posts, so that the post height corresponds to the specified
     *     number of pixels and the text lines are not cut off in the middle of a line.
     * 	 -  Any other valid {@link sap.ui.core.CSSSize CSSSize} value that is inserted into the text wrapper
     *     without being changed.
     */
    textHeight?: string | PropertyBindingInfo;

    /**
     * Sets the width of the Timeline.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * List of timeline posts.
     */
    content?:
      | TimelineItem[]
      | TimelineItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * A custom filter to be used instead of the default item filter. This control must have an `openBy` or
     * `open` function that is used by the timeline to open the control. If the control has both functions,
     * `openBy` is used.
     */
    customFilter?: Control;

    /**
     * Custom filter criteria for the items filter.
     */
    filterList?:
      | TimelineFilterListItem[]
      | TimelineFilterListItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Items for suggestions. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    suggestionItems?:
      | StandardListItem[]
      | StandardListItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Assigns label to a control using the ID of the associated control. (Refer WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * This event is fired when a new post is added. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    addPost?: (oEvent: Event<$TimelineAddPostEventParameters>) => void;

    /**
     * This event is fired when the user clicks the Close button on a message strip.
     */
    customMessageClosed?: (oEvent: Event) => void;

    /**
     * This event is fired when the user clicks the filter icon in the timeline toolbar and opens the filter.
     */
    filterOpen?: (oEvent: Event) => void;

    /**
     * This event is fired when filtering is applied to timeline posts or when a search term is entered into
     * the search field. This event can be fired only if the enableModelFilter property is set to `true`.
     */
    filterSelectionChange?: (
      oEvent: Event<$TimelineFilterSelectionChangeEventParameters>
    ) => void;

    /**
     * This event is fired when the "More" button is clicked.
     */
    grow?: (oEvent: Event) => void;

    /**
     * This event is fired for every timeline post when data filtering is being applied. It indicates whether
     * this post is included in the filtering and why. Can be used only when the enableModelFilter property
     * is set to `false`.
     */
    itemFiltering?: (
      oEvent: Event<$TimelineItemFilteringEventParameters>
    ) => void;

    /**
     * This event is fired when a timeline post is selected.
     */
    select?: (oEvent: Event<$TimelineSelectEventParameters>) => void;

    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * This event is fired when the user enters text into the search field, in cases when the showSuggestion
     * property is set to `true`. Changing the suggestionItems aggregation will show the suggestions inside
     * a popup.
     */
    suggest?: (oEvent: Event<$TimelineSuggestEventParameters>) => void;

    /**
     * @SINCE 1.26.1
     * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * This event is fired when a suggested post is selected in the suggestions popup list. This event is only
     * fired when the showSuggestion property is set to `true` and there is at least one post in the suggestions
     * popup list. See also the suggestionItems aggregation.
     */
    suggestionItemSelected?: (
      oEvent: Event<$TimelineSuggestionItemSelectedEventParameters>
    ) => void;
  }

  export interface $TimelineAddPostEventParameters {
    /**
     * Post message text.
     */
    value?: string;
  }

  export interface $TimelineCustomMessageClosedEventParameters {}

  export interface $TimelineFilterOpenEventParameters {}

  export interface $TimelineFilterSelectionChangeEventParameters {
    /**
     * Type of filter that has changed, can be an item filter or a time range filter.
     */
    type?: TimelineFilterType | keyof typeof TimelineFilterType;

    /**
     * Search term entered into the search field.
     */
    searchTerm?: string;

    /**
     * The first criteria selected in the filter criteria list (required for backward compatibility).
     */
    selectedItem?: string;

    /**
     * An array with all selected filter criteria.
     */
    selectedItems?: object;

    /**
     * An object specifying the start date (`from`) and the end date (`to`) of the time range.
     */
    timeKeys?: object;

    /**
     * Is set to `true` when this event is fired by clearing the filter.
     */
    clear?: boolean;
  }

  export interface $TimelineGrowEventParameters {}

  export interface $TimelineItemFilteringEventParameters {
    /**
     * Timeline post that is currently being filtered.
     */
    item?: TimelineItem;

    /**
     * Reasons why the post is being filtered. Empty if the post is not being filtered. There are three properties
     * available in the object: `Search`, `Time`, and `Data`. You can call preventDefault to the event object
     * to prevent the result.
     */
    reasons?: object;

    /**
     * Array with keys used for data filtering.
     */
    dataKeys?: object;

    /**
     * An object specifying the start date (`from`) and the end date (`to`) of the time range.
     */
    timeKeys?: object;

    /**
     * The text string that has been typed into the search field.
     */
    searchTerm?: string;
  }

  export interface $TimelineSelectEventParameters {
    /**
     * The timeline post that is selected.
     */
    selectedItem?: TimelineItem;

    /**
     * Indicates whether the selection was triggered by a user action or in any other way.
     * Set to `true` if the selection was triggered by a user action, for example, by clicking with a mouse
     * or pressing the Enter key.
     * Set to `false` if the selection was triggered in a different way, for example, by shifting focus back
     * from a Popover element or by pressing an arrow key.
     * For backward compatibility, the `select` event is fired whenever an item gets focus.
     */
    userAction?: boolean;
  }

  export interface $TimelineSuggestEventParameters {
    /**
     * The text string that has been typed into the search field.
     */
    suggestValue?: string;
  }

  export interface $TimelineSuggestionItemSelectedEventParameters {
    /**
     * The item selected in the suggestions popup.
     */
    selectedItem?: Item;
  }
}

declare module "sap/suite/ui/commons/TimelineFilterListItem" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Provides a filter criteria list for the items filter in the Timeline control.
   */
  class TimelineFilterListItem extends Control {
    /**
     * Constructor for a new TimelineFilterListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TimelineFilterListItemSettings
    );
    /**
     * Constructor for a new TimelineFilterListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TimelineFilterListItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TimelineFilterListItem with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimelineFilterListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TimelineFilterListItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * A key for a filter criterion. Each filter criterion must have a unique key.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * A textual label for the filter criterion. This text is displayed in the filter criteria list in the UI.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * A key for a filter criterion. Each filter criterion must have a unique key.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * A textual label for the filter criterion. This text is displayed in the filter criteria list in the UI.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }
  export default TimelineFilterListItem;

  export interface $TimelineFilterListItemSettings extends $ControlSettings {
    /**
     * A key for a filter criterion. Each filter criterion must have a unique key.
     */
    key?: string | PropertyBindingInfo;

    /**
     * A textual label for the filter criterion. This text is displayed in the filter criteria list in the UI.
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/suite/ui/commons/TimelineItem" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, URI } from "sap/ui/core/library";

  import CustomData from "sap/ui/core/CustomData";

  import StandardListItem from "sap/m/StandardListItem";

  import Event from "sap/ui/base/Event";

  import AvatarShape from "sap/m/AvatarShape";

  import AvatarSize from "sap/m/AvatarSize";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import List from "sap/m/List";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Link from "sap/m/Link";

  import Item from "sap/ui/core/Item";

  /**
   * An entry posted on the timeline.
   */
  class TimelineItem extends Control {
    /**
     * Constructor for a new TimelineItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TimelineItemSettings
    );
    /**
     * Constructor for a new TimelineItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TimelineItemSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TimelineItem with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimelineItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TimelineItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some customAction to the aggregation {@link #getCustomAction customAction}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomAction(
      /**
       * The customAction to add; if empty, nothing is inserted
       */
      oCustomAction: CustomData
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addSuggestionItem(
      /**
       * The suggestionItem to add; if empty, nothing is inserted
       */
      oSuggestionItem: StandardListItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customActionClicked customActionClicked} event
     * of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * Fired when custom action link is clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomActionClicked(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemCustomActionClickedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:customActionClicked customActionClicked} event
     * of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * Fired when custom action link is clicked.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachCustomActionClicked(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemCustomActionClickedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.95
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the embedded control link is clicked of the timeline post. triggers the click
     * event of the content.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.95
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the embedded control link is clicked of the timeline post. triggers the click
     * event of the content.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:replyListOpen replyListOpen} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the Reply link is clicked to open the reply dialog.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachReplyListOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:replyListOpen replyListOpen} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the Reply link is clicked to open the reply dialog.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachReplyListOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:replyPost replyPost} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the Reply button is clicked in the links section of a timeline post.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachReplyPost(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemReplyPostEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:replyPost replyPost} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the Reply button is clicked in the links section of a timeline post.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachReplyPost(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemReplyPostEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.95
     *
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when a non-interactive content or white space(where no content is available) inside
     * an timeline post is clicked, triggers the click event of the item.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.95
     *
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when a non-interactive content or white space(where no content is available) inside
     * an timeline post is clicked, triggers the click event of the item.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the user types text into the search field and showSuggestion is set to true.
     * Changing the suggestItems aggregation will show the suggestions inside a popup.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggest(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemSuggestEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when the user types text into the search field and showSuggestion is set to true.
     * Changing the suggestItems aggregation will show the suggestions inside a popup.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggest(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemSuggestEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected }
     * event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when a suggested post is selected in the search suggestions popup. This event is
     * fired only when the showSuggestion propery is set to `true` and there are suggested posts shown in the
     * suggestions popup.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggestionItemSelected(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemSuggestionItemSelectedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected }
     * event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when a suggested post is selected in the search suggestions popup. This event is
     * fired only when the showSuggestion propery is set to `true` and there are suggested posts shown in the
     * suggestions popup.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSuggestionItemSelected(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemSuggestionItemSelectedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:userNameClicked userNameClicked} event of this
     * `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when a user name is clicked in the post's header section.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachUserNameClicked(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemUserNameClickedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:userNameClicked userNameClicked} event of this
     * `sap.suite.ui.commons.TimelineItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
     *
     * This event is fired when a user name is clicked in the post's header section.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachUserNameClicked(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemUserNameClickedEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the customAction in the aggregation {@link #getCustomAction customAction}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomAction(): this;
    /**
     * Destroys the customReply in the aggregation {@link #getCustomReply customReply}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomReply(): this;
    /**
     * Destroys the embeddedControl in the aggregation {@link #getEmbeddedControl embeddedControl}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyEmbeddedControl(): this;
    /**
     * Destroys the replyList in the aggregation {@link #getReplyList replyList}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyReplyList(): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySuggestionItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:customActionClicked customActionClicked} event
     * of this `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachCustomActionClicked(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemCustomActionClickedEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.95
     *
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:replyListOpen replyListOpen} event of this
     * `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachReplyListOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:replyPost replyPost} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachReplyPost(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemReplyPostEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.95
     *
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSuggest(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$TimelineItemSuggestEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:suggestionItemSelected suggestionItemSelected }
     * event of this `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSuggestionItemSelected(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemSuggestionItemSelectedEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:userNameClicked userNameClicked} event of
     * this `sap.suite.ui.commons.TimelineItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachUserNameClicked(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$TimelineItemUserNameClickedEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:customActionClicked customActionClicked} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCustomActionClicked(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineItemCustomActionClickedEventParameters
    ): this;
    /**
     * @SINCE 1.95
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:replyListOpen replyListOpen} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireReplyListOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:replyPost replyPost} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireReplyPost(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineItemReplyPostEventParameters
    ): this;
    /**
     * @SINCE 1.95
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:select select} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:suggest suggest} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSuggest(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineItemSuggestEventParameters
    ): this;
    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:suggestionItemSelected suggestionItemSelected} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSuggestionItemSelected(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineItemSuggestionItemSelectedEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:userNameClicked userNameClicked} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireUserNameClicked(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $TimelineItemUserNameClickedEventParameters
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets content of aggregation {@link #getCustomAction customAction}.
     *
     * Custom actions displayed as links in the links section of the post. The key must be unique for each link.
     * Values are used as labels for the link. When a user clicks the link, a customActionClicked event is fired.
     */
    getCustomAction(): CustomData[];
    /**
     * Gets content of aggregation {@link #getCustomReply customReply}.
     *
     * A UI5 control that acts as a custom reply dialog. It is used instead of the default reply dialog that
     * is displayed when the user clicks the Reply link. Supports UI5 controls that have an openBy method, for
     * example, the Popup control.
     */
    getCustomReply(): Control;
    /**
     * Gets current value of property {@link #getDateTime dateTime}.
     *
     * Date and time value of the timeline post. This value must be in one of the following formats:
     * 	 -  A valid instance of the `Date` object.
     * 	 -  An integer representing Unix time (also known as POSIX or Epoch time) in milliseconds.
     * 	 -  A string with an integer representing Unix time in milliseconds.
     * 	 -  A string that contains `Date([number])`, where `[number]` represents Unix time in milliseconds.
     *       If this property has any other format, the timeline will try to parse it using `Date.parse`. It
     *     is not recommended to use this functionality, as different web browsers implement this function differently,
     *     which may lead to unpredictable behavior.
     *
     * @returns Value of property `dateTime`
     */
    getDateTime(): any;
    /**
     * Gets content of aggregation {@link #getEmbeddedControl embeddedControl}.
     *
     * A UI5 control that is displayed as a timeline post's content instead of the default content (text). Examples
     * of such a control include the Panel control and the List control.
     */
    getEmbeddedControl(): Control;
    /**
     * Gets current value of property {@link #getFilterValue filterValue}.
     *
     * Text for the items filter name. This text will be used as the name of the items filter in the filter
     * popover.
     *
     * @returns Value of property `filterValue`
     */
    getFilterValue(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon on the timeline axis that corresponds to the point in time when the entry was posted. Posts can
     * be displayed in chronological or reverse chronological order.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconDisplayShape iconDisplayShape}.
     *
     * Defines the shape of the icon.
     *
     * Default value is `Circle`.
     *
     * @returns Value of property `iconDisplayShape`
     */
    getIconDisplayShape(): AvatarShape | keyof typeof AvatarShape;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconInitials iconInitials}.
     *
     * Defines the initials of the icon.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `iconInitials`
     */
    getIconInitials(): string;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconSize iconSize}.
     *
     * Defines the size of the icon.
     *
     * Default value is `XS`.
     *
     * @returns Value of property `iconSize`
     */
    getIconSize(): AvatarSize | keyof typeof AvatarSize;
    /**
     * Gets current value of property {@link #getIconTooltip iconTooltip}.
     *
     * Tooltip for an icon displayed on the timeline axis.
     *
     * @returns Value of property `iconTooltip`
     */
    getIconTooltip(): string;
    /**
     * Gets current value of property {@link #getMaxCharacters maxCharacters}.
     *
     * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
     * on desktop computers as limits. Based on these values, the text of the timeline post is collapsed once
     * it reaches these character limits. In this case, only the specified number of characters is displayed.
     * By clicking the More link, the entire text can be displayed. Clicking Less collapses the text. The application
     * can set the value according to its needs.
     *
     * @returns Value of property `maxCharacters`
     */
    getMaxCharacters(): int;
    /**
     * Gets current value of property {@link #getReplyCount replyCount}.
     *
     * Number of replies to a timeline post.
     *
     * @returns Value of property `replyCount`
     */
    getReplyCount(): int;
    /**
     * Gets content of aggregation {@link #getReplyList replyList}.
     *
     * A list of replies related to the post.
     */
    getReplyList(): List;
    /**
     * Gets current value of property {@link #getStatus status}.
     *
     * Indicates the post status. The status affects the post's icon color. Supported values:
     * 	 -  `Information`
     * 	 -  `Success`
     * 	 -  `Warning`
     * 	 -  `Error`
     *
     * @returns Value of property `status`
     */
    getStatus(): string;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Suggested posts.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    getSuggestionItems(): StandardListItem[];
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Text shown inside the timeline post.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Text shown in the post title right after the user name.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getUseIconTooltip useIconTooltip}.
     *
     * Decides whether a default Icon tooltip should be used if no tooltip is set.
     *
     * Default value is `true`.
     *
     * @returns Value of property `useIconTooltip`
     */
    getUseIconTooltip(): boolean;
    /**
     * Gets current value of property {@link #getUserName userName}.
     *
     * User name shown in the post title.
     *
     * @returns Value of property `userName`
     */
    getUserName(): string;
    /**
     * Gets current value of property {@link #getUserNameClickable userNameClickable}.
     *
     * Makes the user name clickable. Clicking the name fires a userNameClicked event.
     *
     * Default value is `false`.
     *
     * @returns Value of property `userNameClickable`
     */
    getUserNameClickable(): boolean;
    /**
     * Gets current value of property {@link #getUserPicture userPicture}.
     *
     * Picture shown next to the user name.
     *
     * @returns Value of property `userPicture`
     */
    getUserPicture(): URI;
    /**
     * Checks for the provided `sap.ui.core.CustomData` in the aggregation {@link #getCustomAction customAction}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomAction(
      /**
       * The customAction whose index is looked for
       */
      oCustomAction: CustomData
    ): int;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Checks for the provided `sap.m.StandardListItem` in the aggregation {@link #getSuggestionItems suggestionItems}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfSuggestionItem(
      /**
       * The suggestionItem whose index is looked for
       */
      oSuggestionItem: StandardListItem
    ): int;
    /**
     * Inserts a customAction into the aggregation {@link #getCustomAction customAction}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomAction(
      /**
       * The customAction to insert; if empty, nothing is inserted
       */
      oCustomAction: CustomData,
      /**
       * The `0`-based index the customAction should be inserted at; for a negative value of `iIndex`, the customAction
       * is inserted at position 0; for a value greater than the current size of the aggregation, the customAction
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertSuggestionItem(
      /**
       * The suggestionItem to insert; if empty, nothing is inserted
       */
      oSuggestionItem: StandardListItem,
      /**
       * The `0`-based index the suggestionItem should be inserted at; for a negative value of `iIndex`, the suggestionItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getCustomAction customAction}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomAction(): CustomData[];
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllSuggestionItems(): StandardListItem[];
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns The removed ariaLabelledBy or `null`
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID | null;
    /**
     * Removes a customAction from the aggregation {@link #getCustomAction customAction}.
     *
     * @returns The removed customAction or `null`
     */
    removeCustomAction(
      /**
       * The customAction to remove or its index or id
       */
      vCustomAction: int | string | CustomData
    ): CustomData | null;
    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * @returns The removed suggestionItem or `null`
     */
    removeSuggestionItem(
      /**
       * The suggestionItem to remove or its index or id
       */
      vSuggestionItem: int | string | StandardListItem
    ): StandardListItem | null;
    /**
     * Sets the aggregated {@link #getCustomReply customReply}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCustomReply(
      /**
       * The customReply to set
       */
      oCustomReply: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDateTime dateTime}.
     *
     * Date and time value of the timeline post. This value must be in one of the following formats:
     * 	 -  A valid instance of the `Date` object.
     * 	 -  An integer representing Unix time (also known as POSIX or Epoch time) in milliseconds.
     * 	 -  A string with an integer representing Unix time in milliseconds.
     * 	 -  A string that contains `Date([number])`, where `[number]` represents Unix time in milliseconds.
     *       If this property has any other format, the timeline will try to parse it using `Date.parse`. It
     *     is not recommended to use this functionality, as different web browsers implement this function differently,
     *     which may lead to unpredictable behavior.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDateTime(
      /**
       * New value for property `dateTime`
       */
      oDateTime?: any
    ): this;
    /**
     * Sets the aggregated {@link #getEmbeddedControl embeddedControl}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEmbeddedControl(
      /**
       * The embeddedControl to set
       */
      oEmbeddedControl: Control
    ): this;
    /**
     * Sets a new value for property {@link #getFilterValue filterValue}.
     *
     * Text for the items filter name. This text will be used as the name of the items filter in the filter
     * popover.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFilterValue(
      /**
       * New value for property `filterValue`
       */
      sFilterValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon on the timeline axis that corresponds to the point in time when the entry was posted. Posts can
     * be displayed in chronological or reverse chronological order.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconDisplayShape iconDisplayShape}.
     *
     * Defines the shape of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Circle`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconDisplayShape(
      /**
       * New value for property `iconDisplayShape`
       */
      sIconDisplayShape?: AvatarShape | keyof typeof AvatarShape
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconInitials iconInitials}.
     *
     * Defines the initials of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconInitials(
      /**
       * New value for property `iconInitials`
       */
      sIconInitials?: string
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconSize iconSize}.
     *
     * Defines the size of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `XS`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSize(
      /**
       * New value for property `iconSize`
       */
      sIconSize?: AvatarSize | keyof typeof AvatarSize
    ): this;
    /**
     * Sets a new value for property {@link #getIconTooltip iconTooltip}.
     *
     * Tooltip for an icon displayed on the timeline axis.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconTooltip(
      /**
       * New value for property `iconTooltip`
       */
      sIconTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMaxCharacters maxCharacters}.
     *
     * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
     * on desktop computers as limits. Based on these values, the text of the timeline post is collapsed once
     * it reaches these character limits. In this case, only the specified number of characters is displayed.
     * By clicking the More link, the entire text can be displayed. Clicking Less collapses the text. The application
     * can set the value according to its needs.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMaxCharacters(
      /**
       * New value for property `maxCharacters`
       */
      iMaxCharacters?: int
    ): this;
    /**
     * Sets a new value for property {@link #getReplyCount replyCount}.
     *
     * Number of replies to a timeline post.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setReplyCount(
      /**
       * New value for property `replyCount`
       */
      iReplyCount?: int
    ): this;
    /**
     * Sets the aggregated {@link #getReplyList replyList}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setReplyList(
      /**
       * The replyList to set
       */
      oReplyList: List
    ): this;
    /**
     * Sets a new value for property {@link #getStatus status}.
     *
     * Indicates the post status. The status affects the post's icon color. Supported values:
     * 	 -  `Information`
     * 	 -  `Success`
     * 	 -  `Warning`
     * 	 -  `Error`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStatus(
      /**
       * New value for property `status`
       */
      sStatus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Text shown inside the timeline post.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Text shown in the post title right after the user name.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUseIconTooltip useIconTooltip}.
     *
     * Decides whether a default Icon tooltip should be used if no tooltip is set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUseIconTooltip(
      /**
       * New value for property `useIconTooltip`
       */
      bUseIconTooltip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getUserName userName}.
     *
     * User name shown in the post title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUserName(
      /**
       * New value for property `userName`
       */
      sUserName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUserNameClickable userNameClickable}.
     *
     * Makes the user name clickable. Clicking the name fires a userNameClicked event.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUserNameClickable(
      /**
       * New value for property `userNameClickable`
       */
      bUserNameClickable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getUserPicture userPicture}.
     *
     * Picture shown next to the user name.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUserPicture(
      /**
       * New value for property `userPicture`
       */
      sUserPicture?: URI
    ): this;
  }
  export default TimelineItem;

  export interface $TimelineItemSettings extends $ControlSettings {
    /**
     * Date and time value of the timeline post. This value must be in one of the following formats:
     * 	 -  A valid instance of the `Date` object.
     * 	 -  An integer representing Unix time (also known as POSIX or Epoch time) in milliseconds.
     * 	 -  A string with an integer representing Unix time in milliseconds.
     * 	 -  A string that contains `Date([number])`, where `[number]` represents Unix time in milliseconds.
     *       If this property has any other format, the timeline will try to parse it using `Date.parse`. It
     *     is not recommended to use this functionality, as different web browsers implement this function differently,
     *     which may lead to unpredictable behavior.
     */
    dateTime?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Text for the items filter name. This text will be used as the name of the items filter in the filter
     * popover.
     */
    filterValue?: string | PropertyBindingInfo;

    /**
     * Icon on the timeline axis that corresponds to the point in time when the entry was posted. Posts can
     * be displayed in chronological or reverse chronological order.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the shape of the icon.
     */
    iconDisplayShape?:
      | (AvatarShape | keyof typeof AvatarShape)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @SINCE 1.88
     *
     * Defines the initials of the icon.
     */
    iconInitials?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the size of the icon.
     */
    iconSize?:
      | (AvatarSize | keyof typeof AvatarSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Tooltip for an icon displayed on the timeline axis.
     */
    iconTooltip?: string | PropertyBindingInfo;

    /**
     * Decides whether a default Icon tooltip should be used if no tooltip is set.
     */
    useIconTooltip?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
     * on desktop computers as limits. Based on these values, the text of the timeline post is collapsed once
     * it reaches these character limits. In this case, only the specified number of characters is displayed.
     * By clicking the More link, the entire text can be displayed. Clicking Less collapses the text. The application
     * can set the value according to its needs.
     */
    maxCharacters?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Number of replies to a timeline post.
     */
    replyCount?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates the post status. The status affects the post's icon color. Supported values:
     * 	 -  `Information`
     * 	 -  `Success`
     * 	 -  `Warning`
     * 	 -  `Error`
     */
    status?: string | PropertyBindingInfo;

    /**
     * Text shown in the post title right after the user name.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Text shown inside the timeline post.
     */
    text?: string | PropertyBindingInfo;

    /**
     * User name shown in the post title.
     */
    userName?: string | PropertyBindingInfo;

    /**
     * Makes the user name clickable. Clicking the name fires a userNameClicked event.
     */
    userNameClickable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Picture shown next to the user name.
     */
    userPicture?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Custom actions displayed as links in the links section of the post. The key must be unique for each link.
     * Values are used as labels for the link. When a user clicks the link, a customActionClicked event is fired.
     */
    customAction?:
      | CustomData[]
      | CustomData
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * A UI5 control that acts as a custom reply dialog. It is used instead of the default reply dialog that
     * is displayed when the user clicks the Reply link. Supports UI5 controls that have an openBy method, for
     * example, the Popup control.
     */
    customReply?: Control;

    /**
     * A UI5 control that is displayed as a timeline post's content instead of the default content (text). Examples
     * of such a control include the Panel control and the List control.
     */
    embeddedControl?: Control;

    /**
     * A list of replies related to the post.
     */
    replyList?: List;

    /**
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * Suggested posts.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    suggestionItems?:
      | StandardListItem[]
      | StandardListItem
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Assigns label to a control using the ID of the associated control. (Refer WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired when a user name is clicked in the post's header section.
     */
    userNameClicked?: (
      oEvent: Event<$TimelineItemUserNameClickedEventParameters>
    ) => void;

    /**
     * @SINCE 1.95
     *
     * This event is fired when a non-interactive content or white space(where no content is available) inside
     * an timeline post is clicked, triggers the click event of the item.
     */
    select?: (oEvent: Event) => void;

    /**
     * @SINCE 1.95
     *
     * This event is fired when the embedded control link is clicked of the timeline post. triggers the click
     * event of the content.
     */
    press?: (oEvent: Event) => void;

    /**
     * This event is fired when the Reply button is clicked in the links section of a timeline post.
     */
    replyPost?: (oEvent: Event<$TimelineItemReplyPostEventParameters>) => void;

    /**
     * This event is fired when the Reply link is clicked to open the reply dialog.
     */
    replyListOpen?: (oEvent: Event) => void;

    /**
     * Fired when custom action link is clicked.
     */
    customActionClicked?: (
      oEvent: Event<$TimelineItemCustomActionClickedEventParameters>
    ) => void;

    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * This event is fired when the user types text into the search field and showSuggestion is set to true.
     * Changing the suggestItems aggregation will show the suggestions inside a popup.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    suggest?: (oEvent: Event<$TimelineItemSuggestEventParameters>) => void;

    /**
     * @SINCE 1.28.1
     * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
     *
     * This event is fired when a suggested post is selected in the search suggestions popup. This event is
     * fired only when the showSuggestion propery is set to `true` and there are suggested posts shown in the
     * suggestions popup.
     *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
     */
    suggestionItemSelected?: (
      oEvent: Event<$TimelineItemSuggestionItemSelectedEventParameters>
    ) => void;
  }

  export interface $TimelineItemCustomActionClickedEventParameters {
    /**
     * Value of the custom action.
     */
    value?: string;

    /**
     * Key of the custom action.
     */
    key?: string;

    /**
     * Link on which the user clicked.
     */
    linkObj?: Link;
  }

  export interface $TimelineItemPressEventParameters {}

  export interface $TimelineItemReplyListOpenEventParameters {}

  export interface $TimelineItemReplyPostEventParameters {
    /**
     * Content of the reply to the post.
     */
    value?: string;
  }

  export interface $TimelineItemSelectEventParameters {}

  export interface $TimelineItemSuggestEventParameters {
    /**
     * The current value that has been typed into the search field.
     */
    suggestValue?: string;
  }

  export interface $TimelineItemSuggestionItemSelectedEventParameters {
    /**
     * The post selected in the suggestions popup.
     */
    selectedItem?: Item;
  }

  export interface $TimelineItemUserNameClickedEventParameters {
    /**
     * A clickable UI element representing the user name.
     */
    uiElement?: Control;
  }
}

declare module "sap/suite/ui/commons/TimelineNavigator" {
  import ItemNavigation from "sap/ui/core/delegate/ItemNavigation";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * TimelineNavigator An extension of ItemNavigator for Timeline.
   */
  class TimelineNavigator extends ItemNavigation {
    /**
     * Creates an instance of TimelineNavigator.
     */
    constructor(
      /**
       * The root DOM reference that includes all items
       */
      oDomRef: Element,
      /**
       * Array of DOM references representing the items for the navigation
       */
      aItemDomRefs: Element[],
      /**
       * Whether the selected element should be in the tab chain or not
       */
      bNotInTabChain: boolean,
      /**
       * 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
       */
      aRows: Element[]
    );
    /**
     * Creates an instance of TimelineNavigator.
     */
    constructor(
      /**
       * The root DOM reference that includes all items
       */
      oDomRef: Element,
      /**
       * Array of DOM references representing the items for the navigation
       */
      aItemDomRefs: Element[],
      /**
       * 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
       */
      aRows: Element[]
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.TimelineNavigator with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.delegate.ItemNavigation.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimelineNavigator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.TimelineNavigator.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Sets the item DOM references as an array for the items
     *
     * @returns `this` to allow method chaining
     */
    setItemDomRefs(
      /**
       * Array of DOM references representing the items
       */
      aItemDomRefs: Element[]
    ): this;
    /**
     * Update references to navigation objects.
     */
    updateReferences(
      /**
       * The root DOM reference that includes all items
       */
      oDomRef: Element,
      /**
       * Array of DOM references representing the items for the navigation
       */
      aItemDomRefs: Element[],
      /**
       * 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
       */
      aRows: Element[]
    ): void;
  }
  export default TimelineNavigator;
}

declare module "sap/suite/ui/commons/UnifiedThingGroup" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ThingGroupDesign } from "sap/suite/ui/commons/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * This control is used in UnifiedThingInspector to display the facet header information.
   */
  class UnifiedThingGroup extends Control {
    /**
     * Constructor for a new UnifiedThingGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $UnifiedThingGroupSettings
    );
    /**
     * Constructor for a new UnifiedThingGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $UnifiedThingGroupSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingGroup with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UnifiedThingGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.UnifiedThingGroup.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of the group.
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * The description of the group.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines how the control is rendered.
     *
     * Default value is `"ZeroIndent"`.
     *
     * @returns Value of property `design`
     */
    getDesign(): ThingGroupDesign | keyof typeof ThingGroupDesign;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the group.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * The description of the group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines how the control is rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"ZeroIndent"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: ThingGroupDesign | keyof typeof ThingGroupDesign
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }
  export default UnifiedThingGroup;

  export interface $UnifiedThingGroupSettings extends $ControlSettings {
    /**
     * The title of the group.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The description of the group.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines how the control is rendered.
     */
    design?:
      | (ThingGroupDesign | keyof typeof ThingGroupDesign)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * The content of the group.
     */
    content?: Control;
  }
}

declare module "sap/suite/ui/commons/UnifiedThingInspector" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Button from "sap/m/Button";

  import FacetOverview from "sap/suite/ui/commons/FacetOverview";

  import KpiTile from "sap/suite/ui/commons/KpiTile";

  import Event from "sap/ui/base/Event";

  import { CSSSize, URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
   *
   * This control provides an ability to display a thing (for example, object factsheet) on the desktop, tablet,
   * and phone devices in a Fiori style.
   */
  class UnifiedThingInspector extends Control {
    /**
     * Constructor for a new UnifiedThingInspector.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $UnifiedThingInspectorSettings
    );
    /**
     * Constructor for a new UnifiedThingInspector.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $UnifiedThingInspectorSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingInspector with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UnifiedThingInspector>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.UnifiedThingInspector.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Adds some action to the aggregation {@link #getActions actions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAction(
      /**
       * The action to add; if empty, nothing is inserted
       */
      oAction: Button
    ): this;
    /**
     * Adds some facet to the aggregation {@link #getFacets facets}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFacet(
      /**
       * The facet to add; if empty, nothing is inserted
       */
      oFacet: FacetOverview
    ): this;
    /**
     * Adds some facetContent to the aggregation {@link #getFacetContent facetContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addFacetContent(
      /**
       * The facetContent to add; if empty, nothing is inserted
       */
      oFacetContent: Control
    ): this;
    /**
     * Adds some kpi to the aggregation {@link #getKpis kpis}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addKpi(
      /**
       * The kpi to add; if empty, nothing is inserted
       */
      oKpi: KpiTile
    ): this;
    /**
     * Adds some page to the aggregation {@link #getPages pages}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addPage(
      /**
       * The page to add; if empty, nothing is inserted
       */
      oPage: Control
    ): this;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Adds some transaction to the aggregation {@link #getTransactions transactions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addTransaction(
      /**
       * The transaction to add; if empty, nothing is inserted
       */
      oTransaction: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:actionsButtonPress actionsButtonPress} event
     * of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Actions button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachActionsButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorActionsButtonPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:actionsButtonPress actionsButtonPress} event
     * of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Actions button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachActionsButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorActionsButtonPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when navigation between two pages has completed. In case of animated transitions this
     * event is fired with some delay after the "navigate" event. This event is propogated from the inner NavContainer.
     * The event can also return internal Master and Detail pages.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorAfterNavigateEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when navigation between two pages has completed. In case of animated transitions this
     * event is fired with some delay after the "navigate" event. This event is propogated from the inner NavContainer.
     * The event can also return internal Master and Detail pages.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorAfterNavigateEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:backAction backAction} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Back button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBackAction(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:backAction backAction} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Back button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBackAction(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:configurationButtonPress configurationButtonPress }
     * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Configuration button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachConfigurationButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorConfigurationButtonPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:configurationButtonPress configurationButtonPress }
     * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Configuration button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachConfigurationButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorConfigurationButtonPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
     * new page has not started yet. This event can be aborted by the application with preventDefault(), which
     * means that there will be no navigation. This event is propogated from the inner NavContainer. The event
     * can also return internal Master and Detail pages.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorNavigateEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
     * new page has not started yet. This event can be aborted by the application with preventDefault(), which
     * means that there will be no navigation. This event is propogated from the inner NavContainer. The event
     * can also return internal Master and Detail pages.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorNavigateEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:transactionsButtonPress transactionsButtonPress }
     * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Transactions button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTransactionsButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorTransactionsButtonPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:transactionsButtonPress transactionsButtonPress }
     * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
     *
     * The event is fired when the user chooses the Transactions button.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTransactionsButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorTransactionsButtonPressEventParameters>
      ) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Destroys all the actions in the aggregation {@link #getActions actions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyActions(): this;
    /**
     * Destroys all the facetContent in the aggregation {@link #getFacetContent facetContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFacetContent(): this;
    /**
     * Destroys all the facets in the aggregation {@link #getFacets facets}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyFacets(): this;
    /**
     * Destroys all the kpis in the aggregation {@link #getKpis kpis}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyKpis(): this;
    /**
     * Destroys all the pages in the aggregation {@link #getPages pages}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPages(): this;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Destroys all the transactions in the aggregation {@link #getTransactions transactions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTransactions(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:actionsButtonPress actionsButtonPress} event
     * of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachActionsButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorActionsButtonPressEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterNavigate afterNavigate} event of this
     * `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorAfterNavigateEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:backAction backAction} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBackAction(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:configurationButtonPress configurationButtonPress }
     * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachConfigurationButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorConfigurationButtonPressEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorNavigateEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:transactionsButtonPress transactionsButtonPress }
     * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachTransactionsButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (
        p1: Event<$UnifiedThingInspectorTransactionsButtonPressEventParameters>
      ) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:actionsButtonPress actionsButtonPress} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireActionsButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $UnifiedThingInspectorActionsButtonPressEventParameters
    ): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterNavigate afterNavigate} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $UnifiedThingInspectorAfterNavigateEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:backAction backAction} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBackAction(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:configurationButtonPress configurationButtonPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireConfigurationButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $UnifiedThingInspectorConfigurationButtonPressEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:navigate navigate} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $UnifiedThingInspectorNavigateEventParameters
    ): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:transactionsButtonPress transactionsButtonPress} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireTransactionsButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $UnifiedThingInspectorTransactionsButtonPressEventParameters
    ): boolean;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Gets content of aggregation {@link #getActions actions}.
     *
     * Action sheet controls.
     */
    getActions(): Button[];
    /**
     * Gets current value of property {@link #getActionsVisible actionsVisible}.
     *
     * If set to true, the Actions button appears.
     *
     * Default value is `false`.
     *
     * @returns Value of property `actionsVisible`
     */
    getActionsVisible(): boolean;
    /**
     * Gets current value of property {@link #getConfigurationVisible configurationVisible}.
     *
     * If set to true, the Configuration button appears.
     *
     * Default value is `true`.
     *
     * @returns Value of property `configurationVisible`
     */
    getConfigurationVisible(): boolean;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * The description of the thing.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getDestroyPageOnBack destroyPageOnBack}.
     *
     * If set to true, destroys a page when the user chooses the Back button to leave this page.
     *
     * Default value is `true`.
     *
     * @returns Value of property `destroyPageOnBack`
     */
    getDestroyPageOnBack(): boolean;
    /**
     * Gets content of aggregation {@link #getFacetContent facetContent}.
     *
     * The content that appears on the detail page of the UnifiedThingInspector.
     */
    getFacetContent(): Control[];
    /**
     * Gets content of aggregation {@link #getFacets facets}.
     *
     * The list of the sap.suite.ui.commons.FacetOverview objects.
     */
    getFacets(): FacetOverview[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the control.
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets content of aggregation {@link #getKpis kpis}.
     *
     * A set of the KPI tiles to be shown in the header. Currently only 3 tiles from the list are displayed
     * on the desktop and tablet. On the phone, all tiles are displayed in a swipeable container.
     */
    getKpis(): KpiTile[];
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name of the thing.
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets content of aggregation {@link #getPages pages}.
     *
     * Contains pages except for Master and Detail.
     */
    getPages(): Control[];
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the thing.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Gets content of aggregation {@link #getTransactions transactions}.
     *
     * Menu items for transaction popup.
     */
    getTransactions(): Control[];
    /**
     * Gets current value of property {@link #getTransactionsVisible transactionsVisible}.
     *
     * If set to true, the Transaction button appears.
     *
     * Default value is `false`.
     *
     * @returns Value of property `transactionsVisible`
     */
    getTransactionsVisible(): boolean;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getActions actions}. and returns its
     * index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfAction(
      /**
       * The action whose index is looked for
       */
      oAction: Button
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.FacetOverview` in the aggregation {@link #getFacets facets}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFacet(
      /**
       * The facet whose index is looked for
       */
      oFacet: FacetOverview
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getFacetContent facetContent}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfFacetContent(
      /**
       * The facetContent whose index is looked for
       */
      oFacetContent: Control
    ): int;
    /**
     * Checks for the provided `sap.suite.ui.commons.KpiTile` in the aggregation {@link #getKpis kpis}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfKpi(
      /**
       * The kpi whose index is looked for
       */
      oKpi: KpiTile
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getPages pages}. and returns
     * its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfPage(
      /**
       * The page whose index is looked for
       */
      oPage: Control
    ): int;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getTransactions transactions}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfTransaction(
      /**
       * The transaction whose index is looked for
       */
      oTransaction: Control
    ): int;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Inserts a action into the aggregation {@link #getActions actions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertAction(
      /**
       * The action to insert; if empty, nothing is inserted
       */
      oAction: Button,
      /**
       * The `0`-based index the action should be inserted at; for a negative value of `iIndex`, the action is
       * inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a facet into the aggregation {@link #getFacets facets}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFacet(
      /**
       * The facet to insert; if empty, nothing is inserted
       */
      oFacet: FacetOverview,
      /**
       * The `0`-based index the facet should be inserted at; for a negative value of `iIndex`, the facet is inserted
       * at position 0; for a value greater than the current size of the aggregation, the facet is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a facetContent into the aggregation {@link #getFacetContent facetContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertFacetContent(
      /**
       * The facetContent to insert; if empty, nothing is inserted
       */
      oFacetContent: Control,
      /**
       * The `0`-based index the facetContent should be inserted at; for a negative value of `iIndex`, the facetContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the facetContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a kpi into the aggregation {@link #getKpis kpis}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertKpi(
      /**
       * The kpi to insert; if empty, nothing is inserted
       */
      oKpi: KpiTile,
      /**
       * The `0`-based index the kpi should be inserted at; for a negative value of `iIndex`, the kpi is inserted
       * at position 0; for a value greater than the current size of the aggregation, the kpi is inserted at the
       * last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a page into the aggregation {@link #getPages pages}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertPage(
      /**
       * The page to insert; if empty, nothing is inserted
       */
      oPage: Control,
      /**
       * The `0`-based index the page should be inserted at; for a negative value of `iIndex`, the page is inserted
       * at position 0; for a value greater than the current size of the aggregation, the page is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Inserts a transaction into the aggregation {@link #getTransactions transactions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertTransaction(
      /**
       * The transaction to insert; if empty, nothing is inserted
       */
      oTransaction: Control,
      /**
       * The `0`-based index the transaction should be inserted at; for a negative value of `iIndex`, the transaction
       * is inserted at position 0; for a value greater than the current size of the aggregation, the transaction
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Removes a action from the aggregation {@link #getActions actions}.
     *
     * @returns The removed action or `null`
     */
    removeAction(
      /**
       * The action to remove or its index or id
       */
      vAction: int | string | Button
    ): Button | null;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Removes all the controls from the aggregation {@link #getActions actions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllActions(): Button[];
    /**
     * Removes all the controls from the aggregation {@link #getFacetContent facetContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFacetContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getFacets facets}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllFacets(): FacetOverview[];
    /**
     * Removes all the controls from the aggregation {@link #getKpis kpis}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllKpis(): KpiTile[];
    /**
     * Removes all the controls from the aggregation {@link #getPages pages}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllPages(): Control[];
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Removes all the controls from the aggregation {@link #getTransactions transactions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllTransactions(): Control[];
    /**
     * Removes a facet from the aggregation {@link #getFacets facets}.
     *
     * @returns The removed facet or `null`
     */
    removeFacet(
      /**
       * The facet to remove or its index or id
       */
      vFacet: int | string | FacetOverview
    ): FacetOverview | null;
    /**
     * Removes a facetContent from the aggregation {@link #getFacetContent facetContent}.
     *
     * @returns The removed facetContent or `null`
     */
    removeFacetContent(
      /**
       * The facetContent to remove or its index or id
       */
      vFacetContent: int | string | Control
    ): Control | null;
    /**
     * Removes a kpi from the aggregation {@link #getKpis kpis}.
     *
     * @returns The removed kpi or `null`
     */
    removeKpi(
      /**
       * The kpi to remove or its index or id
       */
      vKpi: int | string | KpiTile
    ): KpiTile | null;
    /**
     * Removes a page from the aggregation {@link #getPages pages}.
     *
     * @returns The removed page or `null`
     */
    removePage(
      /**
       * The page to remove or its index or id
       */
      vPage: int | string | Control
    ): Control | null;
    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Removes a transaction from the aggregation {@link #getTransactions transactions}.
     *
     * @returns The removed transaction or `null`
     */
    removeTransaction(
      /**
       * The transaction to remove or its index or id
       */
      vTransaction: int | string | Control
    ): Control | null;
    /**
     * Sets a new value for property {@link #getActionsVisible actionsVisible}.
     *
     * If set to true, the Actions button appears.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActionsVisible(
      /**
       * New value for property `actionsVisible`
       */
      bActionsVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getConfigurationVisible configurationVisible}.
     *
     * If set to true, the Configuration button appears.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setConfigurationVisible(
      /**
       * New value for property `configurationVisible`
       */
      bConfigurationVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * The description of the thing.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDestroyPageOnBack destroyPageOnBack}.
     *
     * If set to true, destroys a page when the user chooses the Back button to leave this page.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDestroyPageOnBack(
      /**
       * New value for property `destroyPageOnBack`
       */
      bDestroyPageOnBack?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name of the thing.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the thing.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTransactionsVisible transactionsVisible}.
     *
     * If set to true, the Transaction button appears.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTransactionsVisible(
      /**
       * New value for property `transactionsVisible`
       */
      bTransactionsVisible?: boolean
    ): this;
  }
  export default UnifiedThingInspector;

  export interface $UnifiedThingInspectorSettings extends $ControlSettings {
    /**
     * The height of the control.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The title of the thing.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The name of the thing.
     */
    name?: string | PropertyBindingInfo;

    /**
     * The description of the thing.
     */
    description?: string | PropertyBindingInfo;

    /**
     * The icon to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to true, the Transaction button appears.
     */
    transactionsVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to true, the Actions button appears.
     */
    actionsVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to true, destroys a page when the user chooses the Back button to leave this page.
     */
    destroyPageOnBack?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to true, the Configuration button appears.
     */
    configurationVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The list of the sap.suite.ui.commons.FacetOverview objects.
     */
    facets?:
      | FacetOverview[]
      | FacetOverview
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * The content that appears on the detail page of the UnifiedThingInspector.
     */
    facetContent?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * A set of the KPI tiles to be shown in the header. Currently only 3 tiles from the list are displayed
     * on the desktop and tablet. On the phone, all tiles are displayed in a swipeable container.
     */
    kpis?: KpiTile[] | KpiTile | AggregationBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the transactionsButtonPress event handler instead.
     *
     * Menu items for transaction popup.
     */
    transactions?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
     * the actionsButtonPress event handler instead.
     *
     * Action sheet controls.
     */
    actions?: Button[] | Button | AggregationBindingInfo | `{${string}}`;

    /**
     * Contains pages except for Master and Detail.
     */
    pages?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * The event is fired when the user chooses the Back button.
     */
    backAction?: (oEvent: Event) => void;

    /**
     * The event is fired when the user chooses the Transactions button.
     */
    transactionsButtonPress?: (
      oEvent: Event<$UnifiedThingInspectorTransactionsButtonPressEventParameters>
    ) => void;

    /**
     * The event is fired when the user chooses the Actions button.
     */
    actionsButtonPress?: (
      oEvent: Event<$UnifiedThingInspectorActionsButtonPressEventParameters>
    ) => void;

    /**
     * The event is fired when the user chooses the Configuration button.
     */
    configurationButtonPress?: (
      oEvent: Event<$UnifiedThingInspectorConfigurationButtonPressEventParameters>
    ) => void;

    /**
     * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
     * new page has not started yet. This event can be aborted by the application with preventDefault(), which
     * means that there will be no navigation. This event is propogated from the inner NavContainer. The event
     * can also return internal Master and Detail pages.
     */
    navigate?: (
      oEvent: Event<$UnifiedThingInspectorNavigateEventParameters>
    ) => void;

    /**
     * The event is fired when navigation between two pages has completed. In case of animated transitions this
     * event is fired with some delay after the "navigate" event. This event is propogated from the inner NavContainer.
     * The event can also return internal Master and Detail pages.
     */
    afterNavigate?: (
      oEvent: Event<$UnifiedThingInspectorAfterNavigateEventParameters>
    ) => void;
  }

  export interface $UnifiedThingInspectorActionsButtonPressEventParameters {
    /**
     * The object that initiated the event.
     */
    caller?: object;
  }

  export interface $UnifiedThingInspectorAfterNavigateEventParameters {
    /**
     * The page that had been shown before navigation.
     */
    from?: Control;

    /**
     * The ID of the page that had been shown before navigation.
     */
    fromId?: string;

    /**
     * The page that is now shown after navigation.
     */
    to?: Control;

    /**
     * The ID of the page that is now shown after navigation.
     */
    toId?: string;

    /**
     * Whether the "to" page (more precisely: a control with the ID of the page that has been navigated to)
     * had not been shown/navigated to before.
     */
    firstTime?: boolean;

    /**
     * Whether was a forward navigation, triggered by "to()".
     */
    isTo?: boolean;

    /**
     * Whether this was a back navigation, triggered by "back()".
     */
    isBack?: boolean;

    /**
     * Whether this was a navigation to the root page, triggered by "backToTop()".
     */
    isBackToTop?: boolean;

    /**
     * Whether this was a navigation to the root page, triggered by "backToTop()".
     */
    isBackToPage?: boolean;

    /**
     * How the navigation was triggered, possible values are: "to", "back", and "backToTop".
     */
    direction?: string;
  }

  export interface $UnifiedThingInspectorBackActionEventParameters {}

  export interface $UnifiedThingInspectorConfigurationButtonPressEventParameters {
    /**
     * The object that initiated the event.
     */
    caller?: object;
  }

  export interface $UnifiedThingInspectorNavigateEventParameters {
    /**
     * The page that was shown before the current navigation.
     */
    from?: Control;

    /**
     * The ID of the page that was shown before the current navigation.
     */
    fromId?: string;

    /**
     * The page that will be shown after the current navigation.
     */
    to?: Control;

    /**
     * The ID of the page that will be shown after the current navigation.
     */
    toId?: string;

    /**
     * Whether the "to" page (more precisely: a control with the ID of the page that is currently navigated
     * to) has not been shown/navigated to before.
     */
    firstTime?: boolean;

    /**
     * Whether this is a forward navigation, triggered by "to()".
     */
    isTo?: boolean;

    /**
     * Whether this is a back navigation, triggered by "back()".
     */
    isBack?: boolean;

    /**
     * Whether this is a navigation to the root page, triggered by "backToTop()".
     */
    isBackToTop?: boolean;

    /**
     * Whether this was a navigation to the root page, triggered by "backToTop()".
     */
    isBackToPage?: boolean;

    /**
     * How the navigation was triggered, possible values are: "to", "back", and "backToTop".
     */
    direction?: string;
  }

  export interface $UnifiedThingInspectorTransactionsButtonPressEventParameters {
    /**
     * The object that initiated the event.
     */
    caller?: object;
  }
}

declare module "sap/suite/ui/commons/util/HtmlElement" {
  import BaseObject from "sap/ui/base/Object";

  import Control from "sap/ui/core/Control";

  import Metadata from "sap/ui/base/Metadata";

  import HtmlElementRenderer from "sap/suite/ui/commons/util/HtmlElementRenderer";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * HtmlElement A model class for holding information about one HTML tag.
   */
  class HtmlElement extends BaseObject {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a HtmlElement which resembles one HTML tag.
     */
    constructor(
      /**
       * Tag name (eg. div, ul etc.).
       */
      sName: string
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.suite.ui.commons.util.HtmlElement with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HtmlElement>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.suite.ui.commons.util.HtmlElement.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds a child to the element. A child can be either text, another HtmlElement or a Control. Children will
     * e rendered as a content of this element.
     */
    addChild(
      /**
       * Child to add.
       */
      oChild: string | HtmlElement | Control
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds a string child and escapes it using encodeHTML.
     */
    addChildEscaped(
      /**
       * Text to add.
       */
      sText: string,
      /**
       * If true, \n will be converted to
       * .
       */
      bConvertLineBreakToBr: boolean
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds a class.
     */
    addClass(
      /**
       * CSS class to add.
       */
      sClass: string
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds all html relevant data from UI5 control. It sets ID, adds all custom data and adds custom style
     * classes. This function should be called on the element which resembles the rendered control. It's usually
     * the top element.
     */
    addControlData(
      /**
       * Control to load data from. Usually the control which resembles this element.
       */
      oControl: Control
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds a HTML style (eg. "color:red").
     */
    addStyle(
      /**
       * Name of the style (eg. margin, color).
       */
      sName: string,
      /**
       * Value of the style.
       */
      oValue: string | number
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a renderer for this tag.
     *
     * @returns The newly created renderer instance
     */
    getRenderer(): HtmlElementRenderer;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets an attribute.
     */
    setAttribute(
      /**
       * Attribute name.
       */
      sKey: string,
      /**
       * Value of an attribute.
       */
      oValue: string | number | boolean,
      /**
       * Tells if the value should be escaped using encodeHTML.
       */
      bEscape?: boolean
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets id attribute.
     */
    setId(
      /**
       * Id to set.
       */
      sId: string,
      /**
       * If true, data-sap-ui will be set to the Id as well.
       */
      bAddSapUi?: boolean
    ): void;
  }
  export default HtmlElement;
}

declare module "sap/suite/ui/commons/util/HtmlElementRenderer" {
  import BaseObject from "sap/ui/base/Object";

  import HtmlElement from "sap/suite/ui/commons/util/HtmlElement";

  import RenderManager from "sap/ui/core/RenderManager";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * HtmlElementRenderer A renderer for HtmlElement.
   */
  class HtmlElementRenderer extends BaseObject {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a renderer for HtmlElement.
     */
    constructor(
      /**
       * Html element to render.
       */
      oHtmlElement: HtmlElement
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.suite.ui.commons.util.HtmlElementRenderer with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HtmlElementRenderer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.suite.ui.commons.util.HtmlElementRenderer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Renders all attributes of parent tag.
     */
    _renderAttributes(
      /**
       * RenderManager used for outputting content.
       */
      oRm: RenderManager
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Renders children of given node.
     */
    _renderChildren(
      /**
       * RenderManager used for outputting content.
       */
      oRm: RenderManager
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Renders HtmlElement to given render manager.
     */
    render(
      /**
       * RenderManager used for outputting content.
       */
      oRm: RenderManager
    ): void;
  }
  export default HtmlElementRenderer;
}

declare module "sap/suite/ui/commons/util/ManagedObjectRegister" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  import ManagedObject from "sap/ui/base/ManagedObject";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * A registry which keeps a set of managed objects and allows you to lazy load them and destroy them at
   * once. A lot of controls keep those object as private properties and destroies them one by one. Instead
   * you can just use:
   * ```javascript
   *
   * this._objectRegister = new ManagedObjectRegister();
   * this._objectRegister.register("Button", function() {
   *  return new Button(...);
   * });
   *
   * this._objectRegister.getButton()...
   *
   * this._objectRegister.destroyAll();
   * ```
   */
  class ManagedObjectRegister extends BaseObject {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates an object registry for storing references to managed objects.
     */
    constructor();

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.suite.ui.commons.util.ManagedObjectRegister with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ManagedObjectRegister>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.suite.ui.commons.util.ManagedObjectRegister.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Destroys all objects in the registry and removes it's definition.
     */
    destroyAll(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Destroys an object and removes it from the registry.
     */
    destroyObject(
      /**
       * Key of the object.
       */
      sKey: string
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a stored object. If called without parameters it will return object registered with key "Object".
     *
     * @returns An object from the register. If the object doesn't exist it will get created by it's factory
     * function.
     */
    getObject(
      /**
       * Key of the object.
       */
      sKey?: string
    ): ManagedObject;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns true if there is the object registered and created. If there is not triggered factory function,
     * returns false.
     *
     * @returns True for existing object
     */
    isObjectInitialized(
      /**
       * Key of the object.
       */
      sKey?: string
    ): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Registers an object. Registry will automatically create a getter for the object.
     */
    register(
      /**
       * Key of the object. Should start with capital letter.
       */
      sKey: string,
      /**
       * A managed object to register or a factory function which can build the object. Factory function can be
       * used for lazy loading of the object. Register will pass sKey to the function, so it can be shared for
       * more objects.
       */
      oFactoryFunction: Function | ManagedObject
    ): void;
  }
  export default ManagedObjectRegister;
}

declare module "sap/suite/ui/commons/VerticalNavigationBar" {
  import {
    default as NavigationBar,
    $NavigationBarSettings,
  } from "sap/ui/ux3/NavigationBar";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.32) - Deprecated. sap.uxap.ObjectPageLayout should be used instead.
   *
   * This control extends the sap.ui.ux3.NavigationBar and allows you to display navigation items vertically.
   * The navigation list can contain sap.ui.ux3.NavigationItem or sap.suite.ui.commons.CountingNavigationItem
   * controls.
   */
  class VerticalNavigationBar extends NavigationBar {
    /**
     * Constructor for a new VerticalNavigationBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.ux3.NavigationBar#constructor sap.ui.ux3.NavigationBar }
     * can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalNavigationBarSettings
    );
    /**
     * Constructor for a new VerticalNavigationBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.ux3.NavigationBar#constructor sap.ui.ux3.NavigationBar }
     * can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VerticalNavigationBarSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.VerticalNavigationBar with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.ux3.NavigationBar.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VerticalNavigationBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.VerticalNavigationBar.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }
  export default VerticalNavigationBar;

  export interface $VerticalNavigationBarSettings
    extends $NavigationBarSettings {}
}

declare module "sap/suite/ui/commons/ViewRepeater" {
  import {
    default as RowRepeater,
    $RowRepeaterSettings,
  } from "sap/ui/commons/RowRepeater";

  import RepeaterViewConfiguration from "sap/suite/ui/commons/RepeaterViewConfiguration";

  import Event from "sap/ui/base/Event";

  import { ID, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Control from "sap/ui/core/Control";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
   *
   * This control extends the sap.ui.commons.RowRepeater control providing an ability to change data representation
   * by switching between a number of views. The data can be displayed not only in rows but also in tiles
   * that are adjusted to fill the entire horizontal space in a row.
   */
  class ViewRepeater extends RowRepeater {
    /**
     * Constructor for a new ViewRepeater.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ViewRepeaterSettings
    );
    /**
     * Constructor for a new ViewRepeater.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ViewRepeaterSettings
    );

    /**
     * Creates a new subclass of class sap.suite.ui.commons.ViewRepeater with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.commons.RowRepeater.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ViewRepeater>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.suite.ui.commons.ViewRepeater.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some view to the aggregation {@link #getViews views}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addView(
      /**
       * The view to add; if empty, nothing is inserted
       */
      oView: RepeaterViewConfiguration
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:changeView changeView} event of this `sap.suite.ui.commons.ViewRepeater`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
     *
     * This event is fired when a user switches between views.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChangeView(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ViewRepeaterChangeViewEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:changeView changeView} event of this `sap.suite.ui.commons.ViewRepeater`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
     *
     * This event is fired when a user switches between views.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachChangeView(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ViewRepeaterChangeViewEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.ViewRepeater`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
     *
     * This event is fired when the user performs a search.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ViewRepeaterSearchEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.ViewRepeater`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
     *
     * This event is fired when the user performs a search.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSearch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event<$ViewRepeaterSearchEventParameters>) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the views in the aggregation {@link #getViews views}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyViews(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:changeView changeView} event of this `sap.suite.ui.commons.ViewRepeater`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachChangeView(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ViewRepeaterChangeViewEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.suite.ui.commons.ViewRepeater`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSearch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event<$ViewRepeaterSearchEventParameters>) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:changeView changeView} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireChangeView(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ViewRepeaterChangeViewEventParameters
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:search search} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSearch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: $ViewRepeaterSearchEventParameters
    ): this;
    /**
     * Gets current value of property {@link #getDefaultViewIndex defaultViewIndex}.
     *
     * The index of the default view starting from 0. The view is selected on the initial rendering of the control.
     * If the index is greater than the total quantity of the views, the last view is selected.
     *
     * Default value is `0`.
     *
     * @returns Value of property `defaultViewIndex`
     */
    getDefaultViewIndex(): int;
    /**
     * Gets current value of property {@link #getExternal external}.
     *
     * Indicates if the external representation of the current view is rendered.
     *
     * Default value is `false`.
     *
     * @returns Value of property `external`
     */
    getExternal(): boolean;
    /**
     * ID of the element which is the current target of the association {@link #getExternalRepresentation externalRepresentation},
     * or `null`.
     */
    getExternalRepresentation(): ID;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the control. Only applicable if the responsive property is set to true.
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getItemHeight itemHeight}.
     *
     * The height of the tile in the current view in pixels. Only applicable if the responsive property is set
     * to true. This value is used for calculating the number of tile rows.
     *
     * @returns Value of property `itemHeight`
     */
    getItemHeight(): int;
    /**
     * Gets current value of property {@link #getItemMinWidth itemMinWidth}.
     *
     * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to
     * true.
     *
     * @returns Value of property `itemMinWidth`
     */
    getItemMinWidth(): int;
    /**
     * Gets current value of property {@link #getResponsive responsive}.
     *
     * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
     * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
     * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
     * of columns depends on the parent control's width. If you resize the control, the number of columns may
     * change respectively so that the content tiles can fill the entire space of a row.
     *
     * Default value is `false`.
     *
     * @returns Value of property `responsive`
     */
    getResponsive(): boolean;
    /**
     * Gets current value of property {@link #getShowSearchField showSearchField}.
     *
     * Indicates if the search field panel is shown.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showSearchField`
     */
    getShowSearchField(): boolean;
    /**
     * Gets current value of property {@link #getShowViews showViews}.
     *
     * Indicates if the view selector panel is shown.
     *
     * Default value is `true`.
     *
     * @returns Value of property `showViews`
     */
    getShowViews(): boolean;
    /**
     * Gets content of aggregation {@link #getViews views}.
     *
     * The list of views for the data representation.
     */
    getViews(): RepeaterViewConfiguration[];
    /**
     * Checks for the provided `sap.suite.ui.commons.RepeaterViewConfiguration` in the aggregation {@link #getViews views}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfView(
      /**
       * The view whose index is looked for
       */
      oView: RepeaterViewConfiguration
    ): int;
    /**
     * Inserts a view into the aggregation {@link #getViews views}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertView(
      /**
       * The view to insert; if empty, nothing is inserted
       */
      oView: RepeaterViewConfiguration,
      /**
       * The `0`-based index the view should be inserted at; for a negative value of `iIndex`, the view is inserted
       * at position 0; for a value greater than the current size of the aggregation, the view is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getViews views}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllViews(): RepeaterViewConfiguration[];
    /**
     * Removes a view from the aggregation {@link #getViews views}.
     *
     * @returns The removed view or `null`
     */
    removeView(
      /**
       * The view to remove or its index or id
       */
      vView: int | string | RepeaterViewConfiguration
    ): RepeaterViewConfiguration | null;
    /**
     * Sets a new value for property {@link #getDefaultViewIndex defaultViewIndex}.
     *
     * The index of the default view starting from 0. The view is selected on the initial rendering of the control.
     * If the index is greater than the total quantity of the views, the last view is selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDefaultViewIndex(
      /**
       * New value for property `defaultViewIndex`
       */
      iDefaultViewIndex?: int
    ): this;
    /**
     * Sets a new value for property {@link #getExternal external}.
     *
     * Indicates if the external representation of the current view is rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExternal(
      /**
       * New value for property `external`
       */
      bExternal?: boolean
    ): this;
    /**
     * Sets the associated {@link #getExternalRepresentation externalRepresentation}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExternalRepresentation(
      /**
       * ID of an element which becomes the new target of this externalRepresentation association; alternatively,
       * an element instance may be given
       */
      oExternalRepresentation: ID | Control
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the control. Only applicable if the responsive property is set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getItemHeight itemHeight}.
     *
     * The height of the tile in the current view in pixels. Only applicable if the responsive property is set
     * to true. This value is used for calculating the number of tile rows.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setItemHeight(
      /**
       * New value for property `itemHeight`
       */
      iItemHeight?: int
    ): this;
    /**
     * Sets a new value for property {@link #getItemMinWidth itemMinWidth}.
     *
     * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to
     * true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setItemMinWidth(
      /**
       * New value for property `itemMinWidth`
       */
      iItemMinWidth?: int
    ): this;
    /**
     * Sets a new value for property {@link #getResponsive responsive}.
     *
     * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
     * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
     * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
     * of columns depends on the parent control's width. If you resize the control, the number of columns may
     * change respectively so that the content tiles can fill the entire space of a row.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setResponsive(
      /**
       * New value for property `responsive`
       */
      bResponsive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSearchField showSearchField}.
     *
     * Indicates if the search field panel is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowSearchField(
      /**
       * New value for property `showSearchField`
       */
      bShowSearchField?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowViews showViews}.
     *
     * Indicates if the view selector panel is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowViews(
      /**
       * New value for property `showViews`
       */
      bShowViews?: boolean
    ): this;
  }
  export default ViewRepeater;

  export interface $ViewRepeaterSettings extends $RowRepeaterSettings {
    /**
     * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to
     * true.
     */
    itemMinWidth?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
     * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
     * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
     * of columns depends on the parent control's width. If you resize the control, the number of columns may
     * change respectively so that the content tiles can fill the entire space of a row.
     */
    responsive?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The index of the default view starting from 0. The view is selected on the initial rendering of the control.
     * If the index is greater than the total quantity of the views, the last view is selected.
     */
    defaultViewIndex?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates if the search field panel is shown.
     */
    showSearchField?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates if the view selector panel is shown.
     */
    showViews?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates if the external representation of the current view is rendered.
     */
    external?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The height of the tile in the current view in pixels. Only applicable if the responsive property is set
     * to true. This value is used for calculating the number of tile rows.
     */
    itemHeight?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * The height of the control. Only applicable if the responsive property is set to true.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The list of views for the data representation.
     */
    views?:
      | RepeaterViewConfiguration[]
      | RepeaterViewConfiguration
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * The control to be rendered instead of the repeater's own content.
     */
    externalRepresentation?: Control | string;

    /**
     * This event is fired when the user performs a search.
     */
    search?: (oEvent: Event<$ViewRepeaterSearchEventParameters>) => void;

    /**
     * This event is fired when a user switches between views.
     */
    changeView?: (
      oEvent: Event<$ViewRepeaterChangeViewEventParameters>
    ) => void;
  }

  export interface $ViewRepeaterChangeViewEventParameters {
    /**
     * Contains an index of the previous view in the Views aggregation.
     */
    oldViewIndex?: int;

    /**
     * Contains an index of the new view in the Views aggregation.
     */
    newViewIndex?: int;

    /**
     * Contains an ID of the filter in the Filters aggregation.
     */
    filterId?: string;

    /**
     * Contains an ID of the sorter in the Sorters aggregation.
     */
    sorterId?: string;

    /**
     * Contains a page number.
     */
    page?: int;
  }

  export interface $ViewRepeaterSearchEventParameters {
    /**
     * The search query.
     */
    query?: string;
  }
}

declare namespace sap {
  interface IUI5DefineDependencyNames {
    "sap/suite/ui/commons/AriaProperties": undefined;

    "sap/suite/ui/commons/BulletChart": undefined;

    "sap/suite/ui/commons/BulletChartData": undefined;

    "sap/suite/ui/commons/BusinessCard": undefined;

    "sap/suite/ui/commons/CalculationBuilder": undefined;

    "sap/suite/ui/commons/CalculationBuilderFunction": undefined;

    "sap/suite/ui/commons/CalculationBuilderGroup": undefined;

    "sap/suite/ui/commons/CalculationBuilderItem": undefined;

    "sap/suite/ui/commons/CalculationBuilderValidationResult": undefined;

    "sap/suite/ui/commons/CalculationBuilderVariable": undefined;

    "sap/suite/ui/commons/ChartContainer": undefined;

    "sap/suite/ui/commons/ChartContainerContent": undefined;

    "sap/suite/ui/commons/ChartContainerToolbarPlaceholder": undefined;

    "sap/suite/ui/commons/ChartTile": undefined;

    "sap/suite/ui/commons/CloudFilePicker": undefined;

    "sap/suite/ui/commons/collaboration/BaseHelperService": undefined;

    "sap/suite/ui/commons/collaboration/CollaborationHelper": undefined;

    "sap/suite/ui/commons/collaboration/ServiceContainer": undefined;

    "sap/suite/ui/commons/collaboration/TeamsHelperService": undefined;

    "sap/suite/ui/commons/ColumnData": undefined;

    "sap/suite/ui/commons/ColumnMicroChart": undefined;

    "sap/suite/ui/commons/ColumnMicroChartLabel": undefined;

    "sap/suite/ui/commons/ComparisonChart": undefined;

    "sap/suite/ui/commons/ComparisonData": undefined;

    "sap/suite/ui/commons/DateRangeScroller": undefined;

    "sap/suite/ui/commons/DateRangeSlider": undefined;

    "sap/suite/ui/commons/DateRangeSliderInternal": undefined;

    "sap/suite/ui/commons/DeltaMicroChart": undefined;

    "sap/suite/ui/commons/DynamicContainer": undefined;

    "sap/suite/ui/commons/FacetOverview": undefined;

    "sap/suite/ui/commons/FeedItem": undefined;

    "sap/suite/ui/commons/FeedItemHeader": undefined;

    "sap/suite/ui/commons/FeedTile": undefined;

    "sap/suite/ui/commons/GenericTile": undefined;

    "sap/suite/ui/commons/GenericTile2X2": undefined;

    "sap/suite/ui/commons/HarveyBallMicroChart": undefined;

    "sap/suite/ui/commons/HarveyBallMicroChartItem": undefined;

    "sap/suite/ui/commons/HeaderCell": undefined;

    "sap/suite/ui/commons/HeaderCellItem": undefined;

    "sap/suite/ui/commons/HeaderContainer": undefined;

    "sap/suite/ui/commons/imageeditor/CropCustomShapeHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/CropEllipseHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/CropRectangleHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/CustomSizeItem": undefined;

    "sap/suite/ui/commons/imageeditor/FilterHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/FlipHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/HistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/ImageEditor": undefined;

    "sap/suite/ui/commons/imageeditor/ImageEditorContainer": undefined;

    "sap/suite/ui/commons/imageeditor/ImageEditorResponsiveContainer": undefined;

    "sap/suite/ui/commons/imageeditor/ResizeHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/RotateHistoryItem": undefined;

    "sap/suite/ui/commons/InfoTile": undefined;

    "sap/suite/ui/commons/JamContent": undefined;

    "sap/suite/ui/commons/KpiTile": undefined;

    "sap/suite/ui/commons/LaunchTile": undefined;

    "sap/suite/ui/commons/library": undefined;

    "sap/suite/ui/commons/LinkActionSheet": undefined;

    "sap/suite/ui/commons/MicroAreaChart": undefined;

    "sap/suite/ui/commons/MicroAreaChartItem": undefined;

    "sap/suite/ui/commons/MicroAreaChartLabel": undefined;

    "sap/suite/ui/commons/MicroAreaChartPoint": undefined;

    "sap/suite/ui/commons/MicroProcessFlow": undefined;

    "sap/suite/ui/commons/MicroProcessFlowItem": undefined;

    "sap/suite/ui/commons/MonitoringContent": undefined;

    "sap/suite/ui/commons/MonitoringTile": undefined;

    "sap/suite/ui/commons/networkgraph/ActionButton": undefined;

    "sap/suite/ui/commons/networkgraph/Coordinate": undefined;

    "sap/suite/ui/commons/networkgraph/ElementAttribute": undefined;

    "sap/suite/ui/commons/networkgraph/ElementBase": undefined;

    "sap/suite/ui/commons/networkgraph/Graph": undefined;

    "sap/suite/ui/commons/networkgraph/GraphMap": undefined;

    "sap/suite/ui/commons/networkgraph/Group": undefined;

    "sap/suite/ui/commons/networkgraph/layout/ForceBasedLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/ForceDirectedLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/LayeredLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm": undefined;

    "sap/suite/ui/commons/networkgraph/layout/LayoutTask": undefined;

    "sap/suite/ui/commons/networkgraph/layout/NoopLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/SwimLaneChainLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/TwoColumnsLayout": undefined;

    "sap/suite/ui/commons/networkgraph/Line": undefined;

    "sap/suite/ui/commons/networkgraph/Node": undefined;

    "sap/suite/ui/commons/networkgraph/NodeImage": undefined;

    "sap/suite/ui/commons/networkgraph/Status": undefined;

    "sap/suite/ui/commons/networkgraph/SvgBase": undefined;

    "sap/suite/ui/commons/networkgraph/util/Dijkstra": undefined;

    "sap/suite/ui/commons/NewsContent": undefined;

    "sap/suite/ui/commons/NoteTaker": undefined;

    "sap/suite/ui/commons/NoteTakerCard": undefined;

    "sap/suite/ui/commons/NoteTakerFeeder": undefined;

    "sap/suite/ui/commons/NumericTile": undefined;

    "sap/suite/ui/commons/PictureZoomIn": undefined;

    "sap/suite/ui/commons/ProcessFlow": undefined;

    "sap/suite/ui/commons/ProcessFlowConnection": undefined;

    "sap/suite/ui/commons/ProcessFlowConnectionLabel": undefined;

    "sap/suite/ui/commons/ProcessFlowLaneHeader": undefined;

    "sap/suite/ui/commons/ProcessFlowNode": undefined;

    "sap/suite/ui/commons/RepeaterViewConfiguration": undefined;

    "sap/suite/ui/commons/SplitButton": undefined;

    "sap/suite/ui/commons/statusindicator/Circle": undefined;

    "sap/suite/ui/commons/statusindicator/CustomShape": undefined;

    "sap/suite/ui/commons/statusindicator/DiscreteThreshold": undefined;

    "sap/suite/ui/commons/statusindicator/FillingOption": undefined;

    "sap/suite/ui/commons/statusindicator/LibraryShape": undefined;

    "sap/suite/ui/commons/statusindicator/Path": undefined;

    "sap/suite/ui/commons/statusindicator/PropertyThreshold": undefined;

    "sap/suite/ui/commons/statusindicator/Rectangle": undefined;

    "sap/suite/ui/commons/statusindicator/Shape": undefined;

    "sap/suite/ui/commons/statusindicator/ShapeGroup": undefined;

    "sap/suite/ui/commons/statusindicator/SimpleShape": undefined;

    "sap/suite/ui/commons/statusindicator/StatusIndicator": undefined;

    "sap/suite/ui/commons/taccount/TAccount": undefined;

    "sap/suite/ui/commons/taccount/TAccountGroup": undefined;

    "sap/suite/ui/commons/taccount/TAccountItem": undefined;

    "sap/suite/ui/commons/taccount/TAccountItemProperty": undefined;

    "sap/suite/ui/commons/taccount/TAccountPanel": undefined;

    "sap/suite/ui/commons/TargetFilter": undefined;

    "sap/suite/ui/commons/TargetFilterColumn": undefined;

    "sap/suite/ui/commons/TargetFilterMeasureColumn": undefined;

    "sap/suite/ui/commons/ThingCollection": undefined;

    "sap/suite/ui/commons/ThreePanelThingInspector": undefined;

    "sap/suite/ui/commons/ThreePanelThingViewer": undefined;

    "sap/suite/ui/commons/TileContent": undefined;

    "sap/suite/ui/commons/TileContent2X2": undefined;

    "sap/suite/ui/commons/Timeline": undefined;

    "sap/suite/ui/commons/TimelineFilterListItem": undefined;

    "sap/suite/ui/commons/TimelineItem": undefined;

    "sap/suite/ui/commons/TimelineNavigator": undefined;

    "sap/suite/ui/commons/UnifiedThingGroup": undefined;

    "sap/suite/ui/commons/UnifiedThingInspector": undefined;

    "sap/suite/ui/commons/util/HtmlElement": undefined;

    "sap/suite/ui/commons/util/HtmlElementRenderer": undefined;

    "sap/suite/ui/commons/util/ManagedObjectRegister": undefined;

    "sap/suite/ui/commons/VerticalNavigationBar": undefined;

    "sap/suite/ui/commons/ViewRepeater": undefined;
  }
}

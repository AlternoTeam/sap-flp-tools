// For Library Version: 1.115.0

declare module "sap/landvisz/library" {
  /**
   * @deprecated (since 1.98)
   *
   * Action Type of a action
   */
  export enum ActionType {
    /**
     * Menu action type
     */
    MENU = "MENU",
    /**
     * Normal action type
     */
    NORMAL = "NORMAL",
  }
  /**
   * @deprecated (since 1.98)
   *
   * [Enter description for ComponentType]
   */
  export enum ComponentType {
    /**
     * component type in not defined
     */
    notDefined = "notDefined",
    /**
     * on demand component type
     */
    onDemand = "onDemand",
    /**
     * on premise component type
     */
    onPremise = "onPremise",
  }
  /**
   * @deprecated (since 1.98)
   *
   * type file for ps, ts and mob soln
   */
  export enum ConnectionLine {
    /**
     * Line with arrow at end
     */
    Arrow = "Arrow",
    /**
     * Plain line
     */
    Line = "Line",
  }
  /**
   * @deprecated (since 1.98)
   *
   * type file for ps, ts and mob soln
   */
  export enum ConnectionType {
    /**
     * mob type
     */
    MobileSolution = "MobileSolution",
    /**
     * ps type
     */
    ProductSystem = "ProductSystem",
    /**
     * ts type
     */
    TechnicalSystem = "TechnicalSystem",
  }
  /**
   * @deprecated (since 1.98)
   *
   * View type of landscape viewer
   */
  export enum DependencyType {
    /**
     * Landscape view for selected view
     */
    BOX_VIEW = "BOX_VIEW",
    /**
     * dependency view
     */
    NETWORK_VIEW = "NETWORK_VIEW",
  }
  /**
   * @deprecated (since 1.98)
   *
   * View Visibility of landscape viewer
   */
  export enum DependencyVisibility {
    /**
     * make both view visible
     */
    BOTH = "BOTH",
    /**
     * Box Dependency View
     */
    BOX = "BOX",
    /**
     * Network dependency view
     */
    NETWORK = "NETWORK",
  }
  /**
   * @deprecated (since 1.98)
   *
   * System Size supported
   */
  export enum EntityCSSSize {
    /**
     * Large size of system
     */
    Large = "Large",
    /**
     * Largest size of system
     */
    Largest = "Largest",
    /**
     * Medium size of system
     */
    Medium = "Medium",
    /**
     * Regular size of system
     */
    Regular = "Regular",
    /**
     * new size regular size
     */
    RegularSmall = "RegularSmall",
    /**
     * Small size of system
     */
    Small = "Small",
    /**
     * Smaller size of system
     */
    Smaller = "Smaller",
    /**
     * Smallest size of system
     */
    Smallest = "Smallest",
  }
  /**
   * @deprecated (since 1.98)
   *
   * Type of object in the landscape
   */
  export enum LandscapeObject {
    /**
     * Database type
     */
    Database = "Database",
    /**
     * Product type
     */
    Product = "Product",
    /**
     * Product systems type
     */
    ProductSystem = "ProductSystem",
    /**
     * Product version type
     */
    ProductVersion = "ProductVersion",
    /**
     * SAP Component Type
     */
    SapComponent = "SapComponent",
    /**
     * Technical system type
     */
    TechnicalSystem = "TechnicalSystem",
    /**
     * SAP Track Type
     */
    Track = "Track",
  }
  /**
   * @deprecated (since 1.98)
   *
   * sampl doc
   */
  export enum ModelingStatus {
    /**
     * sample doc for types - ABAP
     */
    ERROR = "ERROR",
    /**
     * sample doc
     */
    NORMAL = "NORMAL",
    /**
     * sample doc
     */
    WARNING = "WARNING",
  }
  /**
   * @deprecated (since 1.98)
   *
   * Action Type of a action
   */
  export enum OptionType {
    /**
     * Option applicable on entity
     */
    ENTITY = "ENTITY",
    /**
     * Option applicable on view
     */
    VIEW = "VIEW",
  }
  /**
   * @deprecated (since 1.98)
   *
   * position of selection view
   */
  export enum SelectionViewPosition {
    /**
     * Selection entity at center position
     */
    CENTER = "CENTER",
    /**
     * selection entity at left position
     */
    LEFT = "LEFT",
    /**
     * selection entity at right position
     */
    RIGHT = "RIGHT",
  }
  /**
   * @deprecated (since 1.98)
   *
   * View type of landscape viewer
   */
  export enum SolutionType {
    /**
     * Component view of a solution
     */
    COMPONENT_VIEW = "COMPONENT_VIEW",
    /**
     * Deploy view of a solution
     */
    DEPLOYMENT_VIEW = "DEPLOYMENT_VIEW",
  }
  /**
   * @deprecated (since 1.98)
   *
   * sampl doc
   */
  export enum TechnicalSystemType {
    /**
     * types: ABAP
     */
    ABAP = "ABAP",
    /**
     * types: APACHESERVER
     */
    APACHESERVER = "APACHESERVER",
    /**
     * types - DUAL
     */
    DUAL = "DUAL",
    /**
     * Types: GENERIC
     */
    GENERIC = "GENERIC",
    /**
     * Types: HANA DB
     */
    HANADB = "HANADB",
    /**
     * types - INTROSCOPEMGR
     */
    INTROSCOPEMGR = "INTROSCOPEMGR",
    /**
     * Types: INTROSCOPESTD
     */
    INTROSCOPESTD = "INTROSCOPESTD",
    /**
     * types: JAVA
     */
    JAVA = "JAVA",
    /**
     * types - LIVECACHESAP
     */
    LIVECACHESAP = "LIVECACHESAP",
    /**
     * types - MDM
     */
    MDM = "MDM",
    /**
     * Types: MSIISINST
     */
    MSIISINST = "MSIISINST",
    /**
     * types - .NET
     */
    MSNET = "MSNET",
    /**
     * types - DUAL
     */
    SBOP = "SBOP",
    /**
     * types: SUP
     */
    SUP = "SUP",
    /**
     * types: TREX
     */
    TREX = "TREX",
    /**
     * types: UNSP3TIER
     */
    UNSP3TIER = "UNSP3TIER",
    /**
     * types - UNSPAPP
     */
    UNSPAPP = "UNSPAPP",
    /**
     * Types: UNSPCLUSTER
     */
    UNSPCLUSTER = "UNSPCLUSTER",
    /**
     * types - WEBDISP
     */
    WEBDISP = "WEBDISP",
    /**
     * types: WEBSPHERE
     */
    WEBSPHERE = "WEBSPHERE",
  }
  /**
   * @deprecated (since 1.98)
   *
   * View type of landscape viewer
   */
  export enum ViewType {
    /**
     * dependency view
     */
    DEPENDENCY_VIEW = "DEPENDENCY_VIEW",
    /**
     * Landscape view for selected view
     */
    SELECTION_VIEW = "SELECTION_VIEW",
    /**
     * Solution View for a Landscape Objects
     */
    SOLUTION_VIEW = "SOLUTION_VIEW",
  }

  export namespace internal {
    /**
     * @deprecated (since 1.98)
     *
     * ContainerType
     */
    enum ContainerType {
      /**
       * Type Product
       */
      Product = "Product",
      /**
       * Product Instances in the system
       */
      ProductInstances = "ProductInstances",
      /**
       * Type Product version
       */
      ProductVersion = "ProductVersion",
      /**
       * Software Components in the system
       */
      SoftwareComponents = "SoftwareComponents",
    }
  }
}

declare module "sap/landvisz/ConnectionEntity" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import LinearRowField from "sap/landvisz/internal/LinearRowField";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ConnectionType } from "sap/landvisz/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Connection Entity of Dependency view
   */
  class ConnectionEntity extends Control {
    /**
     * Constructor for a new ConnectionEntity.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ConnectionEntitySettings
    );
    /**
     * Constructor for a new ConnectionEntity.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ConnectionEntitySettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.ConnectionEntity with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ConnectionEntity>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.ConnectionEntity.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some connectionData to the aggregation {@link #getConnectionData connectionData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addConnectionData(
      /**
       * The connectionData to add; if empty, nothing is inserted
       */
      oConnectionData: LinearRowField
    ): this;
    /**
     * Destroys all the connectionData in the aggregation {@link #getConnectionData connectionData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyConnectionData(): this;
    /**
     * Gets content of aggregation {@link #getConnectionData connectionData}.
     *
     * Linear row field renderer for connection Entity
     */
    getConnectionData(): LinearRowField[];
    /**
     * Gets current value of property {@link #getConnectionId connectionId}.
     *
     * id of connection Entity
     *
     * @returns Value of property `connectionId`
     */
    getConnectionId(): string;
    /**
     * Gets current value of property {@link #getDependencyTooltip dependencyTooltip}.
     *
     * tooltip for dependency type icon
     *
     * @returns Value of property `dependencyTooltip`
     */
    getDependencyTooltip(): string;
    /**
     * Gets current value of property {@link #getLinkedHeader linkedHeader}.
     *
     * link header data that is shared with in the entities
     *
     * @returns Value of property `linkedHeader`
     */
    getLinkedHeader(): string;
    /**
     * Gets current value of property {@link #getLinkId linkId}.
     *
     * ID which links the entities
     *
     * @returns Value of property `linkId`
     */
    getLinkId(): string;
    /**
     * Gets current value of property {@link #getShowOverlay showOverlay}.
     *
     * to show the overlay for highlightig
     *
     * Default value is `true`.
     *
     * @returns Value of property `showOverlay`
     */
    getShowOverlay(): boolean;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * size of connection Entity
     *
     * @returns Value of property `size`
     */
    getSize(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * type of a connection Entity
     *
     * @returns Value of property `type`
     */
    getType(): ConnectionType | keyof typeof ConnectionType;
    /**
     * Checks for the provided `sap.landvisz.internal.LinearRowField` in the aggregation {@link #getConnectionData connectionData}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfConnectionData(
      /**
       * The connectionData whose index is looked for
       */
      oConnectionData: LinearRowField
    ): int;
    /**
     * Inserts a connectionData into the aggregation {@link #getConnectionData connectionData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertConnectionData(
      /**
       * The connectionData to insert; if empty, nothing is inserted
       */
      oConnectionData: LinearRowField,
      /**
       * The `0`-based index the connectionData should be inserted at; for a negative value of `iIndex`, the connectionData
       * is inserted at position 0; for a value greater than the current size of the aggregation, the connectionData
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getConnectionData connectionData}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllConnectionData(): LinearRowField[];
    /**
     * Removes a connectionData from the aggregation {@link #getConnectionData connectionData}.
     *
     * @returns The removed connectionData or `null`
     */
    removeConnectionData(
      /**
       * The connectionData to remove or its index or id
       */
      vConnectionData: int | string | LinearRowField
    ): LinearRowField | null;
    /**
     * Sets a new value for property {@link #getConnectionId connectionId}.
     *
     * id of connection Entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setConnectionId(
      /**
       * New value for property `connectionId`
       */
      sConnectionId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDependencyTooltip dependencyTooltip}.
     *
     * tooltip for dependency type icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDependencyTooltip(
      /**
       * New value for property `dependencyTooltip`
       */
      sDependencyTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLinkedHeader linkedHeader}.
     *
     * link header data that is shared with in the entities
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLinkedHeader(
      /**
       * New value for property `linkedHeader`
       */
      sLinkedHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLinkId linkId}.
     *
     * ID which links the entities
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLinkId(
      /**
       * New value for property `linkId`
       */
      sLinkId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowOverlay showOverlay}.
     *
     * to show the overlay for highlightig
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowOverlay(
      /**
       * New value for property `showOverlay`
       */
      bShowOverlay?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * size of connection Entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * type of a connection Entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ConnectionType | keyof typeof ConnectionType
    ): this;
  }
  export default ConnectionEntity;

  export interface $ConnectionEntitySettings extends $ControlSettings {
    /**
     * id of connection Entity
     */
    connectionId?: string | PropertyBindingInfo;

    /**
     * size of connection Entity
     */
    size?: string | PropertyBindingInfo;

    /**
     * type of a connection Entity
     */
    type?:
      | (ConnectionType | keyof typeof ConnectionType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * ID which links the entities
     */
    linkId?: string | PropertyBindingInfo;

    /**
     * link header data that is shared with in the entities
     */
    linkedHeader?: string | PropertyBindingInfo;

    /**
     * tooltip for dependency type icon
     */
    dependencyTooltip?: string | PropertyBindingInfo;

    /**
     * to show the overlay for highlightig
     */
    showOverlay?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Linear row field renderer for connection Entity
     */
    connectionData?:
      | LinearRowField[]
      | LinearRowField
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/landvisz/Connector" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Connector of the entities
   */
  class Connector extends Control {
    /**
     * Constructor for a new Connector.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ConnectorSettings
    );
    /**
     * Constructor for a new Connector.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ConnectorSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.Connector with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Connector>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.Connector.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSource source}.
     *
     * source of a connection to be drawn
     *
     * @returns Value of property `source`
     */
    getSource(): string;
    /**
     * Gets current value of property {@link #getTarget target}.
     *
     * destination of the connection
     *
     * @returns Value of property `target`
     */
    getTarget(): string;
    /**
     * Sets a new value for property {@link #getSource source}.
     *
     * source of a connection to be drawn
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSource(
      /**
       * New value for property `source`
       */
      sSource?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTarget target}.
     *
     * destination of the connection
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTarget(
      /**
       * New value for property `target`
       */
      sTarget?: string
    ): this;
  }
  export default Connector;

  export interface $ConnectorSettings extends $ControlSettings {
    /**
     * source of a connection to be drawn
     */
    source?: string | PropertyBindingInfo;

    /**
     * destination of the connection
     */
    target?: string | PropertyBindingInfo;
  }
}

declare module "sap/landvisz/internal/ActionBar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Menu from "sap/ui/commons/Menu";

  import Event from "sap/ui/base/Event";

  import { ActionType, EntityCSSSize } from "sap/landvisz/library";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A control that render actions of a system
   */
  class ActionBar extends Control {
    /**
     * Constructor for a new internal/ActionBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ActionBarSettings
    );
    /**
     * Constructor for a new internal/ActionBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ActionBarSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.ActionBar with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ActionBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.ActionBar.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some menu to the aggregation {@link #getMenu menu}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addMenu(
      /**
       * The menu to add; if empty, nothing is inserted
       */
      oMenu: Menu
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.ActionBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.ActionBar` itself.
     *
     * click on the action bar
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.ActionBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.ActionBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.ActionBar` itself.
     *
     * click on the action bar
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.ActionBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the menu in the aggregation {@link #getMenu menu}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMenu(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.landvisz.internal.ActionBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:select select} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getActionLabel actionLabel}.
     *
     * label for action
     *
     * @returns Value of property `actionLabel`
     */
    getActionLabel(): string;
    /**
     * Gets current value of property {@link #getActionTooltip actionTooltip}.
     *
     * Tooltip for the action
     *
     * @returns Value of property `actionTooltip`
     */
    getActionTooltip(): string;
    /**
     * Gets current value of property {@link #getActionType actionType}.
     *
     * type of the action
     *
     * Default value is `NORMAL`.
     *
     * @returns Value of property `actionType`
     */
    getActionType(): ActionType | keyof typeof ActionType;
    /**
     * Gets current value of property {@link #getChangeView changeView}.
     *
     * new type of view is loaded while performing the action.
     *
     * Default value is `false`.
     *
     * @returns Value of property `changeView`
     */
    getChangeView(): boolean;
    /**
     * Gets current value of property {@link #getEnable enable}.
     *
     * property to enable/disable actions
     *
     * Default value is `true`.
     *
     * @returns Value of property `enable`
     */
    getEnable(): boolean;
    /**
     * Gets current value of property {@link #getIconSrc iconSrc}.
     *
     * source for the icon rendered
     *
     * @returns Value of property `iconSrc`
     */
    getIconSrc(): URI;
    /**
     * Gets content of aggregation {@link #getMenu menu}.
     *
     * aggregation for menu items
     */
    getMenu(): Menu[];
    /**
     * Gets current value of property {@link #getMenuData menuData}.
     *
     * data of menu items and sub items
     *
     * @returns Value of property `menuData`
     */
    getMenuData(): object;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * Property that determines the size of the entity rendered
     *
     * Default value is `Regular`.
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Checks for the provided `sap.ui.commons.Menu` in the aggregation {@link #getMenu menu}. and returns its
     * index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfMenu(
      /**
       * The menu whose index is looked for
       */
      oMenu: Menu
    ): int;
    /**
     * Inserts a menu into the aggregation {@link #getMenu menu}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertMenu(
      /**
       * The menu to insert; if empty, nothing is inserted
       */
      oMenu: Menu,
      /**
       * The `0`-based index the menu should be inserted at; for a negative value of `iIndex`, the menu is inserted
       * at position 0; for a value greater than the current size of the aggregation, the menu is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getMenu menu}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllMenu(): Menu[];
    /**
     * Removes a menu from the aggregation {@link #getMenu menu}.
     *
     * @returns The removed menu or `null`
     */
    removeMenu(
      /**
       * The menu to remove or its index or id
       */
      vMenu: int | string | Menu
    ): Menu | null;
    /**
     * Sets a new value for property {@link #getActionLabel actionLabel}.
     *
     * label for action
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActionLabel(
      /**
       * New value for property `actionLabel`
       */
      sActionLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getActionTooltip actionTooltip}.
     *
     * Tooltip for the action
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActionTooltip(
      /**
       * New value for property `actionTooltip`
       */
      sActionTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getActionType actionType}.
     *
     * type of the action
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `NORMAL`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActionType(
      /**
       * New value for property `actionType`
       */
      sActionType?: ActionType | keyof typeof ActionType
    ): this;
    /**
     * Sets a new value for property {@link #getChangeView changeView}.
     *
     * new type of view is loaded while performing the action.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setChangeView(
      /**
       * New value for property `changeView`
       */
      bChangeView?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnable enable}.
     *
     * property to enable/disable actions
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnable(
      /**
       * New value for property `enable`
       */
      bEnable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIconSrc iconSrc}.
     *
     * source for the icon rendered
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSrc(
      /**
       * New value for property `iconSrc`
       */
      sIconSrc?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getMenuData menuData}.
     *
     * data of menu items and sub items
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMenuData(
      /**
       * New value for property `menuData`
       */
      oMenuData?: object
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * Property that determines the size of the entity rendered
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
  }
  export default ActionBar;

  export interface $ActionBarSettings extends $ControlSettings {
    /**
     * label for action
     */
    actionLabel?: string | PropertyBindingInfo;

    /**
     * Property that determines the size of the entity rendered
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * source for the icon rendered
     */
    iconSrc?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * type of the action
     */
    actionType?:
      | (ActionType | keyof typeof ActionType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * data of menu items and sub items
     */
    menuData?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Tooltip for the action
     */
    actionTooltip?: string | PropertyBindingInfo;

    /**
     * property to enable/disable actions
     */
    enable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * new type of view is loaded while performing the action.
     */
    changeView?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * aggregation for menu items
     */
    menu?: Menu[] | Menu | AggregationBindingInfo | `{${string}}`;

    /**
     * click on the action bar
     */
    select?: (oEvent: Event) => void;
  }

  export interface $ActionBarSelectEventParameters {}
}

declare module "sap/landvisz/internal/DataContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { EntityCSSSize, LandscapeObject } from "sap/landvisz/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A control that renders the data container section in a system
   */
  class DataContainer extends Control {
    /**
     * Constructor for a new internal/DataContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DataContainerSettings
    );
    /**
     * Constructor for a new internal/DataContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DataContainerSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.DataContainer with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DataContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.DataContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some property to the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addProperty(
      /**
       * The property to add; if empty, nothing is inserted
       */
      oProperty: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.DataContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.DataContainer` itself.
     *
     * the action to be carried out on selection of a tab
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.DataContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.DataContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.DataContainer` itself.
     *
     * the action to be carried out on selection of a tab
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.DataContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the properties in the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyProperties(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.landvisz.internal.DataContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:select select} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getHeader header}.
     *
     * Text of Navigation Header
     *
     * @returns Value of property `header`
     */
    getHeader(): string;
    /**
     * Gets content of aggregation {@link #getProperties properties}.
     *
     * test
     */
    getProperties(): Control[];
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * Default value is `Regular`.
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * selected property of data header
     *
     * Default value is `true`.
     *
     * @returns Value of property `selected`
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * type of landscape object
     *
     * @returns Value of property `type`
     */
    getType(): LandscapeObject | keyof typeof LandscapeObject;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getProperties properties}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfProperty(
      /**
       * The property whose index is looked for
       */
      oProperty: Control
    ): int;
    /**
     * Inserts a property into the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertProperty(
      /**
       * The property to insert; if empty, nothing is inserted
       */
      oProperty: Control,
      /**
       * The `0`-based index the property should be inserted at; for a negative value of `iIndex`, the property
       * is inserted at position 0; for a value greater than the current size of the aggregation, the property
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getProperties properties}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllProperties(): Control[];
    /**
     * Removes a property from the aggregation {@link #getProperties properties}.
     *
     * @returns The removed property or `null`
     */
    removeProperty(
      /**
       * The property to remove or its index or id
       */
      vProperty: int | string | Control
    ): Control | null;
    /**
     * Sets a new value for property {@link #getHeader header}.
     *
     * Text of Navigation Header
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeader(
      /**
       * New value for property `header`
       */
      sHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * selected property of data header
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * type of landscape object
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: LandscapeObject | keyof typeof LandscapeObject
    ): this;
  }
  export default DataContainer;

  export interface $DataContainerSettings extends $ControlSettings {
    /**
     * Text of Navigation Header
     */
    header?: string | PropertyBindingInfo;

    /**
     * selected property of data header
     */
    selected?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * rendering size of the control
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * type of landscape object
     */
    type?:
      | (LandscapeObject | keyof typeof LandscapeObject)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * test
     */
    properties?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * the action to be carried out on selection of a tab
     */
    select?: (oEvent: Event) => void;
  }

  export interface $DataContainerSelectEventParameters {}
}

declare module "sap/landvisz/internal/DeploymentType" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A control to render deployment type of a component
   */
  class DeploymentType extends Control {
    /**
     * Constructor for a new internal/DeploymentType.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DeploymentTypeSettings
    );
    /**
     * Constructor for a new internal/DeploymentType.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DeploymentTypeSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.DeploymentType with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DeploymentType>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.DeploymentType.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * icon type of data
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * icon type of data
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
  }
  export default DeploymentType;

  export interface $DeploymentTypeSettings extends $ControlSettings {
    /**
     * icon type of data
     */
    type?: string | PropertyBindingInfo;
  }
}

declare module "sap/landvisz/internal/EntityAction" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A control to specify entity actions
   */
  class EntityAction extends Control {
    /**
     * Constructor for a new internal/EntityAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $EntityActionSettings
    );
    /**
     * Constructor for a new internal/EntityAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $EntityActionSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.EntityAction with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, EntityAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.EntityAction.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.landvisz.internal.EntityAction`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.EntityAction` itself.
     *
     * on click fire press
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.EntityAction`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.landvisz.internal.EntityAction`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.EntityAction` itself.
     *
     * on click fire press
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.EntityAction`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.landvisz.internal.EntityAction`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getActionTooltip actionTooltip}.
     *
     * Tooltip for the internal action
     *
     * @returns Value of property `actionTooltip`
     */
    getActionTooltip(): string;
    /**
     * Gets current value of property {@link #getIconSrc iconSrc}.
     *
     * Source of the icon
     *
     * @returns Value of property `iconSrc`
     */
    getIconSrc(): URI;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): string;
    /**
     * Sets a new value for property {@link #getActionTooltip actionTooltip}.
     *
     * Tooltip for the internal action
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActionTooltip(
      /**
       * New value for property `actionTooltip`
       */
      sActionTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconSrc iconSrc}.
     *
     * Source of the icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconSrc(
      /**
       * New value for property `iconSrc`
       */
      sIconSrc?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: string
    ): this;
  }
  export default EntityAction;

  export interface $EntityActionSettings extends $ControlSettings {
    /**
     * Tooltip for the internal action
     */
    actionTooltip?: string | PropertyBindingInfo;

    /**
     * Source of the icon
     */
    iconSrc?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * rendering size of the control
     */
    renderingSize?: string | PropertyBindingInfo;

    /**
     * on click fire press
     */
    press?: (oEvent: Event) => void;
  }

  export interface $EntityActionPressEventParameters {}
}

declare module "sap/landvisz/internal/EntityCustomAction" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { EntityCSSSize } from "sap/landvisz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A control to render custom actions of visualization control
   */
  class EntityCustomAction extends Control {
    /**
     * Constructor for a new internal/EntityCustomAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $EntityCustomActionSettings
    );
    /**
     * Constructor for a new internal/EntityCustomAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $EntityCustomActionSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.EntityCustomAction with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, EntityCustomAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.EntityCustomAction.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.EntityCustomAction`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.EntityCustomAction` itself.
     *
     * click on the action bar
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.EntityCustomAction`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.EntityCustomAction`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.EntityCustomAction` itself.
     *
     * click on the action bar
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.EntityCustomAction`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.landvisz.internal.EntityCustomAction`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:select select} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getCustomAction customAction}.
     *
     * name of the custom action
     *
     * @returns Value of property `customAction`
     */
    getCustomAction(): string;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * Default value is `Regular`.
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Sets a new value for property {@link #getCustomAction customAction}.
     *
     * name of the custom action
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCustomAction(
      /**
       * New value for property `customAction`
       */
      sCustomAction?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
  }
  export default EntityCustomAction;

  export interface $EntityCustomActionSettings extends $ControlSettings {
    /**
     * name of the custom action
     */
    customAction?: string | PropertyBindingInfo;

    /**
     * rendering size of the control
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * click on the action bar
     */
    select?: (oEvent: Event) => void;
  }

  export interface $EntityCustomActionSelectEventParameters {}
}

declare module "sap/landvisz/internal/HeaderList" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { LandscapeObject } from "sap/landvisz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A control to render headers of a control
   */
  class HeaderList extends Control {
    /**
     * Constructor for a new internal/HeaderList.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HeaderListSettings
    );
    /**
     * Constructor for a new internal/HeaderList.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HeaderListSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.HeaderList with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HeaderList>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.HeaderList.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.landvisz.internal.HeaderList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.HeaderList` itself.
     *
     * Event triggered when header is clicked
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.HeaderList` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.landvisz.internal.HeaderList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.HeaderList` itself.
     *
     * Event triggered when header is clicked
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.HeaderList` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.landvisz.internal.HeaderList`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getEntitySize entitySize}.
     *
     * Size of the headers
     *
     * @returns Value of property `entitySize`
     */
    getEntitySize(): string;
    /**
     * Gets current value of property {@link #getHeaderTooltip headerTooltip}.
     *
     * ToolTip for headers
     *
     * @returns Value of property `headerTooltip`
     */
    getHeaderTooltip(): string;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * to select/deselect a header
     *
     * Default value is `false`.
     *
     * @returns Value of property `selected`
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * type of system
     *
     * @returns Value of property `type`
     */
    getType(): LandscapeObject | keyof typeof LandscapeObject;
    /**
     * Sets a new value for property {@link #getEntitySize entitySize}.
     *
     * Size of the headers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEntitySize(
      /**
       * New value for property `entitySize`
       */
      sEntitySize?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderTooltip headerTooltip}.
     *
     * ToolTip for headers
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeaderTooltip(
      /**
       * New value for property `headerTooltip`
       */
      sHeaderTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * to select/deselect a header
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * type of system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: LandscapeObject | keyof typeof LandscapeObject
    ): this;
  }
  export default HeaderList;

  export interface $HeaderListSettings extends $ControlSettings {
    /**
     * ToolTip for headers
     */
    headerTooltip?: string | PropertyBindingInfo;

    /**
     * Size of the headers
     */
    entitySize?: string | PropertyBindingInfo;

    /**
     * to select/deselect a header
     */
    selected?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * type of system
     */
    type?:
      | (LandscapeObject | keyof typeof LandscapeObject)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Event triggered when header is clicked
     */
    press?: (oEvent: Event) => void;
  }

  export interface $HeaderListPressEventParameters {}
}

declare module "sap/landvisz/internal/IdentificationBar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { ComponentType, EntityCSSSize } from "sap/landvisz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Acontrol to render identification bar of a system
   */
  class IdentificationBar extends Control {
    /**
     * Constructor for a new internal/IdentificationBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $IdentificationBarSettings
    );
    /**
     * Constructor for a new internal/IdentificationBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $IdentificationBarSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.IdentificationBar with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, IdentificationBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.IdentificationBar.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.IdentificationBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.IdentificationBar` itself.
     *
     * fires click event on selection
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.IdentificationBar`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.landvisz.internal.IdentificationBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.IdentificationBar` itself.
     *
     * fires click event on selection
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.IdentificationBar`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.landvisz.internal.IdentificationBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:select select} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getComponentType componentType}.
     *
     * Component type of the entity
     *
     * @returns Value of property `componentType`
     */
    getComponentType(): ComponentType | keyof typeof ComponentType;
    /**
     * Gets current value of property {@link #getDefaultState defaultState}.
     *
     * determines the default state of the control
     *
     * @returns Value of property `defaultState`
     */
    getDefaultState(): string;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * despriction of the identification region of a control
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * returns identification properties
     */
    getIdentificationProperties(): void;
    /**
     * Gets current value of property {@link #getQualifierText qualifierText}.
     *
     * text that identifies the server
     *
     * @returns Value of property `qualifierText`
     */
    getQualifierText(): string;
    /**
     * Gets current value of property {@link #getQualifierTooltip qualifierTooltip}.
     *
     * tooltip to identify the server
     *
     * @returns Value of property `qualifierTooltip`
     */
    getQualifierTooltip(): string;
    /**
     * Gets current value of property {@link #getQualifierType qualifierType}.
     *
     * icon to identify the server
     *
     * @returns Value of property `qualifierType`
     */
    getQualifierType(): string;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * Default value is `Regular`.
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * text that identifies a system
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * type of system rendered
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Sets a new value for property {@link #getComponentType componentType}.
     *
     * Component type of the entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setComponentType(
      /**
       * New value for property `componentType`
       */
      sComponentType?: ComponentType | keyof typeof ComponentType
    ): this;
    /**
     * Sets a new value for property {@link #getDefaultState defaultState}.
     *
     * determines the default state of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDefaultState(
      /**
       * New value for property `defaultState`
       */
      sDefaultState?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * despriction of the identification region of a control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getQualifierText qualifierText}.
     *
     * text that identifies the server
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setQualifierText(
      /**
       * New value for property `qualifierText`
       */
      sQualifierText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getQualifierTooltip qualifierTooltip}.
     *
     * tooltip to identify the server
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setQualifierTooltip(
      /**
       * New value for property `qualifierTooltip`
       */
      sQualifierTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getQualifierType qualifierType}.
     *
     * icon to identify the server
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setQualifierType(
      /**
       * New value for property `qualifierType`
       */
      sQualifierType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * text that identifies a system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * type of system rendered
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
  }
  export default IdentificationBar;

  export interface $IdentificationBarSettings extends $ControlSettings {
    /**
     * text that identifies a system
     */
    text?: string | PropertyBindingInfo;

    /**
     * type of system rendered
     */
    type?: string | PropertyBindingInfo;

    /**
     * text that identifies the server
     */
    qualifierText?: string | PropertyBindingInfo;

    /**
     * tooltip to identify the server
     */
    qualifierTooltip?: string | PropertyBindingInfo;

    /**
     * icon to identify the server
     */
    qualifierType?: string | PropertyBindingInfo;

    /**
     * rendering size of the control
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * determines the default state of the control
     */
    defaultState?: string | PropertyBindingInfo;

    /**
     * despriction of the identification region of a control
     */
    description?: string | PropertyBindingInfo;

    /**
     * Component type of the entity
     */
    componentType?:
      | (ComponentType | keyof typeof ComponentType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * fires click event on selection
     */
    select?: (oEvent: Event) => void;
  }

  export interface $IdentificationBarSelectEventParameters {}
}

declare module "sap/landvisz/internal/LinearRowField" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { EntityCSSSize } from "sap/landvisz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A control to render linear row fields in data container region of a system
   */
  class LinearRowField extends Control {
    /**
     * Constructor for a new internal/LinearRowField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LinearRowFieldSettings
    );
    /**
     * Constructor for a new internal/LinearRowField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LinearRowFieldSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.LinearRowField with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LinearRowField>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.LinearRowField.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getIconTitle iconTitle}.
     *
     * title of the icon displayed in the row field
     *
     * @returns Value of property `iconTitle`
     */
    getIconTitle(): string;
    /**
     * Gets current value of property {@link #getIconType iconType}.
     *
     * text of the icon dislayed in the row field
     *
     * @returns Value of property `iconType`
     */
    getIconType(): string;
    /**
     * Gets current value of property {@link #getInvalidName invalidName}.
     *
     * determines if the product version are valid/invalid
     *
     * @returns Value of property `invalidName`
     */
    getInvalidName(): boolean;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * text to be displayed in the row field
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets current value of property {@link #getLinkSource linkSource}.
     *
     * source from which two or more systems are dependent
     *
     * @returns Value of property `linkSource`
     */
    getLinkSource(): string;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of system
     *
     * Default value is `Regular`.
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Gets current value of property {@link #getRightIconSrc rightIconSrc}.
     *
     * Image source of the icon on right
     *
     * @returns Value of property `rightIconSrc`
     */
    getRightIconSrc(): string;
    /**
     * Gets current value of property {@link #getRightIconTooltip rightIconTooltip}.
     *
     * tool tip for the right icon
     *
     * @returns Value of property `rightIconTooltip`
     */
    getRightIconTooltip(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * value to be displayed in the row field
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getIconTitle iconTitle}.
     *
     * title of the icon displayed in the row field
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconTitle(
      /**
       * New value for property `iconTitle`
       */
      sIconTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconType iconType}.
     *
     * text of the icon dislayed in the row field
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconType(
      /**
       * New value for property `iconType`
       */
      sIconType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getInvalidName invalidName}.
     *
     * determines if the product version are valid/invalid
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setInvalidName(
      /**
       * New value for property `invalidName`
       */
      bInvalidName?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * text to be displayed in the row field
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLinkSource linkSource}.
     *
     * source from which two or more systems are dependent
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLinkSource(
      /**
       * New value for property `linkSource`
       */
      sLinkSource?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getRightIconSrc rightIconSrc}.
     *
     * Image source of the icon on right
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRightIconSrc(
      /**
       * New value for property `rightIconSrc`
       */
      sRightIconSrc?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRightIconTooltip rightIconTooltip}.
     *
     * tool tip for the right icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRightIconTooltip(
      /**
       * New value for property `rightIconTooltip`
       */
      sRightIconTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * value to be displayed in the row field
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
  }
  export default LinearRowField;

  export interface $LinearRowFieldSettings extends $ControlSettings {
    /**
     * text to be displayed in the row field
     */
    label?: string | PropertyBindingInfo;

    /**
     * value to be displayed in the row field
     */
    value?: string | PropertyBindingInfo;

    /**
     * rendering size of system
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * text of the icon dislayed in the row field
     */
    iconType?: string | PropertyBindingInfo;

    /**
     * title of the icon displayed in the row field
     */
    iconTitle?: string | PropertyBindingInfo;

    /**
     * Image source of the icon on right
     */
    rightIconSrc?: string | PropertyBindingInfo;

    /**
     * source from which two or more systems are dependent
     */
    linkSource?: string | PropertyBindingInfo;

    /**
     * tool tip for the right icon
     */
    rightIconTooltip?: string | PropertyBindingInfo;

    /**
     * determines if the product version are valid/invalid
     */
    invalidName?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/landvisz/internal/ModelingStatus" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Modeling Status of entity
   */
  class ModelingStatus extends Control {
    /**
     * Constructor for a new internal/ModelingStatus.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ModelingStatusSettings
    );
    /**
     * Constructor for a new internal/ModelingStatus.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ModelingStatusSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.ModelingStatus with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ModelingStatus>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.ModelingStatus.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getStateIconSrc stateIconSrc}.
     *
     * icon source for status
     *
     * @returns Value of property `stateIconSrc`
     */
    getStateIconSrc(): string;
    /**
     * Gets current value of property {@link #getStateIconTooltip stateIconTooltip}.
     *
     * tooltip for the icon
     *
     * @returns Value of property `stateIconTooltip`
     */
    getStateIconTooltip(): any;
    /**
     * Gets current value of property {@link #getStatus status}.
     *
     * status determines the state of the system namely correct, warning, error
     *
     * @returns Value of property `status`
     */
    getStatus(): string;
    /**
     * Gets current value of property {@link #getStatusTooltip statusTooltip}.
     *
     * Tooltip for status that determines the state of the system namely correct, warning, error
     *
     * @returns Value of property `statusTooltip`
     */
    getStatusTooltip(): string;
    /**
     * Sets a new value for property {@link #getStateIconSrc stateIconSrc}.
     *
     * icon source for status
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStateIconSrc(
      /**
       * New value for property `stateIconSrc`
       */
      sStateIconSrc?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStateIconTooltip stateIconTooltip}.
     *
     * tooltip for the icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStateIconTooltip(
      /**
       * New value for property `stateIconTooltip`
       */
      oStateIconTooltip?: any
    ): this;
    /**
     * Sets a new value for property {@link #getStatus status}.
     *
     * status determines the state of the system namely correct, warning, error
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStatus(
      /**
       * New value for property `status`
       */
      sStatus?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStatusTooltip statusTooltip}.
     *
     * Tooltip for status that determines the state of the system namely correct, warning, error
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStatusTooltip(
      /**
       * New value for property `statusTooltip`
       */
      sStatusTooltip?: string
    ): this;
  }
  export default ModelingStatus;

  export interface $ModelingStatusSettings extends $ControlSettings {
    /**
     * status determines the state of the system namely correct, warning, error
     */
    status?: string | PropertyBindingInfo;

    /**
     * Tooltip for status that determines the state of the system namely correct, warning, error
     */
    statusTooltip?: string | PropertyBindingInfo;

    /**
     * icon source for status
     */
    stateIconSrc?: string | PropertyBindingInfo;

    /**
     * tooltip for the icon
     */
    stateIconTooltip?: any | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/landvisz/internal/NestedRowField" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import LinearRowField from "sap/landvisz/internal/LinearRowField";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { EntityCSSSize } from "sap/landvisz/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A control to render nester row fields in a control
   */
  class NestedRowField extends Control {
    /**
     * Constructor for a new internal/NestedRowField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $NestedRowFieldSettings
    );
    /**
     * Constructor for a new internal/NestedRowField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $NestedRowFieldSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.NestedRowField with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NestedRowField>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.NestedRowField.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some linearRow to the aggregation {@link #getLinearRows linearRows}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addLinearRow(
      /**
       * The linearRow to add; if empty, nothing is inserted
       */
      oLinearRow: LinearRowField
    ): this;
    /**
     * Destroys all the linearRows in the aggregation {@link #getLinearRows linearRows}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLinearRows(): this;
    /**
     * Gets current value of property {@link #getIconTitle iconTitle}.
     *
     * titlte of the icon rendered in the nested row field
     *
     * @returns Value of property `iconTitle`
     */
    getIconTitle(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * label for data in a row field
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets content of aggregation {@link #getLinearRows linearRows}.
     *
     * Rows aggregation in a label
     */
    getLinearRows(): LinearRowField[];
    /**
     * Gets current value of property {@link #getLinkSource linkSource}.
     *
     * source from which two or more systems are dependent
     *
     * @returns Value of property `linkSource`
     */
    getLinkSource(): string;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * Default value is `Regular`.
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Gets current value of property {@link #getRightIconSrc rightIconSrc}.
     *
     * Image source of the icon on right
     *
     * @returns Value of property `rightIconSrc`
     */
    getRightIconSrc(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * determines the type of landscape object
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Gets current value of property {@link #getValues values}.
     *
     * value of the data in a row field
     *
     * @returns Value of property `values`
     */
    getValues(): string[];
    /**
     * Gets current value of property {@link #getValueType valueType}.
     *
     * determines the type of value
     *
     * @returns Value of property `valueType`
     */
    getValueType(): string;
    /**
     * Checks for the provided `sap.landvisz.internal.LinearRowField` in the aggregation {@link #getLinearRows linearRows}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfLinearRow(
      /**
       * The linearRow whose index is looked for
       */
      oLinearRow: LinearRowField
    ): int;
    /**
     * Inserts a linearRow into the aggregation {@link #getLinearRows linearRows}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertLinearRow(
      /**
       * The linearRow to insert; if empty, nothing is inserted
       */
      oLinearRow: LinearRowField,
      /**
       * The `0`-based index the linearRow should be inserted at; for a negative value of `iIndex`, the linearRow
       * is inserted at position 0; for a value greater than the current size of the aggregation, the linearRow
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getLinearRows linearRows}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllLinearRows(): LinearRowField[];
    /**
     * Removes a linearRow from the aggregation {@link #getLinearRows linearRows}.
     *
     * @returns The removed linearRow or `null`
     */
    removeLinearRow(
      /**
       * The linearRow to remove or its index or id
       */
      vLinearRow: int | string | LinearRowField
    ): LinearRowField | null;
    /**
     * Sets a new value for property {@link #getIconTitle iconTitle}.
     *
     * titlte of the icon rendered in the nested row field
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIconTitle(
      /**
       * New value for property `iconTitle`
       */
      sIconTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * label for data in a row field
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLinkSource linkSource}.
     *
     * source from which two or more systems are dependent
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLinkSource(
      /**
       * New value for property `linkSource`
       */
      sLinkSource?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getRightIconSrc rightIconSrc}.
     *
     * Image source of the icon on right
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRightIconSrc(
      /**
       * New value for property `rightIconSrc`
       */
      sRightIconSrc?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * determines the type of landscape object
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValues values}.
     *
     * value of the data in a row field
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValues(
      /**
       * New value for property `values`
       */
      sValues?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getValueType valueType}.
     *
     * determines the type of value
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValueType(
      /**
       * New value for property `valueType`
       */
      sValueType?: string
    ): this;
  }
  export default NestedRowField;

  export interface $NestedRowFieldSettings extends $ControlSettings {
    /**
     * label for data in a row field
     */
    label?: string | PropertyBindingInfo;

    /**
     * value of the data in a row field
     */
    values?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * rendering size of the control
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * titlte of the icon rendered in the nested row field
     */
    iconTitle?: string | PropertyBindingInfo;

    /**
     * determines the type of landscape object
     */
    type?: string | PropertyBindingInfo;

    /**
     * determines the type of value
     */
    valueType?: string | PropertyBindingInfo;

    /**
     * Image source of the icon on right
     */
    rightIconSrc?: string | PropertyBindingInfo;

    /**
     * source from which two or more systems are dependent
     */
    linkSource?: string | PropertyBindingInfo;

    /**
     * Rows aggregation in a label
     */
    linearRows?:
      | LinearRowField[]
      | LinearRowField
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/landvisz/internal/SingleDataContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A control that shows all the tabs separately for a better view
   */
  class SingleDataContainer extends Control {
    /**
     * Constructor for a new internal/SingleDataContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SingleDataContainerSettings
    );
    /**
     * Constructor for a new internal/SingleDataContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SingleDataContainerSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.SingleDataContainer with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SingleDataContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.SingleDataContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some property to the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addProperty(
      /**
       * The property to add; if empty, nothing is inserted
       */
      oProperty: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.landvisz.internal.SingleDataContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.SingleDataContainer` itself.
     *
     * called when Single view model is closed
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClosed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.SingleDataContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.landvisz.internal.SingleDataContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.internal.SingleDataContainer` itself.
     *
     * called when Single view model is closed
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClosed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.internal.SingleDataContainer`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the properties in the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyProperties(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:closed closed} event of this `sap.landvisz.internal.SingleDataContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachClosed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:closed closed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireClosed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getHeader header}.
     *
     * header of the tab
     *
     * @returns Value of property `header`
     */
    getHeader(): string;
    /**
     * Gets content of aggregation {@link #getProperties properties}.
     *
     * properties that are aggregated to the data container region of tabs
     */
    getProperties(): Control[];
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the system
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): string;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getProperties properties}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfProperty(
      /**
       * The property whose index is looked for
       */
      oProperty: Control
    ): int;
    /**
     * Inserts a property into the aggregation {@link #getProperties properties}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertProperty(
      /**
       * The property to insert; if empty, nothing is inserted
       */
      oProperty: Control,
      /**
       * The `0`-based index the property should be inserted at; for a negative value of `iIndex`, the property
       * is inserted at position 0; for a value greater than the current size of the aggregation, the property
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * returns true if show all option is open
     */
    isOpen(): void;
    /**
     * Removes all the controls from the aggregation {@link #getProperties properties}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllProperties(): Control[];
    /**
     * Removes a property from the aggregation {@link #getProperties properties}.
     *
     * @returns The removed property or `null`
     */
    removeProperty(
      /**
       * The property to remove or its index or id
       */
      vProperty: int | string | Control
    ): Control | null;
    /**
     * Sets a new value for property {@link #getHeader header}.
     *
     * header of the tab
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeader(
      /**
       * New value for property `header`
       */
      sHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: string
    ): this;
  }
  export default SingleDataContainer;

  export interface $SingleDataContainerSettings extends $ControlSettings {
    /**
     * header of the tab
     */
    header?: string | PropertyBindingInfo;

    /**
     * rendering size of the system
     */
    renderingSize?: string | PropertyBindingInfo;

    /**
     * properties that are aggregated to the data container region of tabs
     */
    properties?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * called when Single view model is closed
     */
    closed?: (oEvent: Event) => void;
  }

  export interface $SingleDataContainerClosedEventParameters {}
}

declare module "sap/landvisz/internal/TreeField" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TreeNode from "sap/ui/commons/TreeNode";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { EntityCSSSize } from "sap/landvisz/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A control to render tree field in the control
   */
  class TreeField extends Control {
    /**
     * Constructor for a new internal/TreeField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TreeFieldSettings
    );
    /**
     * Constructor for a new internal/TreeField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TreeFieldSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.internal.TreeField with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TreeField>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.internal.TreeField.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some treeNode to the aggregation {@link #getTreeNode treeNode}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addTreeNode(
      /**
       * The treeNode to add; if empty, nothing is inserted
       */
      oTreeNode: TreeNode
    ): this;
    /**
     * Destroys all the treeNode in the aggregation {@link #getTreeNode treeNode}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTreeNode(): this;
    /**
     * Gets current value of property {@link #getBindingName bindingName}.
     *
     * binding name
     *
     * @returns Value of property `bindingName`
     */
    getBindingName(): string;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Gets current value of property {@link #getTreeModel treeModel}.
     *
     * treeModel to be rendered in the control
     *
     * @returns Value of property `treeModel`
     */
    getTreeModel(): object;
    /**
     * Gets content of aggregation {@link #getTreeNode treeNode}.
     *
     * aggregation on the tree field to render tree nodes
     */
    getTreeNode(): TreeNode[];
    /**
     * Checks for the provided `sap.ui.commons.TreeNode` in the aggregation {@link #getTreeNode treeNode}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfTreeNode(
      /**
       * The treeNode whose index is looked for
       */
      oTreeNode: TreeNode
    ): int;
    /**
     * Inserts a treeNode into the aggregation {@link #getTreeNode treeNode}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertTreeNode(
      /**
       * The treeNode to insert; if empty, nothing is inserted
       */
      oTreeNode: TreeNode,
      /**
       * The `0`-based index the treeNode should be inserted at; for a negative value of `iIndex`, the treeNode
       * is inserted at position 0; for a value greater than the current size of the aggregation, the treeNode
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getTreeNode treeNode}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllTreeNode(): TreeNode[];
    /**
     * Removes a treeNode from the aggregation {@link #getTreeNode treeNode}.
     *
     * @returns The removed treeNode or `null`
     */
    removeTreeNode(
      /**
       * The treeNode to remove or its index or id
       */
      vTreeNode: int | string | TreeNode
    ): TreeNode | null;
    /**
     * Sets a new value for property {@link #getBindingName bindingName}.
     *
     * binding name
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBindingName(
      /**
       * New value for property `bindingName`
       */
      sBindingName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getTreeModel treeModel}.
     *
     * treeModel to be rendered in the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTreeModel(
      /**
       * New value for property `treeModel`
       */
      oTreeModel?: object
    ): this;
  }
  export default TreeField;

  export interface $TreeFieldSettings extends $ControlSettings {
    /**
     * treeModel to be rendered in the control
     */
    treeModel?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * binding name
     */
    bindingName?: string | PropertyBindingInfo;

    /**
     * rendering size of the control
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * aggregation on the tree field to render tree nodes
     */
    treeNode?: TreeNode[] | TreeNode | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/landvisz/LandscapeEntity" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ActionBar from "sap/landvisz/internal/ActionBar";

  import DataContainer from "sap/landvisz/internal/DataContainer";

  import Event from "sap/ui/base/Event";

  import {
    ComponentType,
    EntityCSSSize,
    ModelingStatus,
    LandscapeObject,
  } from "sap/landvisz/library";

  import Image from "sap/ui/commons/Image";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * A control to render the system
   */
  class LandscapeEntity extends Control {
    /**
     * Constructor for a new LandscapeEntity.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LandscapeEntitySettings
    );
    /**
     * Constructor for a new LandscapeEntity.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LandscapeEntitySettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.LandscapeEntity with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LandscapeEntity>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.LandscapeEntity.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some actionBar to the aggregation {@link #getActionBar actionBar}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addActionBar(
      /**
       * The actionBar to add; if empty, nothing is inserted
       */
      oActionBar: ActionBar
    ): this;
    /**
     * Adds some dataContainer to the aggregation {@link #getDataContainers dataContainers}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDataContainer(
      /**
       * The dataContainer to add; if empty, nothing is inserted
       */
      oDataContainer: DataContainer
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:mouseOverIdenIcon mouseOverIdenIcon} event of
     * this `sap.landvisz.LandscapeEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeEntity` itself.
     *
     * fires an event on hovering over identification system icon
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMouseOverIdenIcon(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:mouseOverIdenIcon mouseOverIdenIcon} event of
     * this `sap.landvisz.LandscapeEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeEntity` itself.
     *
     * fires an event on hovering over identification system icon
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMouseOverIdenIcon(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:statusSelect statusSelect} event of this `sap.landvisz.LandscapeEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeEntity` itself.
     *
     * fires an event on clicking the modelling status
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachStatusSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:statusSelect statusSelect} event of this `sap.landvisz.LandscapeEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeEntity` itself.
     *
     * fires an event on clicking the modelling status
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachStatusSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:trackInfoPress trackInfoPress} event of this
     * `sap.landvisz.LandscapeEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeEntity` itself.
     *
     * Fired when info Icon of track entity clicked
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTrackInfoPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:trackInfoPress trackInfoPress} event of this
     * `sap.landvisz.LandscapeEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeEntity` itself.
     *
     * Fired when info Icon of track entity clicked
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTrackInfoPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the actionBar in the aggregation {@link #getActionBar actionBar}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyActionBar(): this;
    /**
     * Destroys all the dataContainers in the aggregation {@link #getDataContainers dataContainers}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDataContainers(): this;
    /**
     * Destroys the entityStatus in the aggregation {@link #getEntityStatus entityStatus}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyEntityStatus(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:mouseOverIdenIcon mouseOverIdenIcon} event
     * of this `sap.landvisz.LandscapeEntity`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMouseOverIdenIcon(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:statusSelect statusSelect} event of this `sap.landvisz.LandscapeEntity`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachStatusSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:trackInfoPress trackInfoPress} event of this
     * `sap.landvisz.LandscapeEntity`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachTrackInfoPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:mouseOverIdenIcon mouseOverIdenIcon} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireMouseOverIdenIcon(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:statusSelect statusSelect} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireStatusSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:trackInfoPress trackInfoPress} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireTrackInfoPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getActionBar actionBar}.
     *
     * aggregation on action bar control
     */
    getActionBar(): ActionBar[];
    /**
     * Gets current value of property {@link #getActions actions}.
     *
     * actions of entity
     *
     * @returns Value of property `actions`
     */
    getActions(): object;
    /**
     * Gets current value of property {@link #getComponentType componentType}.
     *
     * Type of a soution component/deployment type entity
     *
     * @returns Value of property `componentType`
     */
    getComponentType(): ComponentType | keyof typeof ComponentType;
    /**
     * Gets current value of property {@link #getComponentTypeTooltip componentTypeTooltip}.
     *
     * Tooltip for component type
     *
     * @returns Value of property `componentTypeTooltip`
     */
    getComponentTypeTooltip(): string;
    /**
     * Gets content of aggregation {@link #getDataContainers dataContainers}.
     *
     * aggregations for data container
     */
    getDataContainers(): DataContainer[];
    /**
     * Gets current value of property {@link #getDefaultState defaultState}.
     *
     * default state of the system
     *
     * @returns Value of property `defaultState`
     */
    getDefaultState(): string;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * description of the identification region
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets content of aggregation {@link #getEntityStatus entityStatus}.
     *
     * Modeling status icon
     */
    getEntityStatus(): Image;
    /**
     * Gets current value of property {@link #getExplodeViewHeight explodeViewHeight}.
     *
     * Height of the show all view
     *
     * @returns Value of property `explodeViewHeight`
     */
    getExplodeViewHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getExplodeViewWidth explodeViewWidth}.
     *
     * Width of the show all view
     *
     * @returns Value of property `explodeViewWidth`
     */
    getExplodeViewWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getQualifierText qualifierText}.
     *
     * text of qualifier icon
     *
     * @returns Value of property `qualifierText`
     */
    getQualifierText(): string;
    /**
     * Gets current value of property {@link #getQualifierTooltip qualifierTooltip}.
     *
     * tooltip for qualifier icon
     *
     * @returns Value of property `qualifierTooltip`
     */
    getQualifierTooltip(): string;
    /**
     * Gets current value of property {@link #getQualifierType qualifierType}.
     *
     * text of the qualifier that specifies the server
     *
     * @returns Value of property `qualifierType`
     */
    getQualifierType(): string;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of a system
     *
     * Default value is `Regular`.
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Gets current value of property {@link #getShowCustomActions showCustomActions}.
     *
     * determines the visiblity of custom actions
     *
     * Default value is `true`.
     *
     * @returns Value of property `showCustomActions`
     */
    getShowCustomActions(): boolean;
    /**
     * Gets current value of property {@link #getShowEntityActions showEntityActions}.
     *
     * determines the visiblity of entityactions
     *
     * Default value is `true`.
     *
     * @returns Value of property `showEntityActions`
     */
    getShowEntityActions(): boolean;
    /**
     * Gets current value of property {@link #getStateIconSrc stateIconSrc}.
     *
     * Icon source of the state of entity
     *
     * @returns Value of property `stateIconSrc`
     */
    getStateIconSrc(): string;
    /**
     * Gets current value of property {@link #getStateIconTooltip stateIconTooltip}.
     *
     * tooltip of modelling status icon
     *
     * @returns Value of property `stateIconTooltip`
     */
    getStateIconTooltip(): string;
    /**
     * Gets current value of property {@link #getStatusTooltip statusTooltip}.
     *
     * tooltip for modelling status
     *
     * @returns Value of property `statusTooltip`
     */
    getStatusTooltip(): string;
    /**
     * Gets current value of property {@link #getSystemId systemId}.
     *
     * System entity ID
     *
     * @returns Value of property `systemId`
     */
    getSystemId(): string;
    /**
     * Gets current value of property {@link #getSystemName systemName}.
     *
     * name of the system
     *
     * @returns Value of property `systemName`
     */
    getSystemName(): string;
    /**
     * Gets current value of property {@link #getSystemStatus systemStatus}.
     *
     * Modeling status of the entity
     *
     * Default value is `NORMAL`.
     *
     * @returns Value of property `systemStatus`
     */
    getSystemStatus(): ModelingStatus | keyof typeof ModelingStatus;
    /**
     * Gets current value of property {@link #getTrackSystemCount trackSystemCount}.
     *
     * Systems count in the track
     *
     * @returns Value of property `trackSystemCount`
     */
    getTrackSystemCount(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * type of the system rendered
     *
     * @returns Value of property `type`
     */
    getType(): LandscapeObject | keyof typeof LandscapeObject;
    /**
     * Checks for the provided `sap.landvisz.internal.ActionBar` in the aggregation {@link #getActionBar actionBar}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfActionBar(
      /**
       * The actionBar whose index is looked for
       */
      oActionBar: ActionBar
    ): int;
    /**
     * Checks for the provided `sap.landvisz.internal.DataContainer` in the aggregation {@link #getDataContainers dataContainers}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDataContainer(
      /**
       * The dataContainer whose index is looked for
       */
      oDataContainer: DataContainer
    ): int;
    /**
     * Inserts a actionBar into the aggregation {@link #getActionBar actionBar}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertActionBar(
      /**
       * The actionBar to insert; if empty, nothing is inserted
       */
      oActionBar: ActionBar,
      /**
       * The `0`-based index the actionBar should be inserted at; for a negative value of `iIndex`, the actionBar
       * is inserted at position 0; for a value greater than the current size of the aggregation, the actionBar
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a dataContainer into the aggregation {@link #getDataContainers dataContainers}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDataContainer(
      /**
       * The dataContainer to insert; if empty, nothing is inserted
       */
      oDataContainer: DataContainer,
      /**
       * The `0`-based index the dataContainer should be inserted at; for a negative value of `iIndex`, the dataContainer
       * is inserted at position 0; for a value greater than the current size of the aggregation, the dataContainer
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes a actionBar from the aggregation {@link #getActionBar actionBar}.
     *
     * @returns The removed actionBar or `null`
     */
    removeActionBar(
      /**
       * The actionBar to remove or its index or id
       */
      vActionBar: int | string | ActionBar
    ): ActionBar | null;
    /**
     * Removes all the controls from the aggregation {@link #getActionBar actionBar}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllActionBar(): ActionBar[];
    /**
     * Removes all the controls from the aggregation {@link #getDataContainers dataContainers}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDataContainers(): DataContainer[];
    /**
     * Removes a dataContainer from the aggregation {@link #getDataContainers dataContainers}.
     *
     * @returns The removed dataContainer or `null`
     */
    removeDataContainer(
      /**
       * The dataContainer to remove or its index or id
       */
      vDataContainer: int | string | DataContainer
    ): DataContainer | null;
    /**
     * Sets a new value for property {@link #getActions actions}.
     *
     * actions of entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActions(
      /**
       * New value for property `actions`
       */
      oActions?: object
    ): this;
    /**
     * Sets a new value for property {@link #getComponentType componentType}.
     *
     * Type of a soution component/deployment type entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setComponentType(
      /**
       * New value for property `componentType`
       */
      sComponentType?: ComponentType | keyof typeof ComponentType
    ): this;
    /**
     * Sets a new value for property {@link #getComponentTypeTooltip componentTypeTooltip}.
     *
     * Tooltip for component type
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setComponentTypeTooltip(
      /**
       * New value for property `componentTypeTooltip`
       */
      sComponentTypeTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDefaultState defaultState}.
     *
     * default state of the system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDefaultState(
      /**
       * New value for property `defaultState`
       */
      sDefaultState?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * description of the identification region
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets the aggregated {@link #getEntityStatus entityStatus}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEntityStatus(
      /**
       * The entityStatus to set
       */
      oEntityStatus: Image
    ): this;
    /**
     * Sets a new value for property {@link #getExplodeViewHeight explodeViewHeight}.
     *
     * Height of the show all view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExplodeViewHeight(
      /**
       * New value for property `explodeViewHeight`
       */
      sExplodeViewHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getExplodeViewWidth explodeViewWidth}.
     *
     * Width of the show all view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExplodeViewWidth(
      /**
       * New value for property `explodeViewWidth`
       */
      sExplodeViewWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getQualifierText qualifierText}.
     *
     * text of qualifier icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setQualifierText(
      /**
       * New value for property `qualifierText`
       */
      sQualifierText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getQualifierTooltip qualifierTooltip}.
     *
     * tooltip for qualifier icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setQualifierTooltip(
      /**
       * New value for property `qualifierTooltip`
       */
      sQualifierTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getQualifierType qualifierType}.
     *
     * text of the qualifier that specifies the server
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setQualifierType(
      /**
       * New value for property `qualifierType`
       */
      sQualifierType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of a system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getShowCustomActions showCustomActions}.
     *
     * determines the visiblity of custom actions
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowCustomActions(
      /**
       * New value for property `showCustomActions`
       */
      bShowCustomActions?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowEntityActions showEntityActions}.
     *
     * determines the visiblity of entityactions
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowEntityActions(
      /**
       * New value for property `showEntityActions`
       */
      bShowEntityActions?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStateIconSrc stateIconSrc}.
     *
     * Icon source of the state of entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStateIconSrc(
      /**
       * New value for property `stateIconSrc`
       */
      sStateIconSrc?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStateIconTooltip stateIconTooltip}.
     *
     * tooltip of modelling status icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStateIconTooltip(
      /**
       * New value for property `stateIconTooltip`
       */
      sStateIconTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStatusTooltip statusTooltip}.
     *
     * tooltip for modelling status
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStatusTooltip(
      /**
       * New value for property `statusTooltip`
       */
      sStatusTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemId systemId}.
     *
     * System entity ID
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSystemId(
      /**
       * New value for property `systemId`
       */
      sSystemId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemName systemName}.
     *
     * name of the system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSystemName(
      /**
       * New value for property `systemName`
       */
      sSystemName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemStatus systemStatus}.
     *
     * Modeling status of the entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `NORMAL`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSystemStatus(
      /**
       * New value for property `systemStatus`
       */
      sSystemStatus?: ModelingStatus | keyof typeof ModelingStatus
    ): this;
    /**
     * Sets a new value for property {@link #getTrackSystemCount trackSystemCount}.
     *
     * Systems count in the track
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTrackSystemCount(
      /**
       * New value for property `trackSystemCount`
       */
      sTrackSystemCount?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * type of the system rendered
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: LandscapeObject | keyof typeof LandscapeObject
    ): this;
  }
  export default LandscapeEntity;

  export interface $LandscapeEntitySettings extends $ControlSettings {
    /**
     * name of the system
     */
    systemName?: string | PropertyBindingInfo;

    /**
     * type of the system rendered
     */
    type?:
      | (LandscapeObject | keyof typeof LandscapeObject)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * text of qualifier icon
     */
    qualifierText?: string | PropertyBindingInfo;

    /**
     * tooltip for qualifier icon
     */
    qualifierTooltip?: string | PropertyBindingInfo;

    /**
     * text of the qualifier that specifies the server
     */
    qualifierType?: string | PropertyBindingInfo;

    /**
     * rendering size of a system
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * default state of the system
     */
    defaultState?: string | PropertyBindingInfo;

    /**
     * description of the identification region
     */
    description?: string | PropertyBindingInfo;

    /**
     * actions of entity
     */
    actions?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Modeling status of the entity
     */
    systemStatus?:
      | (ModelingStatus | keyof typeof ModelingStatus)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * tooltip for modelling status
     */
    statusTooltip?: string | PropertyBindingInfo;

    /**
     * Width of the show all view
     */
    explodeViewWidth?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the show all view
     */
    explodeViewHeight?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * determines the visiblity of custom actions
     */
    showCustomActions?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * determines the visiblity of entityactions
     */
    showEntityActions?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * System entity ID
     */
    systemId?: string | PropertyBindingInfo;

    /**
     * Icon source of the state of entity
     */
    stateIconSrc?: string | PropertyBindingInfo;

    /**
     * tooltip of modelling status icon
     */
    stateIconTooltip?: string | PropertyBindingInfo;

    /**
     * Type of a soution component/deployment type entity
     */
    componentType?:
      | (ComponentType | keyof typeof ComponentType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Tooltip for component type
     */
    componentTypeTooltip?: string | PropertyBindingInfo;

    /**
     * Systems count in the track
     */
    trackSystemCount?: string | PropertyBindingInfo;

    /**
     * aggregations for data container
     */
    dataContainers?:
      | DataContainer[]
      | DataContainer
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * aggregation on action bar control
     */
    actionBar?:
      | ActionBar[]
      | ActionBar
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Modeling status icon
     */
    entityStatus?: Image;

    /**
     * fires an event on hovering over identification system icon
     */
    mouseOverIdenIcon?: (oEvent: Event) => void;

    /**
     * fires an event on clicking the modelling status
     */
    statusSelect?: (oEvent: Event) => void;

    /**
     * Fired when info Icon of track entity clicked
     */
    trackInfoPress?: (oEvent: Event) => void;
  }

  export interface $LandscapeEntityMouseOverIdenIconEventParameters {}

  export interface $LandscapeEntityStatusSelectEventParameters {}

  export interface $LandscapeEntityTrackInfoPressEventParameters {}
}

declare module "sap/landvisz/LandscapeViewer" {
  import { default as Option, $OptionSettings } from "sap/landvisz/Option";

  import ConnectionEntity from "sap/landvisz/ConnectionEntity";

  import Connector from "sap/landvisz/Connector";

  import LandscapeEntity from "sap/landvisz/LandscapeEntity";

  import Event from "sap/ui/base/Event";

  import {
    ConnectionLine,
    DependencyType,
    SelectionViewPosition,
    OptionType,
    SolutionType,
    ViewType,
    DependencyVisibility,
  } from "sap/landvisz/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Control from "sap/ui/core/Control";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Visualize the landscape objects in a new user experience
   */
  class LandscapeViewer extends Option {
    /**
     * Constructor for a new LandscapeViewer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LandscapeViewerSettings
    );
    /**
     * Constructor for a new LandscapeViewer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LandscapeViewerSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.LandscapeViewer with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.landvisz.Option.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LandscapeViewer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.LandscapeViewer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some connectionEntity to the aggregation {@link #getConnectionEntities connectionEntities}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addConnectionEntity(
      /**
       * The connectionEntity to add; if empty, nothing is inserted
       */
      oConnectionEntity: ConnectionEntity
    ): this;
    /**
     * Adds some connector to the aggregation {@link #getConnectors connectors}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addConnector(
      /**
       * The connector to add; if empty, nothing is inserted
       */
      oConnector: Connector
    ): this;
    /**
     * Adds some solutionOption to the aggregation {@link #getSolutionOptions solutionOptions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addSolutionOption(
      /**
       * The solutionOption to add; if empty, nothing is inserted
       */
      oSolutionOption: Option
    ): this;
    /**
     * Adds some system to the aggregation {@link #getSystems systems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addSystem(
      /**
       * The system to add; if empty, nothing is inserted
       */
      oSystem: LandscapeEntity
    ): this;
    /**
     * Append the text in the navigation path
     */
    appendNavigationPath(
      /**
       * text to be appended in the navigation path
       */
      navigationText: string
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.landvisz.LandscapeViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeViewer` itself.
     *
     * closes the view
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.landvisz.LandscapeViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeViewer` itself.
     *
     * closes the view
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadSolutionView loadSolutionView} event of
     * this `sap.landvisz.LandscapeViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeViewer` itself.
     *
     * load the solution view either deployment or component
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoadSolutionView(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loadSolutionView loadSolutionView} event of
     * this `sap.landvisz.LandscapeViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.LandscapeViewer` itself.
     *
     * load the solution view either deployment or component
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoadSolutionView(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.LandscapeViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the connectionEntities in the aggregation {@link #getConnectionEntities connectionEntities}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyConnectionEntities(): this;
    /**
     * Destroys all the connectors in the aggregation {@link #getConnectors connectors}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyConnectors(): this;
    /**
     * Destroys the plugContent in the aggregation {@link #getPlugContent plugContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyPlugContent(): this;
    /**
     * Destroys all the solutionOptions in the aggregation {@link #getSolutionOptions solutionOptions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySolutionOptions(): this;
    /**
     * Destroys all the systems in the aggregation {@link #getSystems systems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroySystems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:close close} event of this `sap.landvisz.LandscapeViewer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loadSolutionView loadSolutionView} event of
     * this `sap.landvisz.LandscapeViewer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachLoadSolutionView(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:close close} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:loadSolutionView loadSolutionView} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireLoadSolutionView(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getBoxDependencyLabel boxDependencyLabel}.
     *
     * Label of box view
     *
     * Default value is `'Box View'`.
     *
     * @returns Value of property `boxDependencyLabel`
     */
    getBoxDependencyLabel(): string;
    /**
     * Gets current value of property {@link #getBoxDependencyLevels boxDependencyLevels}.
     *
     * Levels information in Box dependency view
     *
     * @returns Value of property `boxDependencyLevels`
     */
    getBoxDependencyLevels(): string[];
    /**
     * Gets current value of property {@link #getCloseButtonTooltip closeButtonTooltip}.
     *
     * tooltip for close button
     *
     * @returns Value of property `closeButtonTooltip`
     */
    getCloseButtonTooltip(): string;
    /**
     * Gets current value of property {@link #getComponentViewLabel componentViewLabel}.
     *
     * Label for the component view
     *
     * Default value is `'Component View'`.
     *
     * @returns Value of property `componentViewLabel`
     */
    getComponentViewLabel(): string;
    /**
     * Gets current value of property {@link #getComponentViewTooltip componentViewTooltip}.
     *
     * tooltip for component view button
     *
     * @returns Value of property `componentViewTooltip`
     */
    getComponentViewTooltip(): string;
    /**
     * Gets content of aggregation {@link #getConnectionEntities connectionEntities}.
     *
     * Optional: connection Entity between two systems.
     */
    getConnectionEntities(): ConnectionEntity[];
    /**
     * Gets current value of property {@link #getConnectionLine connectionLine}.
     *
     * Type of line to be drawn
     *
     * Default value is `Line`.
     *
     * @returns Value of property `connectionLine`
     */
    getConnectionLine(): ConnectionLine | keyof typeof ConnectionLine;
    /**
     * Gets content of aggregation {@link #getConnectors connectors}.
     *
     * connector contains from and to information
     */
    getConnectors(): Connector[];
    /**
     * return the current solution loaded.
     */
    getCurrentSolutionView(): string;
    /**
     * Gets current value of property {@link #getDefaultDependencyView defaultDependencyView}.
     *
     * View type of landscape view
     *
     * Default value is `NETWORK_VIEW`.
     *
     * @returns Value of property `defaultDependencyView`
     */
    getDefaultDependencyView(): DependencyType | keyof typeof DependencyType;
    /**
     * Gets current value of property {@link #getDeploymentOptionsLabel deploymentOptionsLabel}.
     *
     * Label for the options
     *
     * Default value is `'Deployment Options :'`.
     *
     * @returns Value of property `deploymentOptionsLabel`
     */
    getDeploymentOptionsLabel(): string;
    /**
     * Gets current value of property {@link #getDeploymentOptionsTooltip deploymentOptionsTooltip}.
     *
     * tooltip of label for the options
     *
     * @returns Value of property `deploymentOptionsTooltip`
     */
    getDeploymentOptionsTooltip(): string;
    /**
     * Gets current value of property {@link #getDeploymentViewLabel deploymentViewLabel}.
     *
     * Label for deployment view.
     *
     * Default value is `'Deployment View'`.
     *
     * @returns Value of property `deploymentViewLabel`
     */
    getDeploymentViewLabel(): string;
    /**
     * Gets current value of property {@link #getDeploymentViewTooltip deploymentViewTooltip}.
     *
     * tooltip for deployment view button
     *
     * @returns Value of property `deploymentViewTooltip`
     */
    getDeploymentViewTooltip(): string;
    /**
     * Gets current value of property {@link #getHasParent hasParent}.
     *
     * control has to be added in the container or directly in the window.
     *
     * Default value is `true`.
     *
     * @returns Value of property `hasParent`
     */
    getHasParent(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of Viewer container
     *
     * @returns Value of property `height`
     */
    getHeight(): int;
    /**
     * Gets current value of property {@link #getNavigationPath navigationPath}.
     *
     * Text displayed in the dependency view
     *
     * @returns Value of property `navigationPath`
     */
    getNavigationPath(): string;
    /**
     * Gets current value of property {@link #getNetworkDependencyLabel networkDependencyLabel}.
     *
     * Label of the network view
     *
     * Default value is `'Network View'`.
     *
     * @returns Value of property `networkDependencyLabel`
     */
    getNetworkDependencyLabel(): string;
    /**
     * Gets content of aggregation {@link #getPlugContent plugContent}.
     *
     * a control which can be plugged into this control and can be only plugged in top section.
     */
    getPlugContent(): Control;
    /**
     * Gets current value of property {@link #getPlugContentHeight plugContentHeight}.
     *
     * Specify the height of plugged content
     *
     * Default value is `0`.
     *
     * @returns Value of property `plugContentHeight`
     */
    getPlugContentHeight(): int;
    /**
     * returns an object of the internal connection entity
     */
    getSelectedOption(): object;
    /**
     * Gets current value of property {@link #getSelectionViewPosition selectionViewPosition}.
     *
     * positions for selection view entity
     *
     * Default value is `CENTER`.
     *
     * @returns Value of property `selectionViewPosition`
     */
    getSelectionViewPosition():
      | SelectionViewPosition
      | keyof typeof SelectionViewPosition;
    /**
     * Gets current value of property {@link #getShowClose showClose}.
     *
     * close button visibility
     *
     * Default value is `true`.
     *
     * @returns Value of property `showClose`
     */
    getShowClose(): boolean;
    /**
     * Gets current value of property {@link #getShowDependencyNavigator showDependencyNavigator}.
     *
     * Navigator for dependency views
     *
     * Default value is `true`.
     *
     * @returns Value of property `showDependencyNavigator`
     */
    getShowDependencyNavigator(): boolean;
    /**
     * Gets current value of property {@link #getShowDeploymentTypeSection showDeploymentTypeSection}.
     *
     * Deployment type section
     *
     * Default value is `false`.
     *
     * @returns Value of property `showDeploymentTypeSection`
     */
    getShowDeploymentTypeSection(): boolean;
    /**
     * Gets content of aggregation {@link #getSolutionOptions solutionOptions}.
     *
     * Options for the solution
     */
    getSolutionOptions(): Option[];
    /**
     * Gets current value of property {@link #getSolutionOptionType solutionOptionType}.
     *
     * determines whether the option is rendered on view or entity
     *
     * @returns Value of property `solutionOptionType`
     */
    getSolutionOptionType(): OptionType | keyof typeof OptionType;
    /**
     * Gets current value of property {@link #getSolutionType solutionType}.
     *
     * Type of solution rendered
     *
     * @returns Value of property `solutionType`
     */
    getSolutionType(): SolutionType | keyof typeof SolutionType;
    /**
     * Gets content of aggregation {@link #getSystems systems}.
     *
     * Systems to be rendered in the landscape viewer
     */
    getSystems(): LandscapeEntity[];
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Header of the rendered view
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getViewType viewType}.
     *
     * View type of landscape view
     *
     * @returns Value of property `viewType`
     */
    getViewType(): ViewType | keyof typeof ViewType;
    /**
     * Gets current value of property {@link #getVisibleDependency visibleDependency}.
     *
     * Dependency View Visibility
     *
     * Default value is `BOTH`.
     *
     * @returns Value of property `visibleDependency`
     */
    getVisibleDependency():
      | DependencyVisibility
      | keyof typeof DependencyVisibility;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * width of the Viewer container
     *
     * @returns Value of property `width`
     */
    getWidth(): int;
    /**
     * Checks for the provided `sap.landvisz.ConnectionEntity` in the aggregation {@link #getConnectionEntities connectionEntities}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfConnectionEntity(
      /**
       * The connectionEntity whose index is looked for
       */
      oConnectionEntity: ConnectionEntity
    ): int;
    /**
     * Checks for the provided `sap.landvisz.Connector` in the aggregation {@link #getConnectors connectors}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfConnector(
      /**
       * The connector whose index is looked for
       */
      oConnector: Connector
    ): int;
    /**
     * Checks for the provided `sap.landvisz.Option` in the aggregation {@link #getSolutionOptions solutionOptions}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfSolutionOption(
      /**
       * The solutionOption whose index is looked for
       */
      oSolutionOption: Option
    ): int;
    /**
     * Checks for the provided `sap.landvisz.LandscapeEntity` in the aggregation {@link #getSystems systems}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfSystem(
      /**
       * The system whose index is looked for
       */
      oSystem: LandscapeEntity
    ): int;
    /**
     * Inserts a connectionEntity into the aggregation {@link #getConnectionEntities connectionEntities}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertConnectionEntity(
      /**
       * The connectionEntity to insert; if empty, nothing is inserted
       */
      oConnectionEntity: ConnectionEntity,
      /**
       * The `0`-based index the connectionEntity should be inserted at; for a negative value of `iIndex`, the
       * connectionEntity is inserted at position 0; for a value greater than the current size of the aggregation,
       * the connectionEntity is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a connector into the aggregation {@link #getConnectors connectors}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertConnector(
      /**
       * The connector to insert; if empty, nothing is inserted
       */
      oConnector: Connector,
      /**
       * The `0`-based index the connector should be inserted at; for a negative value of `iIndex`, the connector
       * is inserted at position 0; for a value greater than the current size of the aggregation, the connector
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a solutionOption into the aggregation {@link #getSolutionOptions solutionOptions}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertSolutionOption(
      /**
       * The solutionOption to insert; if empty, nothing is inserted
       */
      oSolutionOption: Option,
      /**
       * The `0`-based index the solutionOption should be inserted at; for a negative value of `iIndex`, the solutionOption
       * is inserted at position 0; for a value greater than the current size of the aggregation, the solutionOption
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a system into the aggregation {@link #getSystems systems}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertSystem(
      /**
       * The system to insert; if empty, nothing is inserted
       */
      oSystem: LandscapeEntity,
      /**
       * The `0`-based index the system should be inserted at; for a negative value of `iIndex`, the system is
       * inserted at position 0; for a value greater than the current size of the aggregation, the system is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getConnectionEntities connectionEntities}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllConnectionEntities(): ConnectionEntity[];
    /**
     * Removes all the controls from the aggregation {@link #getConnectors connectors}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllConnectors(): Connector[];
    /**
     * Removes all the controls from the aggregation {@link #getSolutionOptions solutionOptions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllSolutionOptions(): Option[];
    /**
     * Removes all the controls from the aggregation {@link #getSystems systems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllSystems(): LandscapeEntity[];
    /**
     * Removes a connectionEntity from the aggregation {@link #getConnectionEntities connectionEntities}.
     *
     * @returns The removed connectionEntity or `null`
     */
    removeConnectionEntity(
      /**
       * The connectionEntity to remove or its index or id
       */
      vConnectionEntity: int | string | ConnectionEntity
    ): ConnectionEntity | null;
    /**
     * Removes a connector from the aggregation {@link #getConnectors connectors}.
     *
     * @returns The removed connector or `null`
     */
    removeConnector(
      /**
       * The connector to remove or its index or id
       */
      vConnector: int | string | Connector
    ): Connector | null;
    /**
     * Removes a solutionOption from the aggregation {@link #getSolutionOptions solutionOptions}.
     *
     * @returns The removed solutionOption or `null`
     */
    removeSolutionOption(
      /**
       * The solutionOption to remove or its index or id
       */
      vSolutionOption: int | string | Option
    ): Option | null;
    /**
     * Removes a system from the aggregation {@link #getSystems systems}.
     *
     * @returns The removed system or `null`
     */
    removeSystem(
      /**
       * The system to remove or its index or id
       */
      vSystem: int | string | LandscapeEntity
    ): LandscapeEntity | null;
    /**
     * Sets a new value for property {@link #getBoxDependencyLabel boxDependencyLabel}.
     *
     * Label of box view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'Box View'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBoxDependencyLabel(
      /**
       * New value for property `boxDependencyLabel`
       */
      sBoxDependencyLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBoxDependencyLevels boxDependencyLevels}.
     *
     * Levels information in Box dependency view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBoxDependencyLevels(
      /**
       * New value for property `boxDependencyLevels`
       */
      sBoxDependencyLevels?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getCloseButtonTooltip closeButtonTooltip}.
     *
     * tooltip for close button
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCloseButtonTooltip(
      /**
       * New value for property `closeButtonTooltip`
       */
      sCloseButtonTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getComponentViewLabel componentViewLabel}.
     *
     * Label for the component view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'Component View'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setComponentViewLabel(
      /**
       * New value for property `componentViewLabel`
       */
      sComponentViewLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getComponentViewTooltip componentViewTooltip}.
     *
     * tooltip for component view button
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setComponentViewTooltip(
      /**
       * New value for property `componentViewTooltip`
       */
      sComponentViewTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getConnectionLine connectionLine}.
     *
     * Type of line to be drawn
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Line`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setConnectionLine(
      /**
       * New value for property `connectionLine`
       */
      sConnectionLine?: ConnectionLine | keyof typeof ConnectionLine
    ): this;
    /**
     * Sets a new value for property {@link #getDefaultDependencyView defaultDependencyView}.
     *
     * View type of landscape view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `NETWORK_VIEW`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDefaultDependencyView(
      /**
       * New value for property `defaultDependencyView`
       */
      sDefaultDependencyView?: DependencyType | keyof typeof DependencyType
    ): this;
    /**
     * Sets a new value for property {@link #getDeploymentOptionsLabel deploymentOptionsLabel}.
     *
     * Label for the options
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'Deployment Options :'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDeploymentOptionsLabel(
      /**
       * New value for property `deploymentOptionsLabel`
       */
      sDeploymentOptionsLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDeploymentOptionsTooltip deploymentOptionsTooltip}.
     *
     * tooltip of label for the options
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDeploymentOptionsTooltip(
      /**
       * New value for property `deploymentOptionsTooltip`
       */
      sDeploymentOptionsTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDeploymentViewLabel deploymentViewLabel}.
     *
     * Label for deployment view.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'Deployment View'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDeploymentViewLabel(
      /**
       * New value for property `deploymentViewLabel`
       */
      sDeploymentViewLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDeploymentViewTooltip deploymentViewTooltip}.
     *
     * tooltip for deployment view button
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDeploymentViewTooltip(
      /**
       * New value for property `deploymentViewTooltip`
       */
      sDeploymentViewTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHasParent hasParent}.
     *
     * control has to be added in the container or directly in the window.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHasParent(
      /**
       * New value for property `hasParent`
       */
      bHasParent?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of Viewer container
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      iHeight?: int
    ): this;
    /**
     * Sets a new value for property {@link #getNavigationPath navigationPath}.
     *
     * Text displayed in the dependency view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNavigationPath(
      /**
       * New value for property `navigationPath`
       */
      sNavigationPath?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNetworkDependencyLabel networkDependencyLabel}.
     *
     * Label of the network view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'Network View'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNetworkDependencyLabel(
      /**
       * New value for property `networkDependencyLabel`
       */
      sNetworkDependencyLabel?: string
    ): this;
    /**
     * Sets the aggregated {@link #getPlugContent plugContent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlugContent(
      /**
       * The plugContent to set
       */
      oPlugContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getPlugContentHeight plugContentHeight}.
     *
     * Specify the height of plugged content
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPlugContentHeight(
      /**
       * New value for property `plugContentHeight`
       */
      iPlugContentHeight?: int
    ): this;
    /**
     * Sets a new value for property {@link #getSelectionViewPosition selectionViewPosition}.
     *
     * positions for selection view entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `CENTER`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelectionViewPosition(
      /**
       * New value for property `selectionViewPosition`
       */
      sSelectionViewPosition?:
        | SelectionViewPosition
        | keyof typeof SelectionViewPosition
    ): this;
    /**
     * Sets a new value for property {@link #getShowClose showClose}.
     *
     * close button visibility
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowClose(
      /**
       * New value for property `showClose`
       */
      bShowClose?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowDependencyNavigator showDependencyNavigator}.
     *
     * Navigator for dependency views
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowDependencyNavigator(
      /**
       * New value for property `showDependencyNavigator`
       */
      bShowDependencyNavigator?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowDeploymentTypeSection showDeploymentTypeSection}.
     *
     * Deployment type section
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowDeploymentTypeSection(
      /**
       * New value for property `showDeploymentTypeSection`
       */
      bShowDeploymentTypeSection?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSolutionOptionType solutionOptionType}.
     *
     * determines whether the option is rendered on view or entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSolutionOptionType(
      /**
       * New value for property `solutionOptionType`
       */
      sSolutionOptionType?: OptionType | keyof typeof OptionType
    ): this;
    /**
     * Sets a new value for property {@link #getSolutionType solutionType}.
     *
     * Type of solution rendered
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSolutionType(
      /**
       * New value for property `solutionType`
       */
      sSolutionType?: SolutionType | keyof typeof SolutionType
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Header of the rendered view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getViewType viewType}.
     *
     * View type of landscape view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setViewType(
      /**
       * New value for property `viewType`
       */
      sViewType?: ViewType | keyof typeof ViewType
    ): this;
    /**
     * Sets a new value for property {@link #getVisibleDependency visibleDependency}.
     *
     * Dependency View Visibility
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `BOTH`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisibleDependency(
      /**
       * New value for property `visibleDependency`
       */
      sVisibleDependency?:
        | DependencyVisibility
        | keyof typeof DependencyVisibility
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * width of the Viewer container
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      iWidth?: int
    ): this;
  }
  export default LandscapeViewer;

  export interface $LandscapeViewerSettings extends $OptionSettings {
    /**
     * View type of landscape view
     */
    defaultDependencyView?:
      | (DependencyType | keyof typeof DependencyType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Height of Viewer container
     */
    height?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * width of the Viewer container
     */
    width?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Header of the rendered view
     */
    title?: string | PropertyBindingInfo;

    /**
     * Label of the network view
     */
    networkDependencyLabel?: string | PropertyBindingInfo;

    /**
     * Label of box view
     */
    boxDependencyLabel?: string | PropertyBindingInfo;

    /**
     * Levels information in Box dependency view
     */
    boxDependencyLevels?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Navigator for dependency views
     */
    showDependencyNavigator?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Dependency View Visibility
     */
    visibleDependency?:
      | (DependencyVisibility | keyof typeof DependencyVisibility)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * View type of landscape view
     */
    viewType?:
      | (ViewType | keyof typeof ViewType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Text displayed in the dependency view
     */
    navigationPath?: string | PropertyBindingInfo;

    /**
     * control has to be added in the container or directly in the window.
     */
    hasParent?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * positions for selection view entity
     */
    selectionViewPosition?:
      | (SelectionViewPosition | keyof typeof SelectionViewPosition)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * close button visibility
     */
    showClose?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Label for the component view
     */
    componentViewLabel?: string | PropertyBindingInfo;

    /**
     * Label for deployment view.
     */
    deploymentViewLabel?: string | PropertyBindingInfo;

    /**
     * determines whether the option is rendered on view or entity
     */
    solutionOptionType?:
      | (OptionType | keyof typeof OptionType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Type of solution rendered
     */
    solutionType?:
      | (SolutionType | keyof typeof SolutionType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Deployment type section
     */
    showDeploymentTypeSection?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Label for the options
     */
    deploymentOptionsLabel?: string | PropertyBindingInfo;

    /**
     * tooltip of label for the options
     */
    deploymentOptionsTooltip?: string | PropertyBindingInfo;

    /**
     * tooltip for component view button
     */
    componentViewTooltip?: string | PropertyBindingInfo;

    /**
     * tooltip for deployment view button
     */
    deploymentViewTooltip?: string | PropertyBindingInfo;

    /**
     * tooltip for close button
     */
    closeButtonTooltip?: string | PropertyBindingInfo;

    /**
     * Specify the height of plugged content
     */
    plugContentHeight?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Type of line to be drawn
     */
    connectionLine?:
      | (ConnectionLine | keyof typeof ConnectionLine)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Systems to be rendered in the landscape viewer
     */
    systems?:
      | LandscapeEntity[]
      | LandscapeEntity
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Optional: connection Entity between two systems.
     */
    connectionEntities?:
      | ConnectionEntity[]
      | ConnectionEntity
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * connector contains from and to information
     */
    connectors?:
      | Connector[]
      | Connector
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Options for the solution
     */
    solutionOptions?:
      | Option[]
      | Option
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * a control which can be plugged into this control and can be only plugged in top section.
     */
    plugContent?: Control;

    /**
     * closes the view
     */
    close?: (oEvent: Event) => void;

    /**
     * load the solution view either deployment or component
     */
    loadSolutionView?: (oEvent: Event) => void;
  }

  export interface $LandscapeViewerCloseEventParameters {}

  export interface $LandscapeViewerLoadSolutionViewEventParameters {}
}

declare module "sap/landvisz/LongTextField" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { EntityCSSSize } from "sap/landvisz/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Long text for a header
   */
  class LongTextField extends Control {
    /**
     * Constructor for a new LongTextField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LongTextFieldSettings
    );
    /**
     * Constructor for a new LongTextField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LongTextFieldSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.LongTextField with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LongTextField>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.LongTextField.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the data
     *
     * @returns Value of property `renderingSize`
     */
    getRenderingSize(): EntityCSSSize | keyof typeof EntityCSSSize;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Long text for a header
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getRenderingSize renderingSize}.
     *
     * rendering size of the data
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRenderingSize(
      /**
       * New value for property `renderingSize`
       */
      sRenderingSize?: EntityCSSSize | keyof typeof EntityCSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Long text for a header
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }
  export default LongTextField;

  export interface $LongTextFieldSettings extends $ControlSettings {
    /**
     * Long text for a header
     */
    text?: string | PropertyBindingInfo;

    /**
     * rendering size of the data
     */
    renderingSize?:
      | (EntityCSSSize | keyof typeof EntityCSSSize)
      | PropertyBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/landvisz/Option" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import OptionEntity from "sap/landvisz/OptionEntity";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Options for solution entities
   */
  class Option extends Control {
    /**
     * Constructor for a new Option.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $OptionSettings
    );
    /**
     * Constructor for a new Option.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $OptionSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.Option with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Option>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.Option.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some optionEntity to the aggregation {@link #getOptionEntities optionEntities}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addOptionEntity(
      /**
       * The optionEntity to add; if empty, nothing is inserted
       */
      oOptionEntity: OptionEntity
    ): this;
    /**
     * Destroys all the optionEntities in the aggregation {@link #getOptionEntities optionEntities}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyOptionEntities(): this;
    /**
     * Gets current value of property {@link #getCurrentEntity currentEntity}.
     *
     * Entity on which options are applicable
     *
     * @returns Value of property `currentEntity`
     */
    getCurrentEntity(): string;
    /**
     * Gets content of aggregation {@link #getOptionEntities optionEntities}.
     *
     * Entity to be rendered as options
     */
    getOptionEntities(): OptionEntity[];
    /**
     * Gets current value of property {@link #getType type}.
     *
     * type of main entity which has a replacement
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Checks for the provided `sap.landvisz.OptionEntity` in the aggregation {@link #getOptionEntities optionEntities}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfOptionEntity(
      /**
       * The optionEntity whose index is looked for
       */
      oOptionEntity: OptionEntity
    ): int;
    /**
     * Inserts a optionEntity into the aggregation {@link #getOptionEntities optionEntities}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertOptionEntity(
      /**
       * The optionEntity to insert; if empty, nothing is inserted
       */
      oOptionEntity: OptionEntity,
      /**
       * The `0`-based index the optionEntity should be inserted at; for a negative value of `iIndex`, the optionEntity
       * is inserted at position 0; for a value greater than the current size of the aggregation, the optionEntity
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getOptionEntities optionEntities}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllOptionEntities(): OptionEntity[];
    /**
     * Removes a optionEntity from the aggregation {@link #getOptionEntities optionEntities}.
     *
     * @returns The removed optionEntity or `null`
     */
    removeOptionEntity(
      /**
       * The optionEntity to remove or its index or id
       */
      vOptionEntity: int | string | OptionEntity
    ): OptionEntity | null;
    /**
     * Sets a new value for property {@link #getCurrentEntity currentEntity}.
     *
     * Entity on which options are applicable
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCurrentEntity(
      /**
       * New value for property `currentEntity`
       */
      sCurrentEntity?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * type of main entity which has a replacement
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
  }
  export default Option;

  export interface $OptionSettings extends $ControlSettings {
    /**
     * type of main entity which has a replacement
     */
    type?: string | PropertyBindingInfo;

    /**
     * Entity on which options are applicable
     */
    currentEntity?: string | PropertyBindingInfo;

    /**
     * Entity to be rendered as options
     */
    optionEntities?:
      | OptionEntity[]
      | OptionEntity
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/landvisz/OptionEntity" {
  import {
    default as OptionSource,
    $OptionSourceSettings,
  } from "sap/landvisz/OptionSource";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Options for solution entities
   */
  class OptionEntity extends OptionSource {
    /**
     * Constructor for a new OptionEntity.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $OptionEntitySettings
    );
    /**
     * Constructor for a new OptionEntity.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $OptionEntitySettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.OptionEntity with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.landvisz.OptionSource.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OptionEntity>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.OptionEntity.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some optionSource to the aggregation {@link #getOptionSources optionSources}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addOptionSource(
      /**
       * The optionSource to add; if empty, nothing is inserted
       */
      oOptionSource: OptionSource
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectOption selectOption} event of this `sap.landvisz.OptionEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.OptionEntity` itself.
     *
     * Select event for option entity
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectOption(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.OptionEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectOption selectOption} event of this `sap.landvisz.OptionEntity`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.landvisz.OptionEntity` itself.
     *
     * Select event for option entity
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectOption(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.landvisz.OptionEntity` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the optionSources in the aggregation {@link #getOptionSources optionSources}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyOptionSources(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectOption selectOption} event of this `sap.landvisz.OptionEntity`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectOption(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:selectOption selectOption} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectOption(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getEnable enable}.
     *
     * enabling/disabling options
     *
     * Default value is `true`.
     *
     * @returns Value of property `enable`
     */
    getEnable(): boolean;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * label for option entity
     *
     * @returns Value of property `label`
     */
    getLabel(): string;
    /**
     * Gets content of aggregation {@link #getOptionSources optionSources}.
     *
     * Option Renderer Control
     */
    getOptionSources(): OptionSource[];
    /**
     * Gets current value of property {@link #getOptionTextTooltip optionTextTooltip}.
     *
     * tooltip for options
     *
     * @returns Value of property `optionTextTooltip`
     */
    getOptionTextTooltip(): string;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * determines current selected option
     *
     * Default value is `false`.
     *
     * @returns Value of property `selected`
     */
    getSelected(): boolean;
    /**
     * Checks for the provided `sap.landvisz.OptionSource` in the aggregation {@link #getOptionSources optionSources}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfOptionSource(
      /**
       * The optionSource whose index is looked for
       */
      oOptionSource: OptionSource
    ): int;
    /**
     * Inserts a optionSource into the aggregation {@link #getOptionSources optionSources}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertOptionSource(
      /**
       * The optionSource to insert; if empty, nothing is inserted
       */
      oOptionSource: OptionSource,
      /**
       * The `0`-based index the optionSource should be inserted at; for a negative value of `iIndex`, the optionSource
       * is inserted at position 0; for a value greater than the current size of the aggregation, the optionSource
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getOptionSources optionSources}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllOptionSources(): OptionSource[];
    /**
     * Removes a optionSource from the aggregation {@link #getOptionSources optionSources}.
     *
     * @returns The removed optionSource or `null`
     */
    removeOptionSource(
      /**
       * The optionSource to remove or its index or id
       */
      vOptionSource: int | string | OptionSource
    ): OptionSource | null;
    /**
     * Sets a new value for property {@link #getEnable enable}.
     *
     * enabling/disabling options
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnable(
      /**
       * New value for property `enable`
       */
      bEnable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * label for option entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getOptionTextTooltip optionTextTooltip}.
     *
     * tooltip for options
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOptionTextTooltip(
      /**
       * New value for property `optionTextTooltip`
       */
      sOptionTextTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * determines current selected option
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
  }
  export default OptionEntity;

  export interface $OptionEntitySettings extends $OptionSourceSettings {
    /**
     * label for option entity
     */
    label?: string | PropertyBindingInfo;

    /**
     * determines current selected option
     */
    selected?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * enabling/disabling options
     */
    enable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * tooltip for options
     */
    optionTextTooltip?: string | PropertyBindingInfo;

    /**
     * Option Renderer Control
     */
    optionSources?:
      | OptionSource[]
      | OptionSource
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Select event for option entity
     */
    selectOption?: (oEvent: Event) => void;
  }

  export interface $OptionEntitySelectOptionEventParameters {}
}

declare module "sap/landvisz/OptionSource" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.98)
   *
   * Options source for solution entities
   */
  class OptionSource extends Control {
    /**
     * Constructor for a new OptionSource.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $OptionSourceSettings
    );
    /**
     * Constructor for a new OptionSource.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $OptionSourceSettings
    );

    /**
     * Creates a new subclass of class sap.landvisz.OptionSource with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OptionSource>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.landvisz.OptionSource.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSource source}.
     *
     * source for option entity
     *
     * @returns Value of property `source`
     */
    getSource(): string;
    /**
     * Sets a new value for property {@link #getSource source}.
     *
     * source for option entity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSource(
      /**
       * New value for property `source`
       */
      sSource?: string
    ): this;
  }
  export default OptionSource;

  export interface $OptionSourceSettings extends $ControlSettings {
    /**
     * source for option entity
     */
    source?: string | PropertyBindingInfo;
  }
}

declare namespace sap {
  interface IUI5DefineDependencyNames {
    "sap/landvisz/ConnectionEntity": undefined;

    "sap/landvisz/Connector": undefined;

    "sap/landvisz/internal/ActionBar": undefined;

    "sap/landvisz/internal/DataContainer": undefined;

    "sap/landvisz/internal/DeploymentType": undefined;

    "sap/landvisz/internal/EntityAction": undefined;

    "sap/landvisz/internal/EntityCustomAction": undefined;

    "sap/landvisz/internal/HeaderList": undefined;

    "sap/landvisz/internal/IdentificationBar": undefined;

    "sap/landvisz/internal/LinearRowField": undefined;

    "sap/landvisz/internal/ModelingStatus": undefined;

    "sap/landvisz/internal/NestedRowField": undefined;

    "sap/landvisz/internal/SingleDataContainer": undefined;

    "sap/landvisz/internal/TreeField": undefined;

    "sap/landvisz/LandscapeEntity": undefined;

    "sap/landvisz/LandscapeViewer": undefined;

    "sap/landvisz/library": undefined;

    "sap/landvisz/LongTextField": undefined;

    "sap/landvisz/Option": undefined;

    "sap/landvisz/OptionEntity": undefined;

    "sap/landvisz/OptionSource": undefined;
  }
}

// For Library Version: 1.111.0

declare module "sap/fe/macros/MacroAPI" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Base API control for building blocks.
   */
  class MacroAPI extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;

    constructor();
  }
  export default MacroAPI;

  export interface $MacroAPISettings extends $ControlSettings {
    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     */
    contextPath?: string | PropertyBindingInfo;

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     */
    metaPath?: string | PropertyBindingInfo;
  }
}

declare module "sap/fe/macros/chart/ChartAPI" {
  import {
    default as MacroAPI,
    $MacroAPISettings,
  } from "sap/fe/macros/MacroAPI";

  import Context from "sap/ui/model/odata/v4/Context";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Building block used to create a chart based on the metadata provided by OData V4.
   *
   *
   * Usually, a contextPath and metaPath is expected.
   * Usage example:
   *
   * ```javascript
   *
   * <macro:Chart id="Mychart" contextPath="/RootEntity" metaPath="@com.sap.vocabularies.UI.v1.Chart" />
   * ```
   */
  class Chart extends MacroAPI {
    constructor();

    /**
     * Gets contexts from the chart that have been selected by the user.
     *
     * @returns Contexts of the rows selected by the user
     */
    getSelectedContexts(): Context[];
  }
  export default Chart;

  /**
   * Definition of a custom action to be used inside the chart toolbar
   */
  export type Action = {
    /**
     * Reference to the key of another action already displayed in the toolbar to properly place this one
     */
    anchor: string;
    /**
     * Enables or disables the action
     */
    enabled: boolean;
    /**
     * Unique identifier of the action
     */
    key: string;
    /**
     * Defines where this action should be placed relative to the defined anchor
     * Allowed values are `Before` and `After`
     */
    placement: string;
    /**
     * Event handler to be called when the user chooses the action
     */
    press: string;
    /**
     * Defines if the action requires a selection.
     */
    requiresSelection: boolean;
    /**
     * The text that will be displayed for this action
     */
    text: string;
  };

  /**
   * Definition of a custom action group to be used inside the chart toolbar
   */
  export type ActionGroup = {
    /**
     * Defines nested actions
     */
    actions: undefined[];
    /**
     * Reference to the key of another action or action group already displayed in the toolbar to properly place
     * this one
     */
    anchor: string;
    /**
     * Unique identifier of the action
     */
    key: string;
    /**
     * Defines where this action group should be placed relative to the defined anchor
     * Allowed values are `Before` and `After`
     */
    placement: string;
    /**
     * The text that will be displayed for this action group
     */
    text: string;
  };

  export interface $ChartSettings extends $MacroAPISettings {
    /**
     * Metadata path to the entitySet or navigationProperty
     */
    contextPath?: string | PropertyBindingInfo;

    /**
     * Id of the FilterBar building block associated with the chart.
     */
    filterBar?: string | PropertyBindingInfo;

    /**
     * Specifies the header text that is shown in the chart
     */
    header?: string | PropertyBindingInfo;

    /**
     * Controls if the header text should be shown or not
     */
    headerVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * ID of the chart
     */
    id?: string | PropertyBindingInfo;

    /**
     * Metadata path to the presentation context (UI.Chart with or without a qualifier)
     */
    metaPath?: string | PropertyBindingInfo;

    /**
     * Controls which options should be enabled for the chart personalization dialog.
     * If it is set to `true`, all possible options for this kind of chart are enabled.
     *
     * If it is set to `false`, personalization is disabled.
     *
     *
     *
     * You can also provide a more granular control for the personalization by providing a comma-separated list
     * with the options you want to be available.
     *
     * Available options are:
     *
     *  - Sort
     *
     *  - Type
     *
     *  - Item
     *
     *  - Filter
     */
    personalization?: boolean | string | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the selection mode to be used by the chart.
     * Allowed values are `None`, `Single` or `Multiple`
     */
    selectionMode?: string | PropertyBindingInfo;

    /**
     * Controls the kind of variant management that should be enabled for the chart.
     * Allowed value is `Control`.
     *
     * If set with value `Control`, a variant management control is seen within the chart and the chart is linked
     * to this.
     *
     * If not set with any value, variant management control is not available for this chart.
     */
    variantManagement?: string | PropertyBindingInfo;

    /**
     * Aggregate actions of the chart.
     */
    actions?: Action[] | Action | AggregationBindingInfo | `{${string}}`;
  }

  export interface $ChartSelectionChangeEventParameters {}
}

declare module "sap/fe/macros/field/FieldAPI" {
  import {
    default as MacroAPI,
    $MacroAPISettings,
  } from "sap/fe/macros/MacroAPI";

  import { MessageType } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Building block for creating a field based on the metadata provided by OData V4.
   *
   *
   * Usually, a DataField or DataPoint annotation is expected, but the field can also be used to display a
   * property from the entity type.
   * Usage example:
   *
   * ```javascript
   *
   * <macro:Field id="MyField" metaPath="MyProperty" />
   * ```
   */
  class Field extends MacroAPI {
    constructor();

    /**
     * Adds a message to the field.
     *
     * @returns The id of the message
     */
    addMessage(
      /**
       * undefined
       */
      parameters: {
        /**
         * Message description
         */
        description?: string;
        /**
         * Message text
         */
        message?: string;
        /**
         * True if the message is persistent
         */
        persistent?: boolean;
        /**
         * Type of the message
         */
        type?: MessageType | keyof typeof MessageType;
      }
    ): string;
    /**
     * Retrieves the current value of the field.
     *
     * @returns The current value of the field
     */
    getValue(): boolean | string;
    /**
     * Removes a message from the field.
     */
    removeMessage(
      /**
       * The id of the message
       */
      id: string
    ): void;
  }
  export default Field;

  /**
   * Additional format options for the field.
   */
  export type FieldFormatOptions = {
    /**
     *  Defines how the field value and associated text will be displayed together.
     *
     *  Allowed values are "Value", "Description", "DescriptionValue" and "ValueDescription"
     */
    displayMode: string;
    /**
     * Defines if and how the field measure will be displayed.
     *
     * Allowed values are "Hidden" and "ReadOnly"
     */
    measureDisplayMode: string;
    /**
     * Defines if the date part of a date time with timezone field should be shown.
     *
     * The dateTimeOffset field must have a timezone annotation.
     *
     * The default value is true.
     */
    showDate: boolean;
    /**
     * Defines if the time part of a date time with timezone field should be shown.
     *
     * The dateTimeOffset field must have a timezone annotation.
     *
     * The default value is true.
     */
    showTime: boolean;
    /**
     * Defines if the timezone part of a date time with timezone field should be shown.
     *
     * The dateTimeOffset field must have a timezone annotation.
     *
     * The default value is true.
     */
    showTimezone: boolean;
    /**
     * Defines how the full text will be displayed.
     *
     * Allowed values are "InPlace" and "Popover"
     */
    textExpandBehaviorDisplay: string;
    /**
     * Maximum number of lines for multiline texts in edit mode.
     */
    textLinesEdit: number;
    /**
     * Maximum number of characters from the beginning of the text field that are shown initially.
     */
    textMaxCharactersDisplay: number;
    /**
     * Defines the maximum number of characters for the multiline text value.
     *
     * If a multiline text exceeds the maximum number of allowed characters, the counter below the input field
     * displays the exact number.
     */
    textMaxLength: number;
    /**
     * Maximum number of lines that multiline texts in edit mode can grow to.
     */
    textMaxLines: number;
  };

  export interface $FieldSettings extends $MacroAPISettings {
    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     */
    contextPath?: string | PropertyBindingInfo;

    /**
     * A set of options that can be configured.
     */
    formatOptions?: FieldFormatOptions | PropertyBindingInfo | `{${string}}`;

    /**
     * The identifier of the Field control.
     */
    id?: string | PropertyBindingInfo;

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     */
    metaPath?: string | PropertyBindingInfo;

    /**
     * An expression that allows you to control the read-only state of the field.
     * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
     * current state.
     */
    readOnly?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Option to add semantic objects to a field.
     * Valid options are either a single semantic object, a stringified array of semantic objects
     * or a single binding expression returning either a single semantic object or an array of semantic objects
     */
    semanticObject?: string | PropertyBindingInfo;
  }

  export interface $FieldChangeEventParameters {}
}

declare module "sap/fe/macros/field/TextAreaEx" {
  import { default as TextArea, $TextAreaSettings } from "sap/m/TextArea";

  /**
   * Extension of the TextArea control to add a check for the maximum length when setting the value.
   */
  class TextAreaEx extends TextArea {
    constructor();
  }
  export default TextAreaEx;

  export interface $TextAreaExSettings extends $TextAreaSettings {}
}

declare module "sap/fe/macros/filterBar/FilterBarAPI" {
  import {
    default as MacroAPI,
    $MacroAPISettings,
  } from "sap/fe/macros/MacroAPI";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Building block for creating a FilterBar based on the metadata provided by OData V4.
   *
   *
   * Usually, a SelectionFields annotation is expected.
   * Usage example:
   *
   * ```javascript
   *
   * <macro:FilterBar id="MyFilterBar" metaPath="@com.sap.vocabularies.UI.v1.SelectionFields" />
   * ```
   */
  class FilterBar extends MacroAPI {
    constructor();

    /**
     * Get the Active Filters Text Summary for the filter bar.
     *
     * @returns Active filters summary as text
     */
    getActiveFiltersText(): any;
    /**
     * Provides all the filters that are currently active
     * along with the search expression.
     *
     * @returns An array of active filters and the search expression.
     */
    getFilters(): object;
    /**
     * Set the filter values for the given property in the filter bar.
     * The filter values can be either a single value or an array of values.
     * Each filter value must be represented as a primitive value.
     *
     * @returns A promise for asynchronous handling
     */
    setFilterValues(
      /**
       * The path to the property as a condition path
       */
      sConditionPath: string,
      /**
       * undefined
       */
      sOperator: string | undefined,
      /**
       * The values to be applied
       */
      vValues?: boolean | boolean[] | number | number[] | string | string[]
    ): Promise<void>;
    /**
     * Triggers the API search on the filter bar.
     *
     * @returns Returns a promise which resolves if filter go is triggered successfully; otherwise gets rejected.
     */
    triggerSearch(): Promise<any>;
  }
  export default FilterBar;

  /**
   * Definition of a custom filter to be used inside the FilterBar.
   * The template for the FilterField has to be provided as the default aggregation
   */
  export type FilterField = {
    /**
     * Reference to the key of another filter already displayed in the table to properly place this one
     */
    anchor: string;
    /**
     * The property name of the FilterField
     */
    key: string;
    /**
     * The text that will be displayed for this FilterField
     */
    label: string;
    /**
     * Defines where this filter should be placed relative to the defined anchor
     * Allowed values are `Before` and `After`
     */
    placement: string;
    /**
     * If set, possible errors that occur during the search will be displayed in a message box.
     */
    showMessages: boolean;
  };

  export interface $FilterBarSettings extends $MacroAPISettings {
    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     */
    contextPath?: string | PropertyBindingInfo;

    /**
     * The identifier of the FilterBar control.
     */
    id?: string | PropertyBindingInfo;

    /**
     * If true, the search is triggered automatically when a filter value is changed.
     */
    liveMode?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     */
    metaPath?: string | PropertyBindingInfo;

    /**
     * Handles the visibility of the 'Clear' button on the FilterBar.
     */
    showClearButton?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Displays possible errors during the search in a message box
     */
    showMessages?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Parameter which sets the visibility of the FilterBar building block
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Aggregate filter fields of the FilterBar building block
     */
    filterFields?:
      | FilterField[]
      | FilterField
      | AggregationBindingInfo
      | `{${string}}`;
  }

  export interface $FilterBarAfterClearEventParameters {}

  export interface $FilterBarFilterChangedEventParameters {}

  export interface $FilterBarSearchEventParameters {}
}

declare module "sap/fe/macros/form/Form.block" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Context from "sap/ui/model/Context";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Building block for creating a Form based on the metadata provided by OData V4.
   *
   *
   * It is designed to work based on a FieldGroup annotation but can also work if you provide a ReferenceFacet
   * or a CollectionFacet
   * Usage example:
   *
   * ```javascript
   *
   * <macro:Form id="MyForm" metaPath="@com.sap.vocabularies.UI.v1.FieldGroup#GeneralInformation" />
   * ```
   */
  class Form extends Control {
    constructor();
  }
  export default Form;

  export interface $FormSettings extends $ControlSettings {
    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     */
    contextPath?: Context | PropertyBindingInfo | `{${string}}`;

    /**
     * The identifier of the form control.
     */
    id?: string | PropertyBindingInfo;

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     */
    metaPath?: Context | PropertyBindingInfo | `{${string}}`;

    /**
     * The title of the form control.
     */
    title?: string | PropertyBindingInfo;
  }
}

declare module "sap/fe/macros/form/FormElement.block" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Context from "sap/ui/model/Context";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.90.0
   *
   * Building block used to create a form element based on the metadata provided by OData V4.
   */
  class FormElement extends Control {
    constructor();
  }
  export default FormElement;

  export interface $FormElementSettings extends $ControlSettings {
    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     */
    contextPath?: Context | PropertyBindingInfo | `{${string}}`;

    /**
     * The identifier of the FormElement building block.
     */
    id?: string | PropertyBindingInfo;

    /**
     * Label shown for the field. If not set, the label from the annotations will be shown.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     */
    metaPath?: Context | PropertyBindingInfo | `{${string}}`;

    /**
     * If set to false, the FormElement is not rendered.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Optional aggregation of controls that should be displayed inside the FormElement.
     * If not set, a default Field building block will be rendered
     */
    fields?: Control;
  }
}

declare module "sap/fe/macros/library" {}

declare module "sap/fe/macros/microchart/MicroChart.block" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  /**
   * @SINCE 1.93.0
   *
   * Building block used to create a MicroChart based on the metadata provided by OData V4.
   */
  class MicroChart extends Control {
    constructor();
  }
  export default MicroChart;

  export interface $MicroChartSettings extends $ControlSettings {}
}

declare module "sap/fe/macros/paginator/Paginator.block" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.94.0
   *
   * Building block used to create a paginator control.
   * Usage example:
   *
   * ```javascript
   *
   * <macro:Paginator />
   * ```
   */
  class Paginator extends Control {
    constructor();
  }
  export default Paginator;

  export interface $PaginatorSettings extends $ControlSettings {
    /**
     * The identifier of the Paginator control.
     */
    id?: string | PropertyBindingInfo;
  }
}

declare module "sap/fe/macros/table/TableAPI" {
  import {
    default as MacroAPI,
    $MacroAPISettings,
  } from "sap/fe/macros/MacroAPI";

  import { MessageType } from "sap/ui/core/library";

  import Context from "sap/ui/model/odata/v4/Context";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Building block used to create a table based on the metadata provided by OData V4.
   *
   *
   * Usually, a LineItem or PresentationVariant annotation is expected, but the Table building block can also
   * be used to display an EntitySet.
   * Usage example:
   *
   * ```javascript
   *
   * <macro:Table id="MyTable" metaPath="@com.sap.vocabularies.UI.v1.LineItem" />
   * ```
   */
  class Table extends MacroAPI {
    constructor();

    /**
     * Adds a message to the table.
     * The message applies to the whole table and not to an individual table row.
     *
     *
     * @returns The ID of the message
     */
    addMessage(
      /**
       * undefined
       */
      parameters: {
        /**
         * Message description
         */
        description?: string;
        /**
         * Message text
         */
        message?: string;
        /**
         * True if the message is persistent
         */
        persistent?: boolean;
        /**
         * Message type
         */
        type?: MessageType | keyof typeof MessageType;
      }
    ): string;
    /**
     * Gets contexts from the table that have been selected by the user.
     *
     * @returns Contexts of the rows selected by the user
     */
    getSelectedContexts(): Context[];
    /**
     * Removes a message from the table.
     */
    removeMessage(
      /**
       * The id of the message
       */
      id: string
    ): void;
  }
  export default Table;

  /**
   * Definition of a custom action to be used inside the table toolbar
   */
  export type Action = {
    /**
     * Reference to the key of another action already displayed in the toolbar to properly place this one
     */
    anchor: string;
    /**
     * Enables or disables the action
     */
    enabled: boolean;
    /**
     * Unique identifier of the action
     */
    key: string;
    /**
     * Defines where this action should be placed relative to the defined anchor
     * Allowed values are `Before` and `After`
     */
    placement: string;
    /**
     * Event handler to be called when the user chooses the action
     */
    press: string;
    /**
     * Defines if the action requires a selection.
     */
    requiresSelection: boolean;
    /**
     * The text that will be displayed for this action
     */
    text: string;
  };

  /**
   * Definition of a custom ActionGroup to be used inside the table toolbar
   */
  export type ActionGroup = {
    /**
     * Defines nested actions
     */
    actions: undefined[];
    /**
     * Reference to the key of another action or action group already displayed in the toolbar to properly place
     * this one
     */
    anchor: string;
    /**
     * Unique identifier of the ActionGroup
     */
    key: string;
    /**
     * Defines where this action group should be placed relative to the defined anchor
     * Allowed values are `Before` and `After`
     */
    placement: string;
    /**
     * The text that will be displayed for this action group
     */
    text: string;
  };

  /**
   * Definition of a custom column to be used inside the table.
   * The template for the column has to be provided as the default aggregation
   */
  export type Column = {
    /**
     * Reference to the key of another column already displayed in the table to properly place this one
     */
    anchor: string;
    /**
     * The text that will be displayed for this column header
     */
    header: string;
    /**
     * Aligns the header as well as the content horizontally
     */
    horizontalAlign: /* was: sap.fe.core.converters.ManifestSettings.HorizontalAlign */ any;
    /**
     * Defines the column importance.
     * You can define which columns should be automatically moved to the pop-in area based on their importance
     */
    importance: string;
    /**
     * Unique identifier of the column
     */
    key: string;
    /**
     * Defines where this column should be placed relative to the defined anchor
     * Allowed values are `Before` and `After`
     */
    placement: string;
    /**
     * Defines the column's width.
     * Allowed values are `auto`, `value` and `inherit` according to {@link sap.ui.core.CSSSize}
     */
    width: string;
  };

  export interface $TableSettings extends $MacroAPISettings {
    /**
     * An expression that allows you to control the 'busy' state of the table.
     */
    busy?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     */
    contextPath?: string | PropertyBindingInfo;

    /**
     * Specifies if the column width is automatically calculated.
     */
    enableAutoColumnWidth?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Controls if the export functionality of the table is enabled or not.
     */
    enableExport?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Controls whether the table can be opened in fullscreen mode or not.
     */
    enableFullScreen?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Controls if the paste functionality of the table is enabled or not.
     */
    enablePaste?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * ID of the FilterBar building block associated with the table.
     */
    filterBar?: string | PropertyBindingInfo;

    /**
     * Number of columns that are fixed on the left. Only columns which are not fixed can be scrolled horizontally.
     * This property is not relevant for Responsive tables
     */
    frozenColumnCount?: number | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies the header text that is shown in the table.
     */
    header?: string | PropertyBindingInfo;

    /**
     * Controls if the header text should be shown or not.
     */
    headerVisible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The identifier of the table control.
     */
    id?: string | PropertyBindingInfo;

    /**
     * Defines whether to display the search action.
     */
    isSearchable?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Groups menu actions by key.
     */
    menu?: string | PropertyBindingInfo;

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     */
    metaPath?: string | PropertyBindingInfo;

    /**
     * Controls which options should be enabled for the table personalization dialog.
     * If it is set to `true`, all possible options for this kind of table are enabled.
     *
     * If it is set to `false`, personalization is disabled.
     *
     *
     *
     * You can also provide a more granular control for the personalization by providing a comma-separated list
     * with the options you want to be available.
     *
     * Available options are:
     *
     *  - Sort
     *
     *  - Column
     *
     *  - Filter
     */
    personalization?: boolean | string | PropertyBindingInfo | `{${string}}`;

    /**
     * An expression that allows you to control the 'read-only' state of the table.
     * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
     * current state.
     */
    readOnly?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the selection mode to be used by the table.
     * Allowed values are `None`, `Single`, `Multi` or `Auto`. If not set to 'None', SAP Fiori elements hooks
     * into the standard lifecycle to determine the consistent selection mode.
     */
    selectionMode?: string | PropertyBindingInfo;

    /**
     * Defines the type of table that will be used by the building block to render the data.
     * Allowed values are `GridTable` and `ResponsiveTable`
     */
    type?: string | PropertyBindingInfo;

    /**
     * Controls the kind of variant management that should be enabled for the table.
     * Allowed value is `Control`.
     *
     * If set with value `Control`, a variant management control is seen within the table and the table is linked
     * to this.
     *
     * If not set with any value, control level variant management is not available for this table.
     */
    variantManagement?: string | PropertyBindingInfo;

    /**
     * Aggregate actions of the table.
     */
    actions?: Action[] | Action | AggregationBindingInfo | `{${string}}`;

    /**
     * Aggregate columns of the table.
     */
    columns?: Column[] | Column | AggregationBindingInfo | `{${string}}`;
  }

  export interface $TableRowPressEventParameters {}

  export interface $TableSelectionChangeEventParameters {}
}

declare namespace sap {
  interface IUI5DefineDependencyNames {
    "sap/fe/macros/chart/ChartAPI": undefined;

    "sap/fe/macros/field/FieldAPI": undefined;

    "sap/fe/macros/field/TextAreaEx": undefined;

    "sap/fe/macros/filterBar/FilterBarAPI": undefined;

    "sap/fe/macros/form/Form.block": undefined;

    "sap/fe/macros/form/FormElement.block": undefined;

    "sap/fe/macros/library": undefined;

    "sap/fe/macros/MacroAPI": undefined;

    "sap/fe/macros/microchart/MicroChart.block": undefined;

    "sap/fe/macros/paginator/Paginator.block": undefined;

    "sap/fe/macros/table/TableAPI": undefined;
  }
}
